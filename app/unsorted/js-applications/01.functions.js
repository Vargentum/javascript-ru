'use strict';

function example1() {

  require(['tape'], function (test) {

    test('Order WITH unintentional side effect.', function (t) {

      var cartProto = {
        items: [],
        add: function add(item) {
          this.items.push(item);
        }
      };

      createCart = function (items) {
        var cart = Object.create(cartProto);
        // BAD: provide side effect: when change cart.items, items will be changed too (reference relations)
        cart.items = items;

        // GOOD: create copy of items (keep them immutable)
        cart.items = Object.create(items);
        return card;
      };
      savedCart = createCart(['a', 'b', 'c']);

      session = {
        get: function get() {
          return this.cart;
        },

        cart: createCart(savedCart.items)
      };
      session.card.addItem('d');

      t.ok(session.cart.items.indexOf('d') === 1, 'Passes: Session cart has "d".');
      t.ok(session.cart.items.indexOf('d') === -1, 'Fails: The stored cart is unchanged.');
    });
  });
}
example1();

function example2() {

  /*-----------------------
    Using IIFE  for encapsulating modules
  -----------------------*/

  /*Without IIFE*/

  var Lightbulb = function Lightbulb() {
    this.isOn = false;
  };

  var lightbulb = new Lightbulb();

  var toggle = function toggle() {
    this.isOn = !this.isOn;
    return this.isOn;
  };
  Lightbulb.prototype.getState = function getState() {
    // Implementation...
  };
  Lightbulb.prototype.off = function off() {
    // Implementation...
  };
  Lightbulb.prototype.on = function on() {
    // Implementation...
  };
  Lightbulb.prototype.blink = function blink() {
    // Implementation...
  };
  test('Prototypes without IIFE.', function () {
    equal(lightbulb.toggle(), true, 'Lightbulb turns on.');
    equal(lightbulb.toggle(), false, 'Lightbulb turns off.');
  });

  /*With IIFE*/

  (function () {

    var toggle = function toggle() {
      this.isOn = !this.isOn;
      return this.isOn;
    };
    var getState = function getState() {
      // Implementation...
    };
    var off = function off() {
      // Implementation...
    };
    var on = function on() {
      // Implementation...
    };
    var blink = function blink() {
      // Implementation...
    };

    var lightbulb = {
      isOn: false,
      toggle: toggle,
      getState: getState,
      off: off,
      on: on,
      blink: blink
    };

    // test('Prototypes with IIFE.', function () {
    //   equal(lightbulb.toggle(), true, 'Lightbulb turns on.')
    //   equal(lightbulb.toggle(), false 'Lightbulb turns off.')
    // });
  })();
}
example2();
//# sourceMappingURL=data:application/json;base64,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QUVYLFFBQUksTUFBTSxHQUFHLFNBQVQsTUFBTSxHQUFlO0FBQ3ZCLFVBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQztLQUNsQixDQUFBO0FBQ0QsUUFBSSxRQUFRLEdBQUcsU0FBUyxRQUFRLEdBQUc7O0tBRWxDLENBQUM7QUFDRixRQUFJLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRzs7S0FFeEIsQ0FBQztBQUNGLFFBQUksRUFBRSxHQUFHLFNBQVMsRUFBRSxHQUFHOztLQUV0QixDQUFDO0FBQ0YsUUFBSSxLQUFLLEdBQUcsU0FBUyxLQUFLLEdBQUc7O0tBRTVCLENBQUM7O0FBRUYsUUFBSSxTQUFTLEdBQUc7QUFDZCxVQUFJLEVBQUUsS0FBSztBQUNYLFlBQU0sRUFBRSxNQUFNO0FBQ2QsY0FBUSxFQUFFLFFBQVE7QUFDbEIsU0FBRyxFQUFFLEdBQUc7QUFDUixRQUFFLEVBQUUsRUFBRTtBQUNOLFdBQUssRUFBRSxLQUFLO0tBQ2I7Ozs7OztBQUFBLEdBT0YsQ0FBQSxFQUFFLENBQUM7Q0FHTDtBQUNELFFBQVEsRUFBRSxDQUFBIiwiZmlsZSI6InVuc29ydGVkL2pzLWFwcGxpY2F0aW9ucy8wMS5mdW5jdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBleGFtcGxlMSAoKSB7XG5cbiAgcmVxdWlyZShbJ3RhcGUnXSwgZnVuY3Rpb24gKHRlc3QpIHtcblxuICAgIHRlc3QoJ09yZGVyIFdJVEggdW5pbnRlbnRpb25hbCBzaWRlIGVmZmVjdC4nLCBmdW5jdGlvbih0KSB7XG5cbiAgICAgIGxldCBjYXJ0UHJvdG8gPSB7XG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgYWRkKGl0ZW0pIHtcbiAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcmVhdGVDYXJ0ID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgICAgbGV0IGNhcnQgPSBPYmplY3QuY3JlYXRlKGNhcnRQcm90bylcbiAgICAgICAgLy8gQkFEOiBwcm92aWRlIHNpZGUgZWZmZWN0OiB3aGVuIGNoYW5nZSBjYXJ0Lml0ZW1zLCBpdGVtcyB3aWxsIGJlIGNoYW5nZWQgdG9vIChyZWZlcmVuY2UgcmVsYXRpb25zKVxuICAgICAgICBjYXJ0Lml0ZW1zID0gaXRlbXMgXG5cbiAgICAgICAgLy8gR09PRDogY3JlYXRlIGNvcHkgb2YgaXRlbXMgKGtlZXAgdGhlbSBpbW11dGFibGUpXG4gICAgICAgIGNhcnQuaXRlbXMgPSBPYmplY3QuY3JlYXRlKGl0ZW1zKVxuICAgICAgICByZXR1cm4gY2FyZFxuICAgICAgfVxuICAgICAgc2F2ZWRDYXJ0ID0gY3JlYXRlQ2FydChbJ2EnLCAnYicsICdjJ10pXG5cbiAgICAgIHNlc3Npb24gPSB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jYXJ0XG4gICAgICAgIH0sXG4gICAgICAgIGNhcnQ6IGNyZWF0ZUNhcnQoc2F2ZWRDYXJ0Lml0ZW1zKVxuICAgICAgfVxuICAgICAgc2Vzc2lvbi5jYXJkLmFkZEl0ZW0oJ2QnKVxuXG4gICAgICB0Lm9rKHNlc3Npb24uY2FydC5pdGVtcy5pbmRleE9mKCdkJykgPT09IDEsICdQYXNzZXM6IFNlc3Npb24gY2FydCBoYXMgXCJkXCIuJylcbiAgICAgIHQub2soc2Vzc2lvbi5jYXJ0Lml0ZW1zLmluZGV4T2YoJ2QnKSA9PT0gLTEsICdGYWlsczogVGhlIHN0b3JlZCBjYXJ0IGlzIHVuY2hhbmdlZC4nKVxuICAgIH0pXG5cbiAgfSlcblxuXG59XG5leGFtcGxlMSgpXG5cblxuXG5cbmZ1bmN0aW9uIGV4YW1wbGUyICgpIHtcblxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBVc2luZyBJSUZFICBmb3IgZW5jYXBzdWxhdGluZyBtb2R1bGVzXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKldpdGhvdXQgSUlGRSovXG5cbiAgbGV0IExpZ2h0YnVsYiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlXG4gIH1cblxuICBsZXQgbGlnaHRidWxiID0gbmV3IExpZ2h0YnVsYigpXG5cbiAgbGV0IHRvZ2dsZSA9IGZ1bmN0aW9uICgpIHsgXG4gICAgdGhpcy5pc09uID0gIXRoaXMuaXNPbjtcbiAgICByZXR1cm4gdGhpcy5pc09uO1xuICB9O1xuICBMaWdodGJ1bGIucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gZ2V0U3RhdGUoKSB7IFxuICAgIC8vIEltcGxlbWVudGF0aW9uLi4uXG4gIH07XG4gIExpZ2h0YnVsYi5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmKCkge1xuICAgIC8vIEltcGxlbWVudGF0aW9uLi4uXG4gIH07XG4gIExpZ2h0YnVsYi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbigpIHsgXG4gICAgLy8gSW1wbGVtZW50YXRpb24uLi5cbiAgfTtcbiAgTGlnaHRidWxiLnByb3RvdHlwZS5ibGluayA9IGZ1bmN0aW9uIGJsaW5rKCkgeyBcbiAgICAvLyBJbXBsZW1lbnRhdGlvbi4uLlxuICB9O1xuICB0ZXN0KCdQcm90b3R5cGVzIHdpdGhvdXQgSUlGRS4nLCBmdW5jdGlvbiAoKSB7IFxuICAgIGVxdWFsKGxpZ2h0YnVsYi50b2dnbGUoKSwgdHJ1ZSwgJ0xpZ2h0YnVsYiB0dXJucyBvbi4nKTsgXG4gICAgZXF1YWwobGlnaHRidWxiLnRvZ2dsZSgpLCBmYWxzZSwgJ0xpZ2h0YnVsYiB0dXJucyBvZmYuJyk7XG4gIH0pO1xuXG5cbiAgLypXaXRoIElJRkUqL1xuXG4gIChmdW5jdGlvbiAoKSB7XG5cbiAgICBsZXQgdG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5pc09uID0gIXRoaXMuaXNPbjtcbiAgICAgIHJldHVybiB0aGlzLmlzT247ICBcbiAgICB9XG4gICAgbGV0IGdldFN0YXRlID0gZnVuY3Rpb24gZ2V0U3RhdGUoKSB7IFxuICAgICAgLy8gSW1wbGVtZW50YXRpb24uLi5cbiAgICB9O1xuICAgIGxldCBvZmYgPSBmdW5jdGlvbiBvZmYoKSB7XG4gICAgICAvLyBJbXBsZW1lbnRhdGlvbi4uLlxuICAgIH07XG4gICAgbGV0IG9uID0gZnVuY3Rpb24gb24oKSB7IFxuICAgICAgLy8gSW1wbGVtZW50YXRpb24uLi5cbiAgICB9O1xuICAgIGxldCBibGluayA9IGZ1bmN0aW9uIGJsaW5rKCkgeyBcbiAgICAgIC8vIEltcGxlbWVudGF0aW9uLi4uXG4gICAgfTtcblxuICAgIGxldCBsaWdodGJ1bGIgPSB7XG4gICAgICBpc09uOiBmYWxzZSxcbiAgICAgIHRvZ2dsZTogdG9nZ2xlLFxuICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgb2ZmOiBvZmYsXG4gICAgICBvbjogb24sXG4gICAgICBibGluazogYmxpbmtcbiAgICB9XG5cblxuICAgIC8vIHRlc3QoJ1Byb3RvdHlwZXMgd2l0aCBJSUZFLicsIGZ1bmN0aW9uICgpIHsgXG4gICAgLy8gICBlcXVhbChsaWdodGJ1bGIudG9nZ2xlKCksIHRydWUsICdMaWdodGJ1bGIgdHVybnMgb24uJylcbiAgICAvLyAgIGVxdWFsKGxpZ2h0YnVsYi50b2dnbGUoKSwgZmFsc2UgJ0xpZ2h0YnVsYiB0dXJucyBvZmYuJylcbiAgICAvLyB9KTtcbiAgfSgpKVxuICAgIFxuXG59XG5leGFtcGxlMigpXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
