'use strict';

/*
Exercise 1: создание Класса через Прототип

props in Constructor
methods in Prototype

*/

function example1() {

  //constructor
  function Animal(name) {
    this.speed = 0;
    this.name = name;
  }

  //extend contstructor prototype with new methods

  Animal.prototype.run = function (speed) {
    this.speed += speed;
  };

  Animal.prototype.stop = function () {
    this.speed = 0;
  };

  var a = new Animal('rabbit');

  a.run(3);
  console.log(a.speed);
  a.run(3);
  console.log(a.speed);
  a.stop();
  console.log(a.speed);
}
// example1()

/*
Rewrite Functional inheritance to Prototypal
*/

function task1() {

  //functional
  function CoffeeMachineFunctional(power) {
    var waterAmount = 0;

    var WATER_HEAT_CAPACITY = 4200;

    function getTimeToBoil() {
      return waterAmount * WATER_HEAT_CAPACITY * 80 / power;
    }

    this.run = function () {
      setTimeout(function () {
        console.log('Кофе готов!');
      }, getTimeToBoil());
    };

    this.setWaterAmount = function (amount) {
      waterAmount = amount;
    };
  }

  var cm = new CoffeeMachineFunctional(10000);
  cm.setWaterAmount(50);
  cm.run();

  //prototypal

  function CoffeeMachinePrototypal(power) {
    this._waterAmount = 0;
    this._power = power;
  }

  //static property
  CoffeeMachinePrototypal.prototype.WATER_HEAD_CAPACITY = 4200;

  CoffeeMachinePrototypal.prototype._getTimeToBoil = function () {
    return this._waterAmount * this._WATER_HEAT_CAPACITY * 80 / this._power;
  };

  CoffeeMachinePrototypal.prototype.run = function () {
    setTimeout(function () {
      console.log('Coffee is Ready!');
    }, this._getTimeToBoil());
  };

  CoffeeMachinePrototypal.prototype.setWaterAmount = function (amount) {
    this._waterAmount = amount;
  };

  var cm = new CoffeeMachinePrototypal(10001);
  cm.setWaterAmount(50);
  cm.run();
}
// task1()

/*Task 2: Fix function
*/
function task2() {
  function Hamster() {
    this.food = []; // make different prop for each instance
  }

  // Hamster.prototype.food = []  incorrect - one food for all instances

  Hamster.prototype.found = function (something) {
    this.food.push(something);
  };

  // Создаём двух хомяков и кормим первого
  var speedy = new Hamster();
  var lazy = new Hamster();

  speedy.found("яблоко");
  speedy.found("орех");

  console.log(speedy.food.length); // 2
  console.log(lazy.food.length); // 0
}
// task2()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmN1c3RvbV9wcm90b3R5cGVfY2xhc3Nlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBUUEsU0FBUyxRQUFRLEdBQUk7OztBQUduQixXQUFTLE1BQU0sQ0FBRSxJQUFJLEVBQUU7QUFDckIsUUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7QUFDZCxRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtHQUNqQjs7OztBQUFBLEFBSUQsUUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDdEMsUUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUM7R0FDckIsQ0FBQTs7QUFFRCxRQUFNLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFXO0FBQ2pDLFFBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ2hCLENBQUM7O0FBRUYsTUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7O0FBRTVCLEdBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDUixTQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQixHQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckIsR0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ1IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEI7Ozs7Ozs7QUFBQSxBQVNELFNBQVMsS0FBSyxHQUFFOzs7QUFHZCxXQUFTLHVCQUF1QixDQUFDLEtBQUssRUFBRTtBQUN0QyxRQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7O0FBRXBCLFFBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDOztBQUUvQixhQUFTLGFBQWEsR0FBRztBQUN2QixhQUFPLFdBQVcsR0FBRyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0tBQ3ZEOztBQUVELFFBQUksQ0FBQyxHQUFHLEdBQUcsWUFBVztBQUNwQixnQkFBVSxDQUFDLFlBQVc7QUFDcEIsZUFBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLENBQUUsQ0FBQztPQUM5QixFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7S0FDckIsQ0FBQzs7QUFFRixRQUFJLENBQUMsY0FBYyxHQUFHLFVBQVMsTUFBTSxFQUFFO0FBQ3JDLGlCQUFXLEdBQUcsTUFBTSxDQUFDO0tBQ3RCLENBQUM7R0FFSDs7QUFFRCxNQUFJLEVBQUUsR0FBRyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsSUFBRSxDQUFDLEdBQUcsRUFBRTs7OztBQUFDLEFBS1QsV0FBUyx1QkFBdUIsQ0FBRSxLQUFLLEVBQUU7QUFDdkMsUUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7QUFDckIsUUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7R0FDcEI7OztBQUFBLEFBR0QseUJBQXVCLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQTs7QUFFNUQseUJBQXVCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0FBQzdELFdBQU8sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDekUsQ0FBQTs7QUFFRCx5QkFBdUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFlBQVk7QUFDbEQsY0FBVSxDQUFDLFlBQVc7QUFDcEIsYUFBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ2pDLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7R0FDMUIsQ0FBQTs7QUFFRCx5QkFBdUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQ25FLFFBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0dBQzVCLENBQUE7O0FBRUQsTUFBSSxFQUFFLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMzQyxJQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLElBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtDQUNUOzs7OztBQUFBLEFBT0QsU0FBUyxLQUFLLEdBQUk7QUFDaEIsV0FBUyxPQUFPLEdBQUc7QUFDakIsUUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQUEsR0FDZjs7OztBQUFBLEFBSUQsU0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBUyxTQUFTLEVBQUU7QUFDNUMsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDM0I7OztBQUFDLEFBR0YsTUFBSSxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMzQixNQUFJLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOztBQUV6QixRQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLFFBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXJCLFNBQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUU7QUFBQyxBQUNsQyxTQUFPLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFO0FBQUMsQ0FDakM7O0FBQUEiLCJmaWxlIjoicGFydDEvb29wX3Byb3RvdHlwYWwvMDIuY3VzdG9tX3Byb3RvdHlwZV9jbGFzc2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkV4ZXJjaXNlIDE6INGB0L7Qt9C00LDQvdC40LUg0JrQu9Cw0YHRgdCwINGH0LXRgNC10Lcg0J/RgNC+0YLQvtGC0LjQv1xuXG5wcm9wcyBpbiBDb25zdHJ1Y3RvclxubWV0aG9kcyBpbiBQcm90b3R5cGVcblxuKi9cblxuZnVuY3Rpb24gZXhhbXBsZTEgKCkge1xuXG4gIC8vY29uc3RydWN0b3JcbiAgZnVuY3Rpb24gQW5pbWFsIChuYW1lKSB7XG4gICAgdGhpcy5zcGVlZCA9IDBcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gIH1cblxuICAvL2V4dGVuZCBjb250c3RydWN0b3IgcHJvdG90eXBlIHdpdGggbmV3IG1ldGhvZHNcblxuICBBbmltYWwucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChzcGVlZCkge1xuICAgIHRoaXMuc3BlZWQgKz0gc3BlZWQ7XG4gIH1cblxuICBBbmltYWwucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNwZWVkID0gMDtcbiAgfTtcblxuICB2YXIgYSA9IG5ldyBBbmltYWwoJ3JhYmJpdCcpXG5cbiAgYS5ydW4oMylcbiAgY29uc29sZS5sb2coYS5zcGVlZCk7XG4gIGEucnVuKDMpXG4gIGNvbnNvbGUubG9nKGEuc3BlZWQpO1xuICBhLnN0b3AoKVxuICBjb25zb2xlLmxvZyhhLnNwZWVkKTtcbn1cbi8vIGV4YW1wbGUxKClcblxuXG5cbi8qXG5SZXdyaXRlIEZ1bmN0aW9uYWwgaW5oZXJpdGFuY2UgdG8gUHJvdG90eXBhbFxuKi9cblxuZnVuY3Rpb24gdGFzazEoKXtcblxuICAvL2Z1bmN0aW9uYWxcbiAgZnVuY3Rpb24gQ29mZmVlTWFjaGluZUZ1bmN0aW9uYWwocG93ZXIpIHtcbiAgICB2YXIgd2F0ZXJBbW91bnQgPSAwO1xuXG4gICAgdmFyIFdBVEVSX0hFQVRfQ0FQQUNJVFkgPSA0MjAwO1xuXG4gICAgZnVuY3Rpb24gZ2V0VGltZVRvQm9pbCgpIHtcbiAgICAgIHJldHVybiB3YXRlckFtb3VudCAqIFdBVEVSX0hFQVRfQ0FQQUNJVFkgKiA4MCAvIHBvd2VyO1xuICAgIH1cblxuICAgIHRoaXMucnVuID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ9Ca0L7RhNC1INCz0L7RgtC+0LIhJyApO1xuICAgICAgfSwgZ2V0VGltZVRvQm9pbCgpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRXYXRlckFtb3VudCA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgd2F0ZXJBbW91bnQgPSBhbW91bnQ7XG4gICAgfTtcblxuICB9XG5cbiAgdmFyIGNtID0gbmV3IENvZmZlZU1hY2hpbmVGdW5jdGlvbmFsKDEwMDAwKTtcbiAgY20uc2V0V2F0ZXJBbW91bnQoNTApO1xuICBjbS5ydW4oKTtcblxuXG4gIC8vcHJvdG90eXBhbFxuXG4gIGZ1bmN0aW9uIENvZmZlZU1hY2hpbmVQcm90b3R5cGFsIChwb3dlcikge1xuICAgIHRoaXMuX3dhdGVyQW1vdW50ID0gMFxuICAgIHRoaXMuX3Bvd2VyID0gcG93ZXJcbiAgfVxuXG4gIC8vc3RhdGljIHByb3BlcnR5XG4gIENvZmZlZU1hY2hpbmVQcm90b3R5cGFsLnByb3RvdHlwZS5XQVRFUl9IRUFEX0NBUEFDSVRZID0gNDIwMFxuXG4gIENvZmZlZU1hY2hpbmVQcm90b3R5cGFsLnByb3RvdHlwZS5fZ2V0VGltZVRvQm9pbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2F0ZXJBbW91bnQgKiB0aGlzLl9XQVRFUl9IRUFUX0NBUEFDSVRZICogODAgLyB0aGlzLl9wb3dlcjtcbiAgfVxuXG4gIENvZmZlZU1hY2hpbmVQcm90b3R5cGFsLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDb2ZmZWUgaXMgUmVhZHkhJyk7XG4gICAgfSwgdGhpcy5fZ2V0VGltZVRvQm9pbCgpKVxuICB9XG5cbiAgQ29mZmVlTWFjaGluZVByb3RvdHlwYWwucHJvdG90eXBlLnNldFdhdGVyQW1vdW50ID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgIHRoaXMuX3dhdGVyQW1vdW50ID0gYW1vdW50O1xuICB9XG5cbiAgdmFyIGNtID0gbmV3IENvZmZlZU1hY2hpbmVQcm90b3R5cGFsKDEwMDAxKVxuICBjbS5zZXRXYXRlckFtb3VudCg1MClcbiAgY20ucnVuKClcbn1cbi8vIHRhc2sxKClcblxuXG5cbi8qVGFzayAyOiBGaXggZnVuY3Rpb25cbiovXG5mdW5jdGlvbiB0YXNrMiAoKSB7XG4gIGZ1bmN0aW9uIEhhbXN0ZXIoKSB7XG4gICAgdGhpcy5mb29kID0gW10gLy8gbWFrZSBkaWZmZXJlbnQgcHJvcCBmb3IgZWFjaCBpbnN0YW5jZVxuICB9XG5cbiAgLy8gSGFtc3Rlci5wcm90b3R5cGUuZm9vZCA9IFtdICBpbmNvcnJlY3QgLSBvbmUgZm9vZCBmb3IgYWxsIGluc3RhbmNlc1xuXG4gIEhhbXN0ZXIucHJvdG90eXBlLmZvdW5kID0gZnVuY3Rpb24oc29tZXRoaW5nKSB7XG4gICAgdGhpcy5mb29kLnB1c2goc29tZXRoaW5nKTtcbiAgfTtcblxuICAvLyDQodC+0LfQtNCw0ZHQvCDQtNCy0YPRhSDRhdC+0LzRj9C60L7QsiDQuCDQutC+0YDQvNC40Lwg0L/QtdGA0LLQvtCz0L5cbiAgdmFyIHNwZWVkeSA9IG5ldyBIYW1zdGVyKCk7XG4gIHZhciBsYXp5ID0gbmV3IEhhbXN0ZXIoKTtcblxuICBzcGVlZHkuZm91bmQoXCLRj9Cx0LvQvtC60L5cIik7XG4gIHNwZWVkeS5mb3VuZChcItC+0YDQtdGFXCIpO1xuXG4gIGNvbnNvbGUubG9nKCBzcGVlZHkuZm9vZC5sZW5ndGggKTsgLy8gMlxuICBjb25zb2xlLmxvZyggbGF6eS5mb29kLmxlbmd0aCApOyAvLyAwXG59XG4vLyB0YXNrMigpXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
