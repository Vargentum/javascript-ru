"use strict";

/*Задача 1*/
function A() {
  this.name = 'someString';
}
function B() {
  return a;
}

var a = new A();
var b = new B();

console.log(a == b); //true

/*Решение: нужно вернуть в конструкторе B, ссылку на объект a
Дополнение из ответа: они должны возвращать ссылку на один и тот же объект */

/*Задача 2: создать Calculator при помощи конструктора*/

function Calculator() {
  this.read = function (num1, num2) {
    this.num1 = num1;
    this.num2 = num2;
  };
  this.sum = function () {
    return this.num1 + this.num2;
  };
  this.mul = function () {
    return this.num1 * this.num2;
  };
}

var calculator = new Calculator();
calculator.read();

console.log("Сумма=" + calculator.sum());
console.log("Произведение=" + calculator.mul());

/*Задача 3: создать Accumulator при помощи конструктора*/
var Accumulator = function Accumulator(initValue) {
  this.value = initValue || 0; //не должно идти после this.read потому что this.value внутри this.read == undefined
  this.read = function (val) {
    this.value += val || 0;
  };
};

var acm = new Accumulator(5);
console.log(acm.value); // 5
acm.read(5);
console.log(acm.value); // 10
acm.read(50);
console.log(acm.value); // 60

/*Задача 3: создать Calculator который создает расширяемые объекты-калькуляторы*/
function MetaCalculator() {
  this.calculate = function (operation) {
    var operations = operation.split(' ');
    var a = operations[0];
    var method = operations[1];
    var b = operations[2];

    if (this[method]) {
      return this[method].exec(a, b);
    } else {
      return 'Error: there is no such method' + method;
    }
  };
  this.addMethod = function (method, exec) {
    this[method] = {
      name: method,
      exec: exec
    };
  };
}

var powerCalc = new MetaCalculator();
powerCalc.addMethod("*", function (a, b) {
  return a * b;
});
powerCalc.addMethod("/", function (a, b) {
  return a / b;
});
powerCalc.addMethod("**", function (a, b) {
  return Math.pow(a, b);
});

console.log(powerCalc.calculate("2 ** 3"));
console.log(powerCalc.calculate("2 * 3"));
console.log(powerCalc.calculate("2 / 3"));
console.log(powerCalc.calculate("2 - 3"));
//# sourceMappingURL=data:application/json;base64,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QUFHLFVBQVMsTUFBTSxFQUFFLElBQUksRUFBQztBQUNyQyxRQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7QUFDYixVQUFJLEVBQUUsTUFBTTtBQUNaLFVBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQTtHQUNGLENBQUM7Q0FDSDs7QUFFRCxJQUFJLFNBQVMsR0FBRyxJQUFJLGNBQWMsRUFBQSxDQUFDO0FBQ25DLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0QyxTQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDZCxDQUFDLENBQUM7QUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDdEMsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2QsQ0FBQyxDQUFDO0FBQ0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3ZDLFNBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDdkIsQ0FBQyxDQUFDOztBQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InBhcnQxL29iamVjdHMvMy5vYmplY3RfY29uc3RydWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKtCX0LDQtNCw0YfQsCAxKi9cbmZ1bmN0aW9uIEEoKSB7IFxuICB0aGlzLm5hbWUgPSAnc29tZVN0cmluZydcbn1cbmZ1bmN0aW9uIEIoKSB7IFxuICByZXR1cm4gYTtcbn1cblxudmFyIGEgPSBuZXcgQTtcbnZhciBiID0gbmV3IEI7XG5cbmNvbnNvbGUubG9nKCBhID09IGIgKTsgLy90cnVlXG5cbi8q0KDQtdGI0LXQvdC40LU6INC90YPQttC90L4g0LLQtdGA0L3Rg9GC0Ywg0LIg0LrQvtC90YHRgtGA0YPQutGC0L7RgNC1IEIsINGB0YHRi9C70LrRgyDQvdCwINC+0LHRitC10LrRgiBhXG7QlNC+0L/QvtC70L3QtdC90LjQtSDQuNC3INC+0YLQstC10YLQsDog0L7QvdC4INC00L7Qu9C20L3RiyDQstC+0LfQstGA0LDRidCw0YLRjCDRgdGB0YvQu9C60YMg0L3QsCDQvtC00LjQvSDQuCDRgtC+0YIg0LbQtSDQvtCx0YrQtdC60YIgKi9cblxuXG5cblxuXG4vKtCX0LDQtNCw0YfQsCAyOiDRgdC+0LfQtNCw0YLRjCBDYWxjdWxhdG9yINC/0YDQuCDQv9C+0LzQvtGJ0Lgg0LrQvtC90YHRgtGA0YPQutGC0L7RgNCwKi9cblxuZnVuY3Rpb24gQ2FsY3VsYXRvcigpIHtcbiAgdGhpcy5yZWFkID0gZnVuY3Rpb24obnVtMSwgbnVtMil7XG4gICAgdGhpcy5udW0xID0gbnVtMTtcbiAgICB0aGlzLm51bTIgPSBudW0yO1xuICB9XG4gIHRoaXMuc3VtID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW0xICsgdGhpcy5udW0yfVxuICB0aGlzLm11bCA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubnVtMSAqIHRoaXMubnVtMn1cbn1cblxuXG5cbnZhciBjYWxjdWxhdG9yID0gbmV3IENhbGN1bGF0b3IoKTtcbmNhbGN1bGF0b3IucmVhZCgpO1xuXG5jb25zb2xlLmxvZyggXCLQodGD0LzQvNCwPVwiICsgY2FsY3VsYXRvci5zdW0oKSApO1xuY29uc29sZS5sb2coIFwi0J/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1PVwiICsgY2FsY3VsYXRvci5tdWwoKSApO1xuXG5cblxuXG4vKtCX0LDQtNCw0YfQsCAzOiDRgdC+0LfQtNCw0YLRjCBBY2N1bXVsYXRvciDQv9GA0Lgg0L/QvtC80L7RidC4INC60L7QvdGB0YLRgNGD0LrRgtC+0YDQsCovXG52YXIgQWNjdW11bGF0b3IgPSBmdW5jdGlvbihpbml0VmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IGluaXRWYWx1ZSB8fCAwOyAvL9C90LUg0LTQvtC70LbQvdC+INC40LTRgtC4INC/0L7RgdC70LUgdGhpcy5yZWFkINC/0L7RgtC+0LzRgyDRh9GC0L4gdGhpcy52YWx1ZSDQstC90YPRgtGA0LggdGhpcy5yZWFkID09IHVuZGVmaW5lZFxuICB0aGlzLnJlYWQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB0aGlzLnZhbHVlICs9IHZhbCB8fCAwO1xuICB9OyAgXG59O1xuXG5cblxudmFyIGFjbSA9IG5ldyBBY2N1bXVsYXRvcig1KTtcbmNvbnNvbGUubG9nKGFjbS52YWx1ZSk7ICAvLyA1XG5hY20ucmVhZCg1KTsgXG5jb25zb2xlLmxvZyhhY20udmFsdWUpOyAgLy8gMTBcbmFjbS5yZWFkKDUwKTtcbmNvbnNvbGUubG9nKGFjbS52YWx1ZSk7ICAvLyA2MFxuXG5cblxuXG4vKtCX0LDQtNCw0YfQsCAzOiDRgdC+0LfQtNCw0YLRjCBDYWxjdWxhdG9yINC60L7RgtC+0YDRi9C5INGB0L7Qt9C00LDQtdGCINGA0LDRgdGI0LjRgNGP0LXQvNGL0LUg0L7QsdGK0LXQutGC0Yst0LrQsNC70YzQutGD0LvRj9GC0L7RgNGLKi9cbmZ1bmN0aW9uIE1ldGFDYWxjdWxhdG9yKCl7XG4gIHRoaXMuY2FsY3VsYXRlID0gZnVuY3Rpb24ob3BlcmF0aW9uKXtcbiAgICB2YXIgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbi5zcGxpdCgnICcpO1xuICAgIHZhciBhICAgICAgPSBvcGVyYXRpb25zWzBdO1xuICAgIHZhciBtZXRob2QgPSBvcGVyYXRpb25zWzFdO1xuICAgIHZhciBiICAgICAgPSBvcGVyYXRpb25zWzJdO1xuXG4gICAgaWYgKHRoaXNbbWV0aG9kXSkge1xuICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kXS5leGVjKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ0Vycm9yOiB0aGVyZSBpcyBubyBzdWNoIG1ldGhvZCcgKyBtZXRob2RcbiAgICB9XG4gIH07XG4gIHRoaXMuYWRkTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kLCBleGVjKXtcbiAgICB0aGlzW21ldGhvZF0gPSB7XG4gICAgICBuYW1lOiBtZXRob2QsXG4gICAgICBleGVjOiBleGVjXG4gICAgfVxuICB9O1xufVxuXG52YXIgcG93ZXJDYWxjID0gbmV3IE1ldGFDYWxjdWxhdG9yO1xucG93ZXJDYWxjLmFkZE1ldGhvZChcIipcIiwgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSAqIGI7XG59KTtcbnBvd2VyQ2FsYy5hZGRNZXRob2QoXCIvXCIsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgLyBiO1xufSk7XG5wb3dlckNhbGMuYWRkTWV0aG9kKFwiKipcIiwgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gTWF0aC5wb3coYSwgYik7XG59KTtcblxuY29uc29sZS5sb2cocG93ZXJDYWxjLmNhbGN1bGF0ZShcIjIgKiogM1wiKSk7XG5jb25zb2xlLmxvZyhwb3dlckNhbGMuY2FsY3VsYXRlKFwiMiAqIDNcIikpO1xuY29uc29sZS5sb2cocG93ZXJDYWxjLmNhbGN1bGF0ZShcIjIgLyAzXCIpKTtcbmNvbnNvbGUubG9nKHBvd2VyQ2FsYy5jYWxjdWxhdGUoXCIyIC0gM1wiKSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
