"use strict";

/*Decorator: function that wrap another function and
improve or change it behavior*/

// Timer decorator

/*TODO:
function with clojure
forward call (with apply)
count time with performance now
store exec time in object

*/
function timingDecorator(func, time) {
  return function () {
    var start = performance.now();
    var result = func.apply(this, arguments); //forward call
    if (!timers[time]) {
      timers[time] = 0;
    }
    timers[time] = performance.now() - start;
    return result;
  };
}

function f(x) {} // любая функция

var timers = {}; // объект для таймеров

// отдекорировали
f = timingDecorator(f, "myFunc");

// запускаем
f(1);
f(2);
f(3); // функция работает как раньше, но время подсчитывается
f(3e15);

timers.myFunc; // общее время

/*Example 2: data check decorator*/

function isNumber(data) {
  return typeof data === 'number' ? true : false;
}

function dataCheck(func, check) {
  return function () {
    var args = [].slice.apply(arguments);
    var invalidParams = args.filter(function (a) {
      return !check(a);
    });
    invalidParams.forEach(function (p) {
      console.log("Attention: invalid param " + p);
    });
    return func.apply(this, args);
  };
}

function sum(a, b) {
  return a + b;
}

sum = dataCheck(sum, isNumber); //decorated function

sum(1, 2); // 3
sum(1, true, false, '42'); //Invalid params: true

/*Декоратор проверки доступа*/
function isAdmin(user) {
  return user.admin ? true : false;
}

function checkYourPrivileges(f) {
  return function () {
    isAdmin(arguments) ? f.apply(this, arguments) : "No permissions!";
  };
}
var vasya = {
  admin: false
};

function removeAll() {
  return 'sudo rm -r -f /';
}

removeAll = checkYourPrivileges(removeAll);
removeAll(vasya); //no permissions

/*Задача 1: логгирующий декоратор
makeLogging(f, log) //log array
при каждом вызове записывает аргументы в лог, затем запусткает функцию
*/
function test() {
  return arguments;
}

function makeLogging(f, log) {
  return function () {
    [].slice.call(arguments).forEach(function (x) {
      return log.push(x);
    });
    return f.apply(this, arguments);
  };
}

var logArray = [];
test = makeLogging(test, logArray);

test(5);
test(623);
test(643);

console.log(logArray);

/*Задача 2: кеширующий декоратор. 
при первом вызове f с аргументом запоминает результат функции
при последующих вызовах с тем же аргументом - сразу вернуть запомненное значение*/
function f(x) {
  return Math.random() * x; // random для удобства тестирования
}

function makeCaching(f) {
  var cache = {}; // store in clojure

  return function (x) {
    if (cache[x]) {
      return cache[x];
    } else {
      cache[x] = f.call(this, x);
      return f.call(this, x);
    }
  };
}

f = makeCaching(f);

var a, b;

a = f(1);
b = f(1);
console.log(a === b); // true (значение закешировано)

b = f(2);
console.log(a === b); // false, другой аргумент => другое значение

/*ПОВТОРЕНИЕ: логирующий декоратор*/

function work(a) {
  /* ... */ // work - произвольная функция, один аргумент
}

function makeLogging(f, log) {
  return function () {
    log.push(arguments);

    f.apply(this, arguments);
  };
}

var log = [];
work = makeLogging(work, log);

work(1); // 1, добавлено в log
work(5); // 5, добавлено в log

// for (var i = 0; i < log.length; i++) {
//   console.log('Лог:' + log[i] ); // "Лог:1", затем "Лог:5"
// }

/*ПОВТОРЕНИЕ: логирующий декоратор с мульти-параметрами*/

function work(a, b) {
  return a + b; // work - произвольная функция
}

function makeLogging(f, log) {
  return function () {
    for (i in arguments) {
      log.push(arguments[i]);
    }

    f.apply(this, arguments);
  };
}

var log = [];
work = makeLogging(work, log);

work(1, 2); // 3
work(4, 5); // 9

console.log(log);

/*ПОВТОРЕНИЕ: кеширующий декоратор с мульти-параметрами

При первом вызове обертки с определенным аргументом — она вызывает f и запоминает значение.
При втором и последующих вызовах с тем же аргументом возвращается запомненное значение.*/

function f(x) {
  return Math.random() * x;
}

function makeCaching(f) {
  var cache = []; //общий для всех вызовов makeCaching()

  return function (num) {
    if (!cache[num]) {
      cache[num] = f.call(this, num);
    }
    return cache[num]; //возвращаем не прямое значение - а из кеша.
  };
}

//улучшенная версия
//Кеш использует объект вместо массива - работает для любого параметра, не только для чисел!

function makeCachingUpdated(f) {
  var cache = {};

  return function (num) {
    if (!(num in cache)) {
      cache[num] = f.call(this, num);
    }
    return cache[num];
  };
}

f = makeCachingUpdated(f);

var a, b;

a = f(1);
b = f(1);
console.log(a === b); // true (значение закешировано)

b = f(2);
console.log(a === b); // false, другой аргумент => другое значение
//# sourceMappingURL=data:application/json;base64,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QUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ2hDO0FBQ0QsV0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDbkIsQ0FBQTtDQUNGOztBQUdELENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUVULENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDVCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBRSxDQUFDLEtBQUssQ0FBQyxDQUFFOztBQUFDLEFBRXZCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDVCxPQUFPLENBQUMsR0FBRyxDQUFFLENBQUMsS0FBSyxDQUFDLENBQUU7QUFBQyIsImZpbGUiOiJwYXJ0MS9vYmplY3RzLzguZGVjb3JhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qRGVjb3JhdG9yOiBmdW5jdGlvbiB0aGF0IHdyYXAgYW5vdGhlciBmdW5jdGlvbiBhbmRcbmltcHJvdmUgb3IgY2hhbmdlIGl0IGJlaGF2aW9yKi9cblxuXG4vLyBUaW1lciBkZWNvcmF0b3JcblxuLypUT0RPOlxuZnVuY3Rpb24gd2l0aCBjbG9qdXJlXG5mb3J3YXJkIGNhbGwgKHdpdGggYXBwbHkpXG5jb3VudCB0aW1lIHdpdGggcGVyZm9ybWFuY2Ugbm93XG5zdG9yZSBleGVjIHRpbWUgaW4gb2JqZWN0XG5cbiovXG5mdW5jdGlvbiB0aW1pbmdEZWNvcmF0b3IgKGZ1bmMsIHRpbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vZm9yd2FyZCBjYWxsXG4gICAgaWYgKCF0aW1lcnNbdGltZV0pIHtcbiAgICAgIHRpbWVyc1t0aW1lXSA9IDA7XG4gICAgfVxuICAgIHRpbWVyc1t0aW1lXSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGYoeCkge30gLy8g0LvRjtCx0LDRjyDRhNGD0L3QutGG0LjRj1xuXG52YXIgdGltZXJzID0ge307IC8vINC+0LHRitC10LrRgiDQtNC70Y8g0YLQsNC50LzQtdGA0L7QslxuXG4vLyDQvtGC0LTQtdC60L7RgNC40YDQvtCy0LDQu9C4XG5mID0gdGltaW5nRGVjb3JhdG9yKGYsIFwibXlGdW5jXCIpO1xuXG4vLyDQt9Cw0L/Rg9GB0LrQsNC10LxcbmYoMSk7XG5mKDIpO1xuZigzKTsgLy8g0YTRg9C90LrRhtC40Y8g0YDQsNCx0L7RgtCw0LXRgiDQutCw0Log0YDQsNC90YzRiNC1LCDQvdC+INCy0YDQtdC80Y8g0L/QvtC00YHRh9C40YLRi9Cy0LDQtdGC0YHRj1xuZigzZTE1KTtcblxuXG50aW1lcnMubXlGdW5jOyAvLyDQvtCx0YnQtdC1INCy0YDQtdC80Y9cblxuXG5cblxuXG4vKkV4YW1wbGUgMjogZGF0YSBjaGVjayBkZWNvcmF0b3IqL1xuXG5mdW5jdGlvbiBpc051bWJlciAoZGF0YSkge1xuICByZXR1cm4gdHlwZW9mKGRhdGEpID09PSAnbnVtYmVyJyA/IHRydWUgOiBmYWxzZTtcbn1cblxuXG5mdW5jdGlvbiBkYXRhQ2hlY2soZnVuYywgY2hlY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7XG4gICAgdmFyIGludmFsaWRQYXJhbXMgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiAhY2hlY2soYSk7XG4gICAgfSk7XG4gICAgaW52YWxpZFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uKHApe1xuICAgICAgY29uc29sZS5sb2coXCJBdHRlbnRpb246IGludmFsaWQgcGFyYW0gXCIgKyBwKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3VtIChhLCBiKSB7XG4gIHJldHVybiBhICsgYjtcbn1cblxuc3VtID0gZGF0YUNoZWNrKHN1bSwgaXNOdW1iZXIpOyAvL2RlY29yYXRlZCBmdW5jdGlvblxuXG5zdW0oMSwgMik7IC8vIDNcbnN1bSgxLCB0cnVlLCBmYWxzZSwgJzQyJyk7IC8vSW52YWxpZCBwYXJhbXM6IHRydWVcblxuXG5cblxuLyrQlNC10LrQvtGA0LDRgtC+0YAg0L/RgNC+0LLQtdGA0LrQuCDQtNC+0YHRgtGD0L/QsCovXG5mdW5jdGlvbiBpc0FkbWluKHVzZXIpIHtcbiAgcmV0dXJuIHVzZXIuYWRtaW4gPyB0cnVlIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNoZWNrWW91clByaXZpbGVnZXMgKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpc0FkbWluKGFyZ3VtZW50cykgPyBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBcIk5vIHBlcm1pc3Npb25zIVwiXG4gIH1cbn1cbnZhciB2YXN5YSA9IHtcbiAgYWRtaW46IGZhbHNlXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUFsbCgpe1xuICByZXR1cm4gJ3N1ZG8gcm0gLXIgLWYgLydcbn1cblxucmVtb3ZlQWxsID0gY2hlY2tZb3VyUHJpdmlsZWdlcyhyZW1vdmVBbGwpXG5yZW1vdmVBbGwodmFzeWEpOyAvL25vIHBlcm1pc3Npb25zXG5cblxuXG5cbi8q0JfQsNC00LDRh9CwIDE6INC70L7Qs9Cz0LjRgNGD0Y7RidC40Lkg0LTQtdC60L7RgNCw0YLQvtGAXG5tYWtlTG9nZ2luZyhmLCBsb2cpIC8vbG9nIGFycmF5XG7Qv9GA0Lgg0LrQsNC20LTQvtC8INCy0YvQt9C+0LLQtSDQt9Cw0L/QuNGB0YvQstCw0LXRgiDQsNGA0LPRg9C80LXQvdGC0Ysg0LIg0LvQvtCzLCDQt9Cw0YLQtdC8INC30LDQv9GD0YHRgtC60LDQtdGCINGE0YPQvdC60YbQuNGOXG4qL1xuZnVuY3Rpb24gdGVzdCgpe3JldHVybiBhcmd1bWVudHM7fVxuXG5mdW5jdGlvbiBtYWtlTG9nZ2luZyAoZiwgbG9nKSB7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5mb3JFYWNoKCB4ID0+IGxvZy5wdXNoKHgpKTtcbiAgICByZXR1cm4gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgbG9nQXJyYXkgPSBbXTtcbnRlc3QgPSBtYWtlTG9nZ2luZyh0ZXN0LCBsb2dBcnJheSk7XG5cbnRlc3QoNSk7XG50ZXN0KDYyMyk7XG50ZXN0KDY0Myk7XG5cbmNvbnNvbGUubG9nKGxvZ0FycmF5KTtcblxuXG4vKtCX0LDQtNCw0YfQsCAyOiDQutC10YjQuNGA0YPRjtGJ0LjQuSDQtNC10LrQvtGA0LDRgtC+0YAuIFxu0L/RgNC4INC/0LXRgNCy0L7QvCDQstGL0LfQvtCy0LUgZiDRgSDQsNGA0LPRg9C80LXQvdGC0L7QvCDQt9Cw0L/QvtC80LjQvdCw0LXRgiDRgNC10LfRg9C70YzRgtCw0YIg0YTRg9C90LrRhtC40LhcbtC/0YDQuCDQv9C+0YHQu9C10LTRg9GO0YnQuNGFINCy0YvQt9C+0LLQsNGFINGBINGC0LXQvCDQttC1INCw0YDQs9GD0LzQtdC90YLQvtC8IC0g0YHRgNCw0LfRgyDQstC10YDQvdGD0YLRjCDQt9Cw0L/QvtC80L3QtdC90L3QvtC1INC30L3QsNGH0LXQvdC40LUqL1xuZnVuY3Rpb24gZih4KSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpICogeDsgLy8gcmFuZG9tINC00LvRjyDRg9C00L7QsdGB0YLQstCwINGC0LXRgdGC0LjRgNC+0LLQsNC90LjRj1xufVxuXG5mdW5jdGlvbiBtYWtlQ2FjaGluZyhmKSB7XG4gIHZhciBjYWNoZSA9IHt9IC8vIHN0b3JlIGluIGNsb2p1cmVcblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIGlmIChjYWNoZVt4XSkge1xuICAgICAgcmV0dXJuIGNhY2hlW3hdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZVt4XSA9IGYuY2FsbCh0aGlzLCB4KTtcbiAgICAgIHJldHVybiBmLmNhbGwodGhpcywgeCk7XG4gICAgfVxuXG4gIH1cbn1cblxuZiA9IG1ha2VDYWNoaW5nKGYpO1xuXG52YXIgYSwgYjtcblxuYSA9IGYoMSk7XG5iID0gZigxKTtcbmNvbnNvbGUubG9nKCBhID09PSBiICk7IC8vIHRydWUgKNC30L3QsNGH0LXQvdC40LUg0LfQsNC60LXRiNC40YDQvtCy0LDQvdC+KVxuXG5iID0gZigyKTtcbmNvbnNvbGUubG9nKCBhID09PSBiICk7IC8vIGZhbHNlLCDQtNGA0YPQs9C+0Lkg0LDRgNCz0YPQvNC10L3RgiA9PiDQtNGA0YPQs9C+0LUg0LfQvdCw0YfQtdC90LjQtVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLyrQn9Ce0JLQotCe0KDQldCd0JjQlTog0LvQvtCz0LjRgNGD0Y7RidC40Lkg0LTQtdC60L7RgNCw0YLQvtGAKi9cblxuZnVuY3Rpb24gd29yayhhKSB7XG4gIC8qIC4uLiAqLyAvLyB3b3JrIC0g0L/RgNC+0LjQt9Cy0L7Qu9GM0L3QsNGPINGE0YPQvdC60YbQuNGPLCDQvtC00LjQvSDQsNGA0LPRg9C80LXQvdGCXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2dnaW5nKGYsIGxvZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGxvZy5wdXNoKGFyZ3VtZW50cyk7XG5cbiAgICBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxudmFyIGxvZyA9IFtdO1xud29yayA9IG1ha2VMb2dnaW5nKHdvcmssIGxvZyk7XG5cbndvcmsoMSk7IC8vIDEsINC00L7QsdCw0LLQu9C10L3QviDQsiBsb2dcbndvcmsoNSk7IC8vIDUsINC00L7QsdCw0LLQu9C10L3QviDQsiBsb2dcblxuLy8gZm9yICh2YXIgaSA9IDA7IGkgPCBsb2cubGVuZ3RoOyBpKyspIHtcbi8vICAgY29uc29sZS5sb2coJ9Cb0L7QszonICsgbG9nW2ldICk7IC8vIFwi0JvQvtCzOjFcIiwg0LfQsNGC0LXQvCBcItCb0L7Qszo1XCJcbi8vIH1cblxuXG5cblxuLyrQn9Ce0JLQotCe0KDQldCd0JjQlTog0LvQvtCz0LjRgNGD0Y7RidC40Lkg0LTQtdC60L7RgNCw0YLQvtGAINGBINC80YPQu9GM0YLQuC3Qv9Cw0YDQsNC80LXRgtGA0LDQvNC4Ki9cblxuZnVuY3Rpb24gd29yayhhLCBiKSB7XG4gIHJldHVybiBhICsgYjsgLy8gd29yayAtINC/0YDQvtC40LfQstC+0LvRjNC90LDRjyDRhNGD0L3QutGG0LjRj1xufVxuXG5mdW5jdGlvbiBtYWtlTG9nZ2luZyhmLCBsb2cpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGkgaW4gYXJndW1lbnRzKSB7XG4gICAgICBsb2cucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufVxuXG52YXIgbG9nID0gW107XG53b3JrID0gbWFrZUxvZ2dpbmcod29yaywgbG9nKTtcblxud29yaygxLCAyKTsgLy8gM1xud29yayg0LCA1KTsgLy8gOVxuXG5jb25zb2xlLmxvZyhsb2cpO1xuXG5cblxuXG5cbi8q0J/QntCS0KLQntCg0JXQndCY0JU6INC60LXRiNC40YDRg9GO0YnQuNC5INC00LXQutC+0YDQsNGC0L7RgCDRgSDQvNGD0LvRjNGC0Lgt0L/QsNGA0LDQvNC10YLRgNCw0LzQuFxuXG7Qn9GA0Lgg0L/QtdGA0LLQvtC8INCy0YvQt9C+0LLQtSDQvtCx0LXRgNGC0LrQuCDRgSDQvtC/0YDQtdC00LXQu9C10L3QvdGL0Lwg0LDRgNCz0YPQvNC10L3RgtC+0Lwg4oCUINC+0L3QsCDQstGL0LfRi9Cy0LDQtdGCIGYg0Lgg0LfQsNC/0L7QvNC40L3QsNC10YIg0LfQvdCw0YfQtdC90LjQtS5cbtCf0YDQuCDQstGC0L7RgNC+0Lwg0Lgg0L/QvtGB0LvQtdC00YPRjtGJ0LjRhSDQstGL0LfQvtCy0LDRhSDRgSDRgtC10Lwg0LbQtSDQsNGA0LPRg9C80LXQvdGC0L7QvCDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0LfQsNC/0L7QvNC90LXQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1LiovXG5cbmZ1bmN0aW9uIGYoeCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHg7XG59XG5cbmZ1bmN0aW9uIG1ha2VDYWNoaW5nKGYpIHtcbiAgdmFyIGNhY2hlID0gW107ICAvL9C+0LHRidC40Lkg0LTQu9GPINCy0YHQtdGFINCy0YvQt9C+0LLQvtCyIG1ha2VDYWNoaW5nKClcblxuICByZXR1cm4gZnVuY3Rpb24gKG51bSkge1xuICAgIGlmICghY2FjaGVbbnVtXSkge1xuICAgICAgY2FjaGVbbnVtXSA9IGYuY2FsbCh0aGlzLCBudW0pO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbbnVtXTsgLy/QstC+0LfQstGA0LDRidCw0LXQvCDQvdC1INC/0YDRj9C80L7QtSDQt9C90LDRh9C10L3QuNC1IC0g0LAg0LjQtyDQutC10YjQsC5cbiAgfVxufVxuXG4vL9GD0LvRg9GH0YjQtdC90L3QsNGPINCy0LXRgNGB0LjRj1xuLy/QmtC10Ygg0LjRgdC/0L7Qu9GM0LfRg9C10YIg0L7QsdGK0LXQutGCINCy0LzQtdGB0YLQviDQvNCw0YHRgdC40LLQsCAtINGA0LDQsdC+0YLQsNC10YIg0LTQu9GPINC70Y7QsdC+0LPQviDQv9Cw0YDQsNC80LXRgtGA0LAsINC90LUg0YLQvtC70YzQutC+INC00LvRjyDRh9C40YHQtdC7IVxuXG5mdW5jdGlvbiBtYWtlQ2FjaGluZ1VwZGF0ZWQoZikgeyBcbiAgdmFyIGNhY2hlID0ge307IFxuXG4gIHJldHVybiBmdW5jdGlvbiAobnVtKSB7XG4gICAgaWYgKCEobnVtIGluIGNhY2hlKSkge1xuICAgICAgY2FjaGVbbnVtXSA9IGYuY2FsbCh0aGlzLCBudW0pO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbbnVtXTtcbiAgfVxufVxuXG5cbmYgPSBtYWtlQ2FjaGluZ1VwZGF0ZWQoZik7XG5cbnZhciBhLCBiO1xuXG5hID0gZigxKTtcbmIgPSBmKDEpO1xuY29uc29sZS5sb2coIGEgPT09IGIgKTsgLy8gdHJ1ZSAo0LfQvdCw0YfQtdC90LjQtSDQt9Cw0LrQtdGI0LjRgNC+0LLQsNC90L4pXG5cbmIgPSBmKDIpO1xuY29uc29sZS5sb2coIGEgPT09IGIgKTsgLy8gZmFsc2UsINC00YDRg9Cz0L7QuSDQsNGA0LPRg9C80LXQvdGCID0+INC00YDRg9Cz0L7QtSDQt9C90LDRh9C10L3QuNC1XG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
