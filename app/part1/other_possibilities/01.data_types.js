"use strict";

/*Полиморфная функция*/

function sayHi(who) {

  if (Array.isArray(who)) {
    // for (i in who) {
    //   console.log "Привет: " + who[i];
    // }
    who.forEach(sayHi); // изящнее с помощью рекурсии
  } else {
      console.log("Привет: " + who);
    }
}

// Утиная типизация
function sayHi(who) {

  if (who.forEach) {
    //eсли существует forEach - предполагаем что данные правильные
    who.forEach(sayHi);
  } else {
    console.log("Привет: " + who);
  }
}

/*Задача 1:

Напишите функцию formatDate(date), которая возвращает дату в формате dd.mm.yy.

Ее первый аргумент должен содержать дату в одном из видов:

Как объект Date.
Как строку, например yyyy-mm-dd или другую в стандартном формате даты.
Как число секунд с 01.01.1970.
Как массив [гггг, мм, дд], месяц начинается с нуля
Для этого вам понадобится определить тип данных аргумента и, при необходимости, преобразовать входные данные в нужный формат.


*/

function formatDate(date) {

  function isTypeEqual(d, type) {
    return ({}).toString.call(d).slice(8, -1) === type ? true : false;
  }

  function convertToProperFormat(d) {
    return "" + d.getDay() + "." + d.getMonth() + "." + d.getFullYear();
  }

  if (isTypeEqual(date, "Date")) {
    return convertToProperFormat(date);
  } else if (typeof date === "number") {
    return convertToProperFormat(new Date(date));
  } else if (Array.isArray(date)) {
    date = new Date(date[0], date[1] + 1, date[2]);
    return convertToProperFormat(date);
  } else {
    return "Error! Incorrect date format: " + date;
  }
}

console.log(formatDate(Date.now()));
console.log(formatDate(234143234));
console.log(formatDate([1999, 0, 24]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxLmRhdGFfdHlwZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRTs7QUFFbEIsTUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFOzs7O0FBSXRCLE9BQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQUEsR0FDbkIsTUFBTTtBQUNMLGFBQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0tBQzlCO0NBQ0Y7OztBQUFBLEFBSUQsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFOztBQUVsQixNQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7O0FBQ2YsT0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtHQUNuQixNQUFPO0FBQ04sV0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUE7R0FDOUI7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQXFCRCxTQUFTLFVBQVUsQ0FBQyxJQUFJLEVBQUU7O0FBRXhCLFdBQVMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUM7QUFDM0IsV0FBTyxDQUFBLEdBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztHQUNqRTs7QUFFRCxXQUFTLHFCQUFxQixDQUFDLENBQUMsRUFBQztBQUMvQixXQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3JFOztBQUdELE1BQUksV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtBQUM3QixXQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3BDLE1BQ0ksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDakMsV0FBTyxxQkFBcUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBQzlDLE1BQ0ksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzVCLFFBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxXQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3BDLE1BQ0k7QUFDSCxXQUFPLGdDQUFnQyxHQUFHLElBQUksQ0FBQztHQUNoRDtDQUNGOztBQUlELE9BQU8sQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLENBQUM7QUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxVQUFVLENBQUUsU0FBUyxDQUFHLENBQUMsQ0FBQztBQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFFLFVBQVUsQ0FBRSxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6InBhcnQxL290aGVyX3Bvc3NpYmlsaXRpZXMvMDEuZGF0YV90eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8q0J/QvtC70LjQvNC+0YDRhNC90LDRjyDRhNGD0L3QutGG0LjRjyovXG5cbmZ1bmN0aW9uIHNheUhpKHdobykge1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHdobykpIHtcbiAgICAvLyBmb3IgKGkgaW4gd2hvKSB7XG4gICAgLy8gICBjb25zb2xlLmxvZyBcItCf0YDQuNCy0LXRgjogXCIgKyB3aG9baV07XG4gICAgLy8gfVxuICAgIHdoby5mb3JFYWNoKHNheUhpKSAvLyDQuNC30Y/RidC90LXQtSDRgSDQv9C+0LzQvtGJ0YzRjiDRgNC10LrRg9GA0YHQuNC4XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coXCLQn9GA0LjQstC10YI6IFwiICsgd2hvKVxuICB9XG59XG5cblxuLy8g0KPRgtC40L3QsNGPINGC0LjQv9C40LfQsNGG0LjRj1xuZnVuY3Rpb24gc2F5SGkod2hvKSB7XG5cbiAgaWYgKHdoby5mb3JFYWNoKSB7IC8vZdGB0LvQuCDRgdGD0YnQtdGB0YLQstGD0LXRgiBmb3JFYWNoIC0g0L/RgNC10LTQv9C+0LvQsNCz0LDQtdC8INGH0YLQviDQtNCw0L3QvdGL0LUg0L/RgNCw0LLQuNC70YzQvdGL0LVcbiAgICB3aG8uZm9yRWFjaChzYXlIaSkgIFxuICB9ICBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhcItCf0YDQuNCy0LXRgjogXCIgKyB3aG8pXG4gIH1cbn1cblxuXG5cblxuLyrQl9Cw0LTQsNGH0LAgMTpcblxu0J3QsNC/0LjRiNC40YLQtSDRhNGD0L3QutGG0LjRjiBmb3JtYXREYXRlKGRhdGUpLCDQutC+0YLQvtGA0LDRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQtNCw0YLRgyDQsiDRhNC+0YDQvNCw0YLQtSBkZC5tbS55eS5cblxu0JXQtSDQv9C10YDQstGL0Lkg0LDRgNCz0YPQvNC10L3RgiDQtNC+0LvQttC10L0g0YHQvtC00LXRgNC20LDRgtGMINC00LDRgtGDINCyINC+0LTQvdC+0Lwg0LjQtyDQstC40LTQvtCyOlxuXG7QmtCw0Log0L7QsdGK0LXQutGCIERhdGUuXG7QmtCw0Log0YHRgtGA0L7QutGDLCDQvdCw0L/RgNC40LzQtdGAIHl5eXktbW0tZGQg0LjQu9C4INC00YDRg9Cz0YPRjiDQsiDRgdGC0LDQvdC00LDRgNGC0L3QvtC8INGE0L7RgNC80LDRgtC1INC00LDRgtGLLlxu0JrQsNC6INGH0LjRgdC70L4g0YHQtdC60YPQvdC0INGBIDAxLjAxLjE5NzAuXG7QmtCw0Log0LzQsNGB0YHQuNCyIFvQs9Cz0LPQsywg0LzQvCwg0LTQtF0sINC80LXRgdGP0YYg0L3QsNGH0LjQvdCw0LXRgtGB0Y8g0YEg0L3Rg9C70Y9cbtCU0LvRjyDRjdGC0L7Qs9C+INCy0LDQvCDQv9C+0L3QsNC00L7QsdC40YLRgdGPINC+0L/RgNC10LTQtdC70LjRgtGMINGC0LjQvyDQtNCw0L3QvdGL0YUg0LDRgNCz0YPQvNC10L3RgtCwINC4LCDQv9GA0Lgg0L3QtdC+0LHRhdC+0LTQuNC80L7RgdGC0LgsINC/0YDQtdC+0LHRgNCw0LfQvtCy0LDRgtGMINCy0YXQvtC00L3Ri9C1INC00LDQvdC90YvQtSDQsiDQvdGD0LbQvdGL0Lkg0YTQvtGA0LzQsNGCLlxuXG5cbiovXG5cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG5cbiAgZnVuY3Rpb24gaXNUeXBlRXF1YWwoZCwgdHlwZSl7XG4gICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwoZCkuc2xpY2UoOCwgLTEpID09PSB0eXBlID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFRvUHJvcGVyRm9ybWF0KGQpe1xuICAgIHJldHVybiBcIlwiICsgZC5nZXREYXkoKSArIFwiLlwiICsgZC5nZXRNb250aCgpICsgXCIuXCIgKyBkLmdldEZ1bGxZZWFyKCk7XG4gIH1cblxuXG4gIGlmIChpc1R5cGVFcXVhbChkYXRlLCBcIkRhdGVcIikpIHtcbiAgICByZXR1cm4gY29udmVydFRvUHJvcGVyRm9ybWF0KGRhdGUpO1xuICB9IFxuICBlbHNlIGlmICh0eXBlb2YgZGF0ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBjb252ZXJ0VG9Qcm9wZXJGb3JtYXQobmV3IERhdGUoZGF0ZSkpO1xuICB9XG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZSkpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZVswXSwgZGF0ZVsxXSArIDEsIGRhdGVbMl0pO1xuICAgIHJldHVybiBjb252ZXJ0VG9Qcm9wZXJGb3JtYXQoZGF0ZSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIFwiRXJyb3IhIEluY29ycmVjdCBkYXRlIGZvcm1hdDogXCIgKyBkYXRlO1xuICB9XG59XG5cblxuXG5jb25zb2xlLmxvZyggZm9ybWF0RGF0ZSggRGF0ZS5ub3coKSApKTtcbmNvbnNvbGUubG9nKCBmb3JtYXREYXRlKCAyMzQxNDMyMzQgICkpO1xuY29uc29sZS5sb2coIGZvcm1hdERhdGUoIFsxOTk5LDAsMjRdICkpO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
