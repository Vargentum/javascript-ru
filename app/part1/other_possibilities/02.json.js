"use strict";

/*Задача 1: превратить объект в json*/

var leader = {
  name: "Tom Jefferson",
  age: 35
};

var leaderJ = console.log(JSON.stringify(leader));
console.log(JSON.parse(leaderJ));

/*
Задача 2: 

Может ли это сделать прямой вызов JSON.stringify(team)? Если нет, то почему?
Какой подход вы бы предложили для чтения и восстановления таких объектов?
*/

var leader = {
  name: "Василий Иванович"
};

var soldier = {
  name: "Петька"
};

// эти объекты ссылаются друг на друга!
leader.soldier = soldier;
soldier.leader = leader;

var team = [leader, soldier];

/*Решение:

Прямой вызов JSON.stringify(team) приведет к бесконечному циклу
можно сделать проверку предотвращающую ссылку объектов друг на друга через их свойства


Дополнение: выдаст ошибку ()
Не поддерживается хранение ссылок

В таких случаях лучше всего использовать кастомные реализации JSON
(jquery, dojo...) которые поддерживают хранение ссылок

*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmpzb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLElBQUksTUFBTSxHQUFHO0FBQ1gsTUFBSSxFQUFFLGVBQWU7QUFDckIsS0FBRyxFQUFFLEVBQUU7Q0FDUixDQUFBOztBQUVELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7Ozs7O0FBQUEsQUFVaEMsSUFBSSxNQUFNLEdBQUc7QUFDWCxNQUFJLEVBQUUsa0JBQWtCO0NBQ3pCLENBQUM7O0FBRUYsSUFBSSxPQUFPLEdBQUc7QUFDWixNQUFJLEVBQUUsUUFBUTtDQUNmOzs7QUFBQyxBQUdGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3pCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUV4QixJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQUFDIiwiZmlsZSI6InBhcnQxL290aGVyX3Bvc3NpYmlsaXRpZXMvMDIuanNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8q0JfQsNC00LDRh9CwIDE6INC/0YDQtdCy0YDQsNGC0LjRgtGMINC+0LHRitC10LrRgiDQsiBqc29uKi9cbiBcbnZhciBsZWFkZXIgPSB7XG4gIG5hbWU6IFwiVG9tIEplZmZlcnNvblwiLFxuICBhZ2U6IDM1XG59XG5cbnZhciBsZWFkZXJKID0gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkobGVhZGVyKSk7XG5jb25zb2xlLmxvZyhKU09OLnBhcnNlKGxlYWRlckopKVxuXG5cbi8qXG7Ql9Cw0LTQsNGH0LAgMjogXG5cbtCc0L7QttC10YIg0LvQuCDRjdGC0L4g0YHQtNC10LvQsNGC0Ywg0L/RgNGP0LzQvtC5INCy0YvQt9C+0LIgSlNPTi5zdHJpbmdpZnkodGVhbSk/INCV0YHQu9C4INC90LXRgiwg0YLQviDQv9C+0YfQtdC80YM/XG7QmtCw0LrQvtC5INC/0L7QtNGF0L7QtCDQstGLINCx0Ysg0L/RgNC10LTQu9C+0LbQuNC70Lgg0LTQu9GPINGH0YLQtdC90LjRjyDQuCDQstC+0YHRgdGC0LDQvdC+0LLQu9C10L3QuNGPINGC0LDQutC40YUg0L7QsdGK0LXQutGC0L7Qsj9cbiovXG5cbnZhciBsZWFkZXIgPSB7XG4gIG5hbWU6IFwi0JLQsNGB0LjQu9C40Lkg0JjQstCw0L3QvtCy0LjRh1wiXG59O1xuXG52YXIgc29sZGllciA9IHtcbiAgbmFtZTogXCLQn9C10YLRjNC60LBcIlxufTtcblxuLy8g0Y3RgtC4INC+0LHRitC10LrRgtGLINGB0YHRi9C70LDRjtGC0YHRjyDQtNGA0YPQsyDQvdCwINC00YDRg9Cz0LAhXG5sZWFkZXIuc29sZGllciA9IHNvbGRpZXI7XG5zb2xkaWVyLmxlYWRlciA9IGxlYWRlcjtcblxudmFyIHRlYW0gPSBbbGVhZGVyLCBzb2xkaWVyXTtcblxuXG4vKtCg0LXRiNC10L3QuNC1OlxuXG7Qn9GA0Y/QvNC+0Lkg0LLRi9C30L7QsiBKU09OLnN0cmluZ2lmeSh0ZWFtKSDQv9GA0LjQstC10LTQtdGCINC6INCx0LXRgdC60L7QvdC10YfQvdC+0LzRgyDRhtC40LrQu9GDXG7QvNC+0LbQvdC+INGB0LTQtdC70LDRgtGMINC/0YDQvtCy0LXRgNC60YMg0L/RgNC10LTQvtGC0LLRgNCw0YnQsNGO0YnRg9GOINGB0YHRi9C70LrRgyDQvtCx0YrQtdC60YLQvtCyINC00YDRg9CzINC90LAg0LTRgNGD0LPQsCDRh9C10YDQtdC3INC40YUg0YHQstC+0LnRgdGC0LLQsFxuXG5cbtCU0L7Qv9C+0LvQvdC10L3QuNC1OiDQstGL0LTQsNGB0YIg0L7RiNC40LHQutGDICgpXG7QndC1INC/0L7QtNC00LXRgNC20LjQstCw0LXRgtGB0Y8g0YXRgNCw0L3QtdC90LjQtSDRgdGB0YvQu9C+0Lpcblxu0JIg0YLQsNC60LjRhSDRgdC70YPRh9Cw0Y/RhSDQu9GD0YfRiNC1INCy0YHQtdCz0L4g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC60LDRgdGC0L7QvNC90YvQtSDRgNC10LDQu9C40LfQsNGG0LjQuCBKU09OXG4oanF1ZXJ5LCBkb2pvLi4uKSDQutC+0YLQvtGA0YvQtSDQv9C+0LTQtNC10YDQttC40LLQsNGO0YIg0YXRgNCw0L3QtdC90LjQtSDRgdGB0YvQu9C+0LpcblxuKi8iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
