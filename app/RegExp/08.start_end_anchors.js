"use strict";

/*

^ Anchor checks if occurrecne in regexp begin from the start of the string
$ - checks if O ends from end of the string

both Anchors used when you need to validate something (example2)
*/

function example1() {
  var str = "100500 попугаев съели бананов 500100";
  var regStart = /^\d+/g;
  var regEnd = /\d+$/g;

  console.log(str.match(regStart)); //100500
  console.log(str.match(regEnd)); //500100
}
// example1()

function example2() {
  var reg = /\d+\.\d+/g;
  var regStrict = /^\d+\.\d+$/g;

  var str1 = "4.23";
  var str2 = "1.35 invalid input 42.241";

  console.log(str1.match(reg));
  console.log(str1.match(regStrict));

  console.log(str2.match(reg));
  console.log(str2.match(regStrict));
}
// example2()

/*
Предложите строку, которая подойдёт под регулярное выражение ^$.
Ответ: пустая строка
*/
function task1() {
  console.log("".match(/^$/g));
}
// task1()

/*
MAC-адрес сетевого интерфейса состоит из шести двузначиных шестандцатиричных чисел, разделённых двоеточием.
Например: '01:32:54:67:89:AB'.
Напишите регулярное выражение, которое по строке проверяет, является ли она корректным MAC-адресом.
*/
function task2() {
  var regIncorrect = /^(([0-9a-f]{2}):){5}\2$/ig; //can't understand why \2 not match 2 capturing group!!
  var reg = /^([0-9a-f]{2}:){5}[0-9a-f]{2}/ig;
  var str1 = '01:32:54:67:89:AB';
  var str2 = '01:32:54:67:89:AF:';
  var str3 = '0132:54:67:89:AB';

  console.log(str1.match(reg)); //found
  console.log(str2.match(reg)); //null
  console.log(str3.match(reg)); //null
}
// task2()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjA4LnN0YXJ0X2VuZF9hbmNob3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFTQSxTQUFTLFFBQVEsR0FBSTtBQUNuQixNQUFJLEdBQUcsR0FBRyxzQ0FBc0MsQ0FBQTtBQUNoRCxNQUFJLFFBQVEsR0FBRyxPQUFPLENBQUE7QUFDdEIsTUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFBOztBQUVwQixTQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFBQSxBQUNoQyxTQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFBQSxDQUMvQjs7O0FBQUEsQUFJRCxTQUFTLFFBQVEsR0FBSTtBQUNuQixNQUFJLEdBQUcsR0FBRyxXQUFXLENBQUE7QUFDckIsTUFBSSxTQUFTLEdBQUcsYUFBYSxDQUFBOztBQUU3QixNQUFJLElBQUksR0FBRyxNQUFNLENBQUE7QUFDakIsTUFBSSxJQUFJLEdBQUcsMkJBQTJCLENBQUE7O0FBRXRDLFNBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFNBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOztBQUVuQyxTQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3QixTQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztDQUNwQzs7Ozs7OztBQUFBLEFBVUQsU0FBUyxLQUFLLEdBQUk7QUFDaEIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7Q0FDN0I7Ozs7Ozs7O0FBQUEsQUFVRCxTQUFTLEtBQUssR0FBSTtBQUNoQixNQUFJLFlBQVksR0FBRywyQkFBMkI7QUFBQSxBQUM5QyxNQUFJLEdBQUcsR0FBRyxpQ0FBaUMsQ0FBQTtBQUMzQyxNQUFJLElBQUksR0FBRyxtQkFBbUIsQ0FBQTtBQUM5QixNQUFJLElBQUksR0FBRyxvQkFBb0IsQ0FBQTtBQUMvQixNQUFJLElBQUksR0FBRyxrQkFBa0IsQ0FBQTs7QUFFN0IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUEsQUFDNUIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUEsQUFDNUIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUEsQ0FDN0I7O0FBQUEiLCJmaWxlIjoiUmVnRXhwLzA4LnN0YXJ0X2VuZF9hbmNob3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuXiBBbmNob3IgY2hlY2tzIGlmIG9jY3VycmVjbmUgaW4gcmVnZXhwIGJlZ2luIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmdcbiQgLSBjaGVja3MgaWYgTyBlbmRzIGZyb20gZW5kIG9mIHRoZSBzdHJpbmdcblxuYm90aCBBbmNob3JzIHVzZWQgd2hlbiB5b3UgbmVlZCB0byB2YWxpZGF0ZSBzb21ldGhpbmcgKGV4YW1wbGUyKVxuKi9cblxuXG5mdW5jdGlvbiBleGFtcGxlMSAoKSB7XG4gIGxldCBzdHIgPSBcIjEwMDUwMCDQv9C+0L/Rg9Cz0LDQtdCyINGB0YrQtdC70Lgg0LHQsNC90LDQvdC+0LIgNTAwMTAwXCJcbiAgbGV0IHJlZ1N0YXJ0ID0gL15cXGQrL2dcbiAgbGV0IHJlZ0VuZCA9IC9cXGQrJC9nXG5cbiAgY29uc29sZS5sb2coc3RyLm1hdGNoKHJlZ1N0YXJ0KSkgLy8xMDA1MDBcbiAgY29uc29sZS5sb2coc3RyLm1hdGNoKHJlZ0VuZCkpICAgLy81MDAxMDBcbn1cbi8vIGV4YW1wbGUxKClcblxuXG5mdW5jdGlvbiBleGFtcGxlMiAoKSB7XG4gIGxldCByZWcgPSAvXFxkK1xcLlxcZCsvZ1xuICBsZXQgcmVnU3RyaWN0ID0gL15cXGQrXFwuXFxkKyQvZ1xuXG4gIGxldCBzdHIxID0gXCI0LjIzXCJcbiAgbGV0IHN0cjIgPSBcIjEuMzUgaW52YWxpZCBpbnB1dCA0Mi4yNDFcIlxuXG4gIGNvbnNvbGUubG9nKHN0cjEubWF0Y2gocmVnKSk7XG4gIGNvbnNvbGUubG9nKHN0cjEubWF0Y2gocmVnU3RyaWN0KSk7XG5cbiAgY29uc29sZS5sb2coc3RyMi5tYXRjaChyZWcpKTtcbiAgY29uc29sZS5sb2coc3RyMi5tYXRjaChyZWdTdHJpY3QpKTtcbn1cbi8vIGV4YW1wbGUyKClcblxuXG5cblxuLypcbtCf0YDQtdC00LvQvtC20LjRgtC1INGB0YLRgNC+0LrRgywg0LrQvtGC0L7RgNCw0Y8g0L/QvtC00L7QudC00ZHRgiDQv9C+0LQg0YDQtdCz0YPQu9GP0YDQvdC+0LUg0LLRi9GA0LDQttC10L3QuNC1IF4kLlxu0J7RgtCy0LXRgjog0L/Rg9GB0YLQsNGPINGB0YLRgNC+0LrQsFxuKi9cbmZ1bmN0aW9uIHRhc2sxICgpIHtcbiAgY29uc29sZS5sb2coXCJcIi5tYXRjaCgvXiQvZykpXG59XG4vLyB0YXNrMSgpXG5cblxuXG4vKlxuTUFDLdCw0LTRgNC10YEg0YHQtdGC0LXQstC+0LPQviDQuNC90YLQtdGA0YTQtdC50YHQsCDRgdC+0YHRgtC+0LjRgiDQuNC3INGI0LXRgdGC0Lgg0LTQstGD0LfQvdCw0YfQuNC90YvRhSDRiNC10YHRgtCw0L3QtNGG0LDRgtC40YDQuNGH0L3Ri9GFINGH0LjRgdC10LssINGA0LDQt9C00LXQu9GR0L3QvdGL0YUg0LTQstC+0LXRgtC+0YfQuNC10LwuXG7QndCw0L/RgNC40LzQtdGAOiAnMDE6MzI6NTQ6Njc6ODk6QUInLlxu0J3QsNC/0LjRiNC40YLQtSDRgNC10LPRg9C70Y/RgNC90L7QtSDQstGL0YDQsNC20LXQvdC40LUsINC60L7RgtC+0YDQvtC1INC/0L4g0YHRgtGA0L7QutC1INC/0YDQvtCy0LXRgNGP0LXRgiwg0Y/QstC70Y/QtdGC0YHRjyDQu9C4INC+0L3QsCDQutC+0YDRgNC10LrRgtC90YvQvCBNQUMt0LDQtNGA0LXRgdC+0LwuXG4qL1xuZnVuY3Rpb24gdGFzazIgKCkge1xuICBsZXQgcmVnSW5jb3JyZWN0ID0gL14oKFswLTlhLWZdezJ9KTopezV9XFwyJC9pZyAvL2Nhbid0IHVuZGVyc3RhbmQgd2h5IFxcMiBub3QgbWF0Y2ggMiBjYXB0dXJpbmcgZ3JvdXAhIVxuICBsZXQgcmVnID0gL14oWzAtOWEtZl17Mn06KXs1fVswLTlhLWZdezJ9L2lnXG4gIGxldCBzdHIxID0gJzAxOjMyOjU0OjY3Ojg5OkFCJ1xuICBsZXQgc3RyMiA9ICcwMTozMjo1NDo2Nzo4OTpBRjonXG4gIGxldCBzdHIzID0gJzAxMzI6NTQ6Njc6ODk6QUInXG5cbiAgY29uc29sZS5sb2coc3RyMS5tYXRjaChyZWcpKSAvL2ZvdW5kXG4gIGNvbnNvbGUubG9nKHN0cjIubWF0Y2gocmVnKSkgLy9udWxsXG4gIGNvbnNvbGUubG9nKHN0cjMubWF0Y2gocmVnKSkgLy9udWxsXG59XG4vLyB0YXNrMigpXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
