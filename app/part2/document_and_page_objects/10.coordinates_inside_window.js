'use strict';

/*

  elem.getBoundingClientRect()
  
    return object, containg 
      top
      left
      right
      bottom 
    coordinates of `elem`


  document.elemFromPoint(x, y)

    return element that holding x, y points
    how about two elements? if overlapping
*/

/* Task 1
find 
  outer top-left corner
  outer bottom-right corner
  inner top-left corner
  inner bottom-right corner
*/

function task1() {
  var field = document.getElementById('scrolled');
  var stringify = function stringify(x, y) {
    return x + ', ' + y;
  };
  var fieldRect = field.getBoundingClientRect();
  var getStyleVal = function getStyleVal(elem, prop) {
    return parseInt(getComputedStyle(field)[prop]);
  };

  var topLeftOuter = stringify(fieldRect.left, fieldRect.top);
  var bottomRightOuter = stringify(fieldRect.right, fieldRect.bottom);
  var topLeftInner = stringify(fieldRect.left + field.clientLeft, fieldRect.top + field.clientTop);
  var bottomRightInner = stringify(fieldRect.right - getStyleVal(field, 'borderRightWidth'), fieldRect.bottom - getStyleVal(field, 'borderBottomWidth'));

  console.log(topLeftOuter);
  console.log(topLeftInner);
  console.log(bottomRightOuter);
  console.log(bottomRightInner);
}
// task1()

/*Task 2

Создайте функцию positionAt(anchor, position, elem),
которая позиционирует элемент elem, в зависимости от position,
сверху ("top"), справа ("right") или снизу ("bottom") от элемента anchor.

Используйте её, чтобы сделать функцию showNote(anchor, position, html),
которая показывает элемент с классом note и текстом html
на позиции position рядом с элементом anchor.


Enlightment: 
  use TOP / LEFT properties when set up positioning of FIXED element
    and use top/left/right/bottom of `anchor` to get coords


*/

function task2() {
  var positionAt = function positionAt(anchor, position, elem) {
    elem.style.position = 'fixed';
    switch (position) {
      case 'top':
        elem.style.top = anchor.getBoundingClientRect().top - elem.offsetHeight + 'px';
        elem.style.left = anchor.getBoundingClientRect().left + 'px';
        break;
      case 'left':
        elem.style.left = anchor.getBoundingClientRect().left - elem.offsetWidth + 'px';
        elem.style.top = anchor.getBoundingClientRect().top + 'px';
        break;
      case 'bottom':
        elem.style.top = anchor.getBoundingClientRect().bottom + 'px';
        elem.style.left = anchor.getBoundingClientRect().left + 'px';
        break;
      case 'right':
        elem.style.left = anchor.getBoundingClientRect().right + 'px';
        elem.style.top = anchor.getBoundingClientRect().top + 'px';
        break;
    }
  };

  var showNote = function showNote(anchor, position, html) {
    var note = document.createElement('div');
    note.className = 'note';
    note.innerHTML = html;
    document.body.appendChild(note);
    positionAt(anchor, position, note);
  };

  ['top', 'right', 'bottom', 'left'].map(function (dir) {
    showNote(scrolled, dir, 'Hello note at ' + dir + ' !');
  });
}
task2();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjEwLmNvb3JkaW5hdGVzX2luc2lkZV93aW5kb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQSxTQUFTLEtBQUssR0FBSTtBQUNoQixNQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQy9DLE1BQUksU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFJLENBQUMsRUFBRSxDQUFDO1dBQVEsQ0FBQyxVQUFLLENBQUM7R0FBRSxDQUFBO0FBQ3RDLE1BQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO0FBQzdDLE1BQUksV0FBVyxHQUFHLFNBQWQsV0FBVyxDQUFJLElBQUksRUFBRSxJQUFJO1dBQUssUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQUEsQ0FBQTs7QUFFekUsTUFBSSxZQUFZLEdBQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9ELE1BQUksZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ25FLE1BQUksWUFBWSxHQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQ2pDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ2pFLE1BQUksZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxFQUN4RCxTQUFTLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFBOztBQUU1RixTQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3pCLFNBQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDekIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQzdCLFNBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtDQUM5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsQUF3QkQsU0FBUyxLQUFLLEdBQUk7QUFDaEIsTUFBSSxVQUFVLEdBQUcsU0FBYixVQUFVLENBQUksTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUs7QUFDM0MsUUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO0FBQzdCLFlBQU8sUUFBUTtBQUNiLFdBQUssS0FBSztBQUNSLFlBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQTtBQUM5RSxZQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO0FBQzVELGNBQUs7QUFBQSxBQUNQLFdBQUssTUFBTTtBQUNULFlBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUMvRSxZQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFBO0FBQzFELGNBQUs7QUFBQSxBQUNQLFdBQUssUUFBUTtBQUNYLFlBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDN0QsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtBQUM1RCxjQUFLO0FBQUEsQUFDUCxXQUFLLE9BQU87QUFDVixZQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO0FBQzdELFlBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUE7QUFDMUQsY0FBSztBQUFBLEtBQ1I7R0FDRixDQUFBOztBQUVELE1BQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFJLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFLO0FBQ3pDLFFBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDeEMsUUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUE7QUFDdkIsUUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7QUFDckIsWUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDL0IsY0FBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7R0FDbkMsQ0FBQTs7QUFFRCxHQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsRUFBSTtBQUM1QyxZQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcscUJBQW1CLEdBQUcsUUFBSyxDQUFBO0dBQ2xELENBQUMsQ0FBQTtDQUVIO0FBQ0QsS0FBSyxFQUFFLENBQUEiLCJmaWxlIjoicGFydDIvZG9jdW1lbnRfYW5kX3BhZ2Vfb2JqZWN0cy8xMC5jb29yZGluYXRlc19pbnNpZGVfd2luZG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIFxuICAgIHJldHVybiBvYmplY3QsIGNvbnRhaW5nIFxuICAgICAgdG9wXG4gICAgICBsZWZ0XG4gICAgICByaWdodFxuICAgICAgYm90dG9tIFxuICAgIGNvb3JkaW5hdGVzIG9mIGBlbGVtYFxuXG5cbiAgZG9jdW1lbnQuZWxlbUZyb21Qb2ludCh4LCB5KVxuXG4gICAgcmV0dXJuIGVsZW1lbnQgdGhhdCBob2xkaW5nIHgsIHkgcG9pbnRzXG4gICAgaG93IGFib3V0IHR3byBlbGVtZW50cz8gaWYgb3ZlcmxhcHBpbmdcbiovXG5cblxuXG4vKiBUYXNrIDFcbmZpbmQgXG4gIG91dGVyIHRvcC1sZWZ0IGNvcm5lclxuICBvdXRlciBib3R0b20tcmlnaHQgY29ybmVyXG4gIGlubmVyIHRvcC1sZWZ0IGNvcm5lclxuICBpbm5lciBib3R0b20tcmlnaHQgY29ybmVyXG4qL1xuXG5mdW5jdGlvbiB0YXNrMSAoKSB7XG4gIGxldCBmaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY3JvbGxlZCcpXG4gIGxldCBzdHJpbmdpZnkgPSAoeCwgeSkgPT4gYCR7eH0sICR7eX1gXG4gIGxldCBmaWVsZFJlY3QgPSBmaWVsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBsZXQgZ2V0U3R5bGVWYWwgPSAoZWxlbSwgcHJvcCkgPT4gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShmaWVsZClbcHJvcF0pXG4gIFxuICBsZXQgdG9wTGVmdE91dGVyID0gICAgIHN0cmluZ2lmeShmaWVsZFJlY3QubGVmdCwgZmllbGRSZWN0LnRvcClcbiAgbGV0IGJvdHRvbVJpZ2h0T3V0ZXIgPSBzdHJpbmdpZnkoZmllbGRSZWN0LnJpZ2h0LCBmaWVsZFJlY3QuYm90dG9tKVxuICBsZXQgdG9wTGVmdElubmVyID0gICAgIHN0cmluZ2lmeShmaWVsZFJlY3QubGVmdCArIGZpZWxkLmNsaWVudExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsZmllbGRSZWN0LnRvcCArIGZpZWxkLmNsaWVudFRvcClcbiAgbGV0IGJvdHRvbVJpZ2h0SW5uZXIgPSBzdHJpbmdpZnkoZmllbGRSZWN0LnJpZ2h0IC0gZ2V0U3R5bGVWYWwoZmllbGQsICdib3JkZXJSaWdodFdpZHRoJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsZmllbGRSZWN0LmJvdHRvbSAtIGdldFN0eWxlVmFsKGZpZWxkLCAnYm9yZGVyQm90dG9tV2lkdGgnKSlcblxuICBjb25zb2xlLmxvZyh0b3BMZWZ0T3V0ZXIpIFxuICBjb25zb2xlLmxvZyh0b3BMZWZ0SW5uZXIpIFxuICBjb25zb2xlLmxvZyhib3R0b21SaWdodE91dGVyKSBcbiAgY29uc29sZS5sb2coYm90dG9tUmlnaHRJbm5lcikgXG59XG4vLyB0YXNrMSgpXG5cblxuXG5cbi8qVGFzayAyXG5cbtCh0L7Qt9C00LDQudGC0LUg0YTRg9C90LrRhtC40Y4gcG9zaXRpb25BdChhbmNob3IsIHBvc2l0aW9uLCBlbGVtKSxcbtC60L7RgtC+0YDQsNGPINC/0L7Qt9C40YbQuNC+0L3QuNGA0YPQtdGCINGN0LvQtdC80LXQvdGCIGVsZW0sINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiBwb3NpdGlvbixcbtGB0LLQtdGA0YXRgyAoXCJ0b3BcIiksINGB0L/RgNCw0LLQsCAoXCJyaWdodFwiKSDQuNC70Lgg0YHQvdC40LfRgyAoXCJib3R0b21cIikg0L7RgiDRjdC70LXQvNC10L3RgtCwIGFuY2hvci5cblxu0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtdGRLCDRh9GC0L7QsdGLINGB0LTQtdC70LDRgtGMINGE0YPQvdC60YbQuNGOIHNob3dOb3RlKGFuY2hvciwgcG9zaXRpb24sIGh0bWwpLFxu0LrQvtGC0L7RgNCw0Y8g0L/QvtC60LDQt9GL0LLQsNC10YIg0Y3Qu9C10LzQtdC90YIg0YEg0LrQu9Cw0YHRgdC+0Lwgbm90ZSDQuCDRgtC10LrRgdGC0L7QvCBodG1sXG7QvdCwINC/0L7Qt9C40YbQuNC4IHBvc2l0aW9uINGA0Y/QtNC+0Lwg0YEg0Y3Qu9C10LzQtdC90YLQvtC8IGFuY2hvci5cblxuXG5FbmxpZ2h0bWVudDogXG4gIHVzZSBUT1AgLyBMRUZUIHByb3BlcnRpZXMgd2hlbiBzZXQgdXAgcG9zaXRpb25pbmcgb2YgRklYRUQgZWxlbWVudFxuICAgIGFuZCB1c2UgdG9wL2xlZnQvcmlnaHQvYm90dG9tIG9mIGBhbmNob3JgIHRvIGdldCBjb29yZHNcblxuXG4qL1xuXG5mdW5jdGlvbiB0YXNrMiAoKSB7XG4gIGxldCBwb3NpdGlvbkF0ID0gKGFuY2hvciwgcG9zaXRpb24sIGVsZW0pID0+IHtcbiAgICBlbGVtLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIHN3aXRjaChwb3NpdGlvbil7XG4gICAgICBjYXNlICd0b3AnOlxuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSBlbGVtLm9mZnNldEhlaWdodCArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBlbGVtLm9mZnNldFdpZHRoICsgJ3B4J1xuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBlbGVtLnN0eWxlLmxlZnQgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUudG9wID0gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArICdweCdcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBsZXQgc2hvd05vdGUgPSAoYW5jaG9yLCBwb3NpdGlvbiwgaHRtbCkgPT4ge1xuICAgIGxldCBub3RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBub3RlLmNsYXNzTmFtZSA9ICdub3RlJ1xuICAgIG5vdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm90ZSlcbiAgICBwb3NpdGlvbkF0KGFuY2hvciwgcG9zaXRpb24sIG5vdGUpXG4gIH1cblxuICBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLm1hcChkaXIgPT4ge1xuICAgIHNob3dOb3RlKHNjcm9sbGVkLCBkaXIsIGBIZWxsbyBub3RlIGF0ICR7ZGlyfSAhYClcbiAgfSlcblxufVxudGFzazIoKSAiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
