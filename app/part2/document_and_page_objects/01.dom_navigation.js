'use strict';

/*
<!DOCTYPE HTML>
<html>

<head>
  <meta charset="utf-8">
</head>

<body>
  <div>Пользователи:</div>
  <ul>
    <li>Маша</li>
    <li>Вовочка</li>
  </ul>

  <!-- комментарий -->

  <script>
    // ... ваш код
  </script>

</body>

</html>


Напишите код, который получит элемент HEAD.
Напишите код, который получит UL.
Напишите код, который получит второй LI. Будет ли ваш код работать в IE8-, если комментарий переместить между элементами LI?

нет: так как в IE8- children содержит узлы комментариев
*/

function task1() {
  var head = document.head;
  var list = document.body.children[1];
  var li = list.children[1];
}

/*
  Tip: head = document.documentElement.firstChild
*/

/*
Придумайте самый короткий код для проверки, пуст ли элемент elem.
«Пустой» — значит нет дочерних узлов, даже текстовых.
*/
function isElementEmpty(element) {
  return !element.childNodes.length;
}

/*
  Tip: .hasChildNodes() method is available. Do the same
*/

/*
Если elem — это произвольный узел DOM…

Верно ли, что elem.lastChild.nextSibling всегда null? 
Да, потому что .lastChild это гарантированно последний узел (в отличии от lastElementChild)

Верно ли, что elem.children[0].previousSibling всегда null ?
Нет, потому что children хранит только Элементы, а перед ним может быть текстовый узел.

Tip: если .lastChild/.children null, то будет ошибка
*/

/*
Напишите код, который выделит все ячейки в таблице по диагонали.

Вам нужно будет получить из таблицы table все диагональные td и выделить их, используя код:
*/
function hLeftDiagonalCells(table) {
  for (var i = 0; i < table.rows.length; i++) {
    var diagCell = table.rows[i].cells[i];
    diagCell.style.backgroundColor = 'red';
  };
}

function hBothDiagonalCells(table) {
  for (var i = 0; i < table.rows.length; i++) {
    var diagCellLeft = table.rows[i].cells[i];
    var diagCellRight = table.rows[i].cells[table.rows.length - i - 1];
    [diagCellLeft, diagCellRight].forEach(function (i) {
      return i.style.backgroundColor = 'red';
    });
  };
}

// hLeftDiagonalCells(document.body.children[1])
hBothDiagonalCells(document.body.children[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxLmRvbV9uYXZpZ2F0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBLFNBQVMsS0FBSyxHQUFJO0FBQ2hCLE1BQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUE7QUFDeEIsTUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDcEMsTUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtDQUMxQjs7Ozs7Ozs7OztBQUFBLEFBWUQsU0FBUyxjQUFjLENBQUUsT0FBTyxFQUFFO0FBQ2hDLFNBQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQTtDQUNsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQTBCRCxTQUFTLGtCQUFrQixDQUFFLEtBQUssRUFBRTtBQUNsQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUMsUUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEMsWUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFBO0dBQ3ZDLENBQUM7Q0FDSDs7QUFFRCxTQUFTLGtCQUFrQixDQUFFLEtBQUssRUFBRTtBQUNsQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUMsUUFBSSxZQUFZLEdBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0MsUUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ25FLEtBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7YUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLO0tBQUEsQ0FBQyxDQUFBO0dBQzVFLENBQUM7Q0FDSDs7O0FBQUEsQUFHRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBIiwiZmlsZSI6InBhcnQyL2RvY3VtZW50X2FuZF9wYWdlX29iamVjdHMvMDEuZG9tX25hdmlnYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuPCFET0NUWVBFIEhUTUw+XG48aHRtbD5cblxuPGhlYWQ+XG4gIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxuPC9oZWFkPlxuXG48Ym9keT5cbiAgPGRpdj7Qn9C+0LvRjNC30L7QstCw0YLQtdC70Lg6PC9kaXY+XG4gIDx1bD5cbiAgICA8bGk+0JzQsNGI0LA8L2xpPlxuICAgIDxsaT7QktC+0LLQvtGH0LrQsDwvbGk+XG4gIDwvdWw+XG5cbiAgPCEtLSDQutC+0LzQvNC10L3RgtCw0YDQuNC5IC0tPlxuXG4gIDxzY3JpcHQ+XG4gICAgLy8gLi4uINCy0LDRiCDQutC+0LRcbiAgPC9zY3JpcHQ+XG5cbjwvYm9keT5cblxuPC9odG1sPlxuXG5cbtCd0LDQv9C40YjQuNGC0LUg0LrQvtC0LCDQutC+0YLQvtGA0YvQuSDQv9C+0LvRg9GH0LjRgiDRjdC70LXQvNC10L3RgiBIRUFELlxu0J3QsNC/0LjRiNC40YLQtSDQutC+0LQsINC60L7RgtC+0YDRi9C5INC/0L7Qu9GD0YfQuNGCIFVMLlxu0J3QsNC/0LjRiNC40YLQtSDQutC+0LQsINC60L7RgtC+0YDRi9C5INC/0L7Qu9GD0YfQuNGCINCy0YLQvtGA0L7QuSBMSS4g0JHRg9C00LXRgiDQu9C4INCy0LDRiCDQutC+0LQg0YDQsNCx0L7RgtCw0YLRjCDQsiBJRTgtLCDQtdGB0LvQuCDQutC+0LzQvNC10L3RgtCw0YDQuNC5INC/0LXRgNC10LzQtdGB0YLQuNGC0Ywg0LzQtdC20LTRgyDRjdC70LXQvNC10L3RgtCw0LzQuCBMST9cblxu0L3QtdGCOiDRgtCw0Log0LrQsNC6INCyIElFOC0gY2hpbGRyZW4g0YHQvtC00LXRgNC20LjRgiDRg9C30LvRiyDQutC+0LzQvNC10L3RgtCw0YDQuNC10LJcbiovXG5cbmZ1bmN0aW9uIHRhc2sxICgpIHtcbiAgbGV0IGhlYWQgPSBkb2N1bWVudC5oZWFkXG4gIGxldCBsaXN0ID0gZG9jdW1lbnQuYm9keS5jaGlsZHJlblsxXVxuICBsZXQgbGkgPSBsaXN0LmNoaWxkcmVuWzFdXG59XG5cbi8qXG4gIFRpcDogaGVhZCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5maXJzdENoaWxkXG4qL1xuXG5cblxuLypcbtCf0YDQuNC00YPQvNCw0LnRgtC1INGB0LDQvNGL0Lkg0LrQvtGA0L7RgtC60LjQuSDQutC+0LQg0LTQu9GPINC/0YDQvtCy0LXRgNC60LgsINC/0YPRgdGCINC70Lgg0Y3Qu9C10LzQtdC90YIgZWxlbS5cbsKr0J/Rg9GB0YLQvtC5wrsg4oCUINC30L3QsNGH0LjRgiDQvdC10YIg0LTQvtGH0LXRgNC90LjRhSDRg9C30LvQvtCyLCDQtNCw0LbQtSDRgtC10LrRgdGC0L7QstGL0YUuXG4qL1xuZnVuY3Rpb24gaXNFbGVtZW50RW1wdHkgKGVsZW1lbnQpIHtcbiAgcmV0dXJuICFlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoXG59XG5cbi8qXG4gIFRpcDogLmhhc0NoaWxkTm9kZXMoKSBtZXRob2QgaXMgYXZhaWxhYmxlLiBEbyB0aGUgc2FtZVxuKi9cblxuXG4vKlxu0JXRgdC70LggZWxlbSDigJQg0Y3RgtC+INC/0YDQvtC40LfQstC+0LvRjNC90YvQuSDRg9C30LXQuyBET03igKZcblxu0JLQtdGA0L3QviDQu9C4LCDRh9GC0L4gZWxlbS5sYXN0Q2hpbGQubmV4dFNpYmxpbmcg0LLRgdC10LPQtNCwIG51bGw/IFxu0JTQsCwg0L/QvtGC0L7QvNGDINGH0YLQviAubGFzdENoaWxkINGN0YLQviDQs9Cw0YDQsNC90YLQuNGA0L7QstCw0L3QvdC+INC/0L7RgdC70LXQtNC90LjQuSDRg9C30LXQuyAo0LIg0L7RgtC70LjRh9C40Lgg0L7RgiBsYXN0RWxlbWVudENoaWxkKVxuXG7QktC10YDQvdC+INC70LgsINGH0YLQviBlbGVtLmNoaWxkcmVuWzBdLnByZXZpb3VzU2libGluZyDQstGB0LXQs9C00LAgbnVsbCA/XG7QndC10YIsINC/0L7RgtC+0LzRgyDRh9GC0L4gY2hpbGRyZW4g0YXRgNCw0L3QuNGCINGC0L7Qu9GM0LrQviDQrdC70LXQvNC10L3RgtGLLCDQsCDQv9C10YDQtdC0INC90LjQvCDQvNC+0LbQtdGCINCx0YvRgtGMINGC0LXQutGB0YLQvtCy0YvQuSDRg9C30LXQuy5cblxuVGlwOiDQtdGB0LvQuCAubGFzdENoaWxkLy5jaGlsZHJlbiBudWxsLCDRgtC+INCx0YPQtNC10YIg0L7RiNC40LHQutCwXG4qL1xuXG5cblxuLypcbtCd0LDQv9C40YjQuNGC0LUg0LrQvtC0LCDQutC+0YLQvtGA0YvQuSDQstGL0LTQtdC70LjRgiDQstGB0LUg0Y/Rh9C10LnQutC4INCyINGC0LDQsdC70LjRhtC1INC/0L4g0LTQuNCw0LPQvtC90LDQu9C4LlxuXG7QktCw0Lwg0L3Rg9C20L3QviDQsdGD0LTQtdGCINC/0L7Qu9GD0YfQuNGC0Ywg0LjQtyDRgtCw0LHQu9C40YbRiyB0YWJsZSDQstGB0LUg0LTQuNCw0LPQvtC90LDQu9GM0L3Ri9C1IHRkINC4INCy0YvQtNC10LvQuNGC0Ywg0LjRhSwg0LjRgdC/0L7Qu9GM0LfRg9GPINC60L7QtDpcbiovXG5mdW5jdGlvbiBoTGVmdERpYWdvbmFsQ2VsbHMgKHRhYmxlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGUucm93cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBkaWFnQ2VsbCA9IHRhYmxlLnJvd3NbaV0uY2VsbHNbaV07XG4gICAgZGlhZ0NlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JlZCdcbiAgfTtcbn1cblxuZnVuY3Rpb24gaEJvdGhEaWFnb25hbENlbGxzICh0YWJsZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZGlhZ0NlbGxMZWZ0ICA9IHRhYmxlLnJvd3NbaV0uY2VsbHNbaV07XG4gICAgbGV0IGRpYWdDZWxsUmlnaHQgPSB0YWJsZS5yb3dzW2ldLmNlbGxzW3RhYmxlLnJvd3MubGVuZ3RoIC0gaSAtIDFdO1xuICAgIFtkaWFnQ2VsbExlZnQsIGRpYWdDZWxsUmlnaHRdLmZvckVhY2goaSA9PiBpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZWQnKVxuICB9O1xufVxuXG4vLyBoTGVmdERpYWdvbmFsQ2VsbHMoZG9jdW1lbnQuYm9keS5jaGlsZHJlblsxXSlcbmhCb3RoRGlhZ29uYWxDZWxscyhkb2N1bWVudC5ib2R5LmNoaWxkcmVuWzFdKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
