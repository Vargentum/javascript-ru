'use strict';

/*Coords relative to VISIBLE WINDOW
  similar to `position fixed`

  clientX, clientY

  elem.getBoundingClientRect()
  
    return object, containg 
      top
      left
      right
      bottom 
    coordinates of `elem`


  document.elemFromPoint(x, y)

    return element that holding x, y points
    how about two elements? if overlapping
*/

/*Coords relative to WHOLE PAGE
  similar to `position absolute in body`

  add position inside window to current scroll position

  pageX = clientX + pageXOffsest (or scrollLeft)
  pageY = clientY + pageYOffsest (or scrollTop)

*/

/* Task 1
find 
  outer top-left corner
  outer bottom-right corner
  inner top-left corner
  inner bottom-right corner
*/

function task1() {
  var field = document.getElementById('scrolled');
  var stringify = function stringify(x, y) {
    return x + ', ' + y;
  };
  var fieldRect = field.getBoundingClientRect();
  var getStyleVal = function getStyleVal(elem, prop) {
    return parseInt(getComputedStyle(field)[prop]);
  };

  var topLeftOuter = stringify(fieldRect.left, fieldRect.top);
  var bottomRightOuter = stringify(fieldRect.right, fieldRect.bottom);
  var topLeftInner = stringify(fieldRect.left + field.clientLeft, fieldRect.top + field.clientTop);
  var bottomRightInner = stringify(fieldRect.right - getStyleVal(field, 'borderRightWidth'), fieldRect.bottom - getStyleVal(field, 'borderBottomWidth'));

  console.log(topLeftOuter);
  console.log(topLeftInner);
  console.log(bottomRightOuter);
  console.log(bottomRightInner);
}
// task1()

/*Task 2

Создайте функцию positionAt(anchor, position, elem),
которая позиционирует элемент elem, в зависимости от position,
сверху ("top"), справа ("right") или снизу ("bottom") от элемента anchor.

Используйте её, чтобы сделать функцию showNote(anchor, position, html),
которая показывает элемент с классом note и текстом html
на позиции position рядом с элементом anchor.


Enlightment: 
  use TOP / LEFT properties when set up positioning of FIXED element
    and use top/left/right/bottom of `anchor` to get coords


*/

function task2() {
  var positionAt = function positionAt(anchor, position, elem) {
    elem.style.position = 'fixed';
    switch (position) {
      case 'top':
        elem.style.top = anchor.getBoundingClientRect().top - elem.offsetHeight + 'px';
        elem.style.left = anchor.getBoundingClientRect().left + 'px';
        break;
      case 'left':
        elem.style.left = anchor.getBoundingClientRect().left - elem.offsetWidth + 'px';
        elem.style.top = anchor.getBoundingClientRect().top + 'px';
        break;
      case 'bottom':
        elem.style.top = anchor.getBoundingClientRect().bottom + 'px';
        elem.style.left = anchor.getBoundingClientRect().left + 'px';
        break;
      case 'right':
        elem.style.left = anchor.getBoundingClientRect().right + 'px';
        elem.style.top = anchor.getBoundingClientRect().top + 'px';
        break;
    }
  };

  var showNote = function showNote(anchor, position, html) {
    var note = document.createElement('div');
    note.className = 'note';
    note.innerHTML = html;
    document.body.appendChild(note);
    positionAt(anchor, position, note);
  };

  ['top', 'right', 'bottom', 'left'].map(function (dir) {
    showNote(scrolled, dir, 'Hello note at ' + dir + ' !');
  });
}
// task2()

/*Task 3

Напишите функцию getDocumentScroll(), 
которая возвращает объект с информацией о текущей прокрутке и области видимости.

Свойства объекта-результата:
top — координата верхней границы видимой части (относительно документа).
bottom — координата нижней границы видимой части (относительно документа).
height — полная высота документа, включая прокрутку.

*/

function task3() {
  var getDocumentScroll = function getDocumentScroll() {
    var html = document.documentElement;
    var pageHeight = Math.max(document.body.scrollHeight, html.scrollHeight, document.body.offsetHeight, html.offsetHeight, document.body.clientHeight, html.clientHeight);
    debugger;
    return {
      top: pageYOffset,
      bottom: pageYOffset + html.clientHeight,
      height: height
    };
  };

  console.log(getDocumentScroll());
}
// task3()

/* Task4

Modify task2 function, to make tips scroll/resize agnostic
*/

function task21() {
  var positionAt = function positionAt(anchor, position, elem) {
    elem.style.position = 'absolute';

    var calcAbsPosOf = function calcAbsPosOf(val) {
      var offset = val === 'left' || val === 'right' ? pageXOffset : pageYOffset;
      return anchor.getBoundingClientRect()[val] + offset;
    };
    var getStyleVal = function getStyleVal(prop) {
      return parseInt(getComputedStyle(anchor)[prop]);
    };

    switch (position) {
      case 'top-out':
        elem.style.top = calcAbsPosOf('top') - elem.offsetHeight + 'px';
        elem.style.left = calcAbsPosOf('left') + 'px';
        break;
      case 'left-out':
        elem.style.left = calcAbsPosOf('left') - elem.offsetWidth + 'px';
        elem.style.top = calcAbsPosOf('top') + 'px';
        break;
      case 'bottom-out':
        elem.style.top = calcAbsPosOf('bottom') + 'px';
        elem.style.left = calcAbsPosOf('left') + 'px';
        break;
      case 'right-out':
        elem.style.left = calcAbsPosOf('right') + 'px';
        elem.style.top = calcAbsPosOf('top') + 'px';
        break;
      case 'top-in':
        elem.style.top = calcAbsPosOf('top') + getStyleVal('borderTopWidth') - elem.offsetHeight + 'px';
        elem.style.left = calcAbsPosOf('left') + getStyleVal('borderLeftWidth') + 'px';
        break;
      case 'left-in':
        elem.style.left = calcAbsPosOf('left') + getStyleVal('borderLeftWidth') - elem.offsetWidth + 'px';
        elem.style.top = calcAbsPosOf('top') + getStyleVal('borderTopWidth') + 'px';
        break;
      case 'bottom-in':
        elem.style.top = calcAbsPosOf('bottom') - getStyleVal('borderBottomWidth') + 'px';
        elem.style.left = calcAbsPosOf('left') + getStyleVal('borderLeftWidth') + 'px';
        break;
      case 'right-in':
        elem.style.left = calcAbsPosOf('right') - getStyleVal('borderRightWidth') + 'px';
        elem.style.top = calcAbsPosOf('top') + getStyleVal('borderTopWidth') + 'px';
        break;
    }
  };

  var showNote = function showNote(anchor, position, html) {
    var note = document.createElement('div');
    note.className = 'note';
    note.innerHTML = html;
    document.body.appendChild(note);
    positionAt(anchor, position, note);
  };

  ['top-out', 'top-in', 'right-out', 'right-in', 'bottom-out', 'bottom-in', 'left-out', 'left-in'].map(function (dir) {
    showNote(scrolled, dir, 'Note ' + dir);
  });
}
task21();
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQTtBQUMvQixjQUFVLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTtHQUNuQyxDQUFBOztBQUVELEdBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUMvRixHQUFHLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDVixZQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsWUFBVSxHQUFHLENBQUcsQ0FBQTtHQUN2QyxDQUFDLENBQUE7Q0FFSDtBQUNELE1BQU0sRUFBRSxDQUFBIiwiZmlsZSI6InBhcnQyL2RvY3VtZW50X2FuZF9wYWdlX29iamVjdHMvMTAuY29vcmRpbmF0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKkNvb3JkcyByZWxhdGl2ZSB0byBWSVNJQkxFIFdJTkRPV1xuICBzaW1pbGFyIHRvIGBwb3NpdGlvbiBmaXhlZGBcblxuICBjbGllbnRYLCBjbGllbnRZXG5cbiAgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBcbiAgICByZXR1cm4gb2JqZWN0LCBjb250YWluZyBcbiAgICAgIHRvcFxuICAgICAgbGVmdFxuICAgICAgcmlnaHRcbiAgICAgIGJvdHRvbSBcbiAgICBjb29yZGluYXRlcyBvZiBgZWxlbWBcblxuXG4gIGRvY3VtZW50LmVsZW1Gcm9tUG9pbnQoeCwgeSlcblxuICAgIHJldHVybiBlbGVtZW50IHRoYXQgaG9sZGluZyB4LCB5IHBvaW50c1xuICAgIGhvdyBhYm91dCB0d28gZWxlbWVudHM/IGlmIG92ZXJsYXBwaW5nXG4qL1xuXG5cblxuLypDb29yZHMgcmVsYXRpdmUgdG8gV0hPTEUgUEFHRVxuICBzaW1pbGFyIHRvIGBwb3NpdGlvbiBhYnNvbHV0ZSBpbiBib2R5YFxuXG4gIGFkZCBwb3NpdGlvbiBpbnNpZGUgd2luZG93IHRvIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG5cbiAgcGFnZVggPSBjbGllbnRYICsgcGFnZVhPZmZzZXN0IChvciBzY3JvbGxMZWZ0KVxuICBwYWdlWSA9IGNsaWVudFkgKyBwYWdlWU9mZnNlc3QgKG9yIHNjcm9sbFRvcClcblxuKi9cblxuXG5cblxuLyogVGFzayAxXG5maW5kIFxuICBvdXRlciB0b3AtbGVmdCBjb3JuZXJcbiAgb3V0ZXIgYm90dG9tLXJpZ2h0IGNvcm5lclxuICBpbm5lciB0b3AtbGVmdCBjb3JuZXJcbiAgaW5uZXIgYm90dG9tLXJpZ2h0IGNvcm5lclxuKi9cblxuZnVuY3Rpb24gdGFzazEgKCkge1xuICBsZXQgZmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Nyb2xsZWQnKVxuICBsZXQgc3RyaW5naWZ5ID0gKHgsIHkpID0+IGAke3h9LCAke3l9YFxuICBsZXQgZmllbGRSZWN0ID0gZmllbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgbGV0IGdldFN0eWxlVmFsID0gKGVsZW0sIHByb3ApID0+IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZmllbGQpW3Byb3BdKVxuICBcbiAgbGV0IHRvcExlZnRPdXRlciA9ICAgICBzdHJpbmdpZnkoZmllbGRSZWN0LmxlZnQsIGZpZWxkUmVjdC50b3ApXG4gIGxldCBib3R0b21SaWdodE91dGVyID0gc3RyaW5naWZ5KGZpZWxkUmVjdC5yaWdodCwgZmllbGRSZWN0LmJvdHRvbSlcbiAgbGV0IHRvcExlZnRJbm5lciA9ICAgICBzdHJpbmdpZnkoZmllbGRSZWN0LmxlZnQgKyBmaWVsZC5jbGllbnRMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLGZpZWxkUmVjdC50b3AgKyBmaWVsZC5jbGllbnRUb3ApXG4gIGxldCBib3R0b21SaWdodElubmVyID0gc3RyaW5naWZ5KGZpZWxkUmVjdC5yaWdodCAtIGdldFN0eWxlVmFsKGZpZWxkLCAnYm9yZGVyUmlnaHRXaWR0aCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLGZpZWxkUmVjdC5ib3R0b20gLSBnZXRTdHlsZVZhbChmaWVsZCwgJ2JvcmRlckJvdHRvbVdpZHRoJykpXG5cbiAgY29uc29sZS5sb2codG9wTGVmdE91dGVyKSBcbiAgY29uc29sZS5sb2codG9wTGVmdElubmVyKSBcbiAgY29uc29sZS5sb2coYm90dG9tUmlnaHRPdXRlcikgXG4gIGNvbnNvbGUubG9nKGJvdHRvbVJpZ2h0SW5uZXIpIFxufVxuLy8gdGFzazEoKVxuXG5cblxuXG4vKlRhc2sgMlxuXG7QodC+0LfQtNCw0LnRgtC1INGE0YPQvdC60YbQuNGOIHBvc2l0aW9uQXQoYW5jaG9yLCBwb3NpdGlvbiwgZWxlbSksXG7QutC+0YLQvtGA0LDRjyDQv9C+0LfQuNGG0LjQvtC90LjRgNGD0LXRgiDRjdC70LXQvNC10L3RgiBlbGVtLCDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIgcG9zaXRpb24sXG7RgdCy0LXRgNGF0YMgKFwidG9wXCIpLCDRgdC/0YDQsNCy0LAgKFwicmlnaHRcIikg0LjQu9C4INGB0L3QuNC30YMgKFwiYm90dG9tXCIpINC+0YIg0Y3Qu9C10LzQtdC90YLQsCBhbmNob3IuXG5cbtCY0YHQv9C+0LvRjNC30YPQudGC0LUg0LXRkSwg0YfRgtC+0LHRiyDRgdC00LXQu9Cw0YLRjCDRhNGD0L3QutGG0LjRjiBzaG93Tm90ZShhbmNob3IsIHBvc2l0aW9uLCBodG1sKSxcbtC60L7RgtC+0YDQsNGPINC/0L7QutCw0LfRi9Cy0LDQtdGCINGN0LvQtdC80LXQvdGCINGBINC60LvQsNGB0YHQvtC8IG5vdGUg0Lgg0YLQtdC60YHRgtC+0LwgaHRtbFxu0L3QsCDQv9C+0LfQuNGG0LjQuCBwb3NpdGlvbiDRgNGP0LTQvtC8INGBINGN0LvQtdC80LXQvdGC0L7QvCBhbmNob3IuXG5cblxuRW5saWdodG1lbnQ6IFxuICB1c2UgVE9QIC8gTEVGVCBwcm9wZXJ0aWVzIHdoZW4gc2V0IHVwIHBvc2l0aW9uaW5nIG9mIEZJWEVEIGVsZW1lbnRcbiAgICBhbmQgdXNlIHRvcC9sZWZ0L3JpZ2h0L2JvdHRvbSBvZiBgYW5jaG9yYCB0byBnZXQgY29vcmRzXG5cblxuKi9cblxuZnVuY3Rpb24gdGFzazIgKCkge1xuICBsZXQgcG9zaXRpb25BdCA9IChhbmNob3IsIHBvc2l0aW9uLCBlbGVtKSA9PiB7XG4gICAgZWxlbS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICBzd2l0Y2gocG9zaXRpb24pe1xuICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gZWxlbS5vZmZzZXRIZWlnaHQgKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC0gZWxlbS5vZmZzZXRXaWR0aCArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tICsgJ3B4J1xuICAgICAgICBlbGVtLnN0eWxlLmxlZnQgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArICdweCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0ICsgJ3B4J1xuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgbGV0IHNob3dOb3RlID0gKGFuY2hvciwgcG9zaXRpb24sIGh0bWwpID0+IHtcbiAgICBsZXQgbm90ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgbm90ZS5jbGFzc05hbWUgPSAnbm90ZSdcbiAgICBub3RlLmlubmVySFRNTCA9IGh0bWxcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vdGUpXG4gICAgcG9zaXRpb25BdChhbmNob3IsIHBvc2l0aW9uLCBub3RlKVxuICB9XG5cbiAgWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5tYXAoZGlyID0+IHtcbiAgICBzaG93Tm90ZShzY3JvbGxlZCwgZGlyLCBgSGVsbG8gbm90ZSBhdCAke2Rpcn0gIWApXG4gIH0pXG5cbn1cbi8vIHRhc2syKCkgXG5cblxuXG4vKlRhc2sgM1xuXG7QndCw0L/QuNGI0LjRgtC1INGE0YPQvdC60YbQuNGOIGdldERvY3VtZW50U2Nyb2xsKCksIFxu0LrQvtGC0L7RgNCw0Y8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L7QsdGK0LXQutGCINGBINC40L3RhNC+0YDQvNCw0YbQuNC10Lkg0L4g0YLQtdC60YPRidC10Lkg0L/RgNC+0LrRgNGD0YLQutC1INC4INC+0LHQu9Cw0YHRgtC4INCy0LjQtNC40LzQvtGB0YLQuC5cblxu0KHQstC+0LnRgdGC0LLQsCDQvtCx0YrQtdC60YLQsC3RgNC10LfRg9C70YzRgtCw0YLQsDpcbnRvcCDigJQg0LrQvtC+0YDQtNC40L3QsNGC0LAg0LLQtdGA0YXQvdC10Lkg0LPRgNCw0L3QuNGG0Ysg0LLQuNC00LjQvNC+0Lkg0YfQsNGB0YLQuCAo0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC00L7QutGD0LzQtdC90YLQsCkuXG5ib3R0b20g4oCUINC60L7QvtGA0LTQuNC90LDRgtCwINC90LjQttC90LXQuSDQs9GA0LDQvdC40YbRiyDQstC40LTQuNC80L7QuSDRh9Cw0YHRgtC4ICjQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LTQvtC60YPQvNC10L3RgtCwKS5cbmhlaWdodCDigJQg0L/QvtC70L3QsNGPINCy0YvRgdC+0YLQsCDQtNC+0LrRg9C80LXQvdGC0LAsINCy0LrQu9GO0YfQsNGPINC/0YDQvtC60YDRg9GC0LrRgy5cblxuKi9cblxuZnVuY3Rpb24gdGFzazMgKCkge1xuICBsZXQgZ2V0RG9jdW1lbnRTY3JvbGwgPSAoKSA9PiB7XG4gICAgbGV0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgICBsZXQgcGFnZUhlaWdodCA9IE1hdGgubWF4KFxuICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LFxuICAgICAgZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0LFxuICAgICAgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0XG4gICAgKTtcbmRlYnVnZ2VyXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcGFnZVlPZmZzZXQsXG4gICAgICBib3R0b206IHBhZ2VZT2Zmc2V0ICsgaHRtbC5jbGllbnRIZWlnaHQsXG4gICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH1cbiAgfVxuXG4gIGNvbnNvbGUubG9nKGdldERvY3VtZW50U2Nyb2xsKCkpXG59XG4vLyB0YXNrMygpXG5cblxuXG5cbi8qIFRhc2s0XG5cbk1vZGlmeSB0YXNrMiBmdW5jdGlvbiwgdG8gbWFrZSB0aXBzIHNjcm9sbC9yZXNpemUgYWdub3N0aWNcbiovXG5cbmZ1bmN0aW9uIHRhc2syMSAoKSB7XG4gIGxldCBwb3NpdGlvbkF0ID0gKGFuY2hvciwgcG9zaXRpb24sIGVsZW0pID0+IHtcbiAgICBlbGVtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIFxuICAgIGxldCBjYWxjQWJzUG9zT2YgPSAodmFsKSA9PiB7XG4gICAgICBsZXQgb2Zmc2V0ID0gdmFsID09PSAnbGVmdCcgfHwgdmFsID09PSAncmlnaHQnID8gcGFnZVhPZmZzZXQgOiBwYWdlWU9mZnNldFxuICAgICAgcmV0dXJuIGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt2YWxdICsgb2Zmc2V0XG4gICAgfVxuICAgIGxldCBnZXRTdHlsZVZhbCA9IHByb3AgPT4gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShhbmNob3IpW3Byb3BdKVxuXG4gICAgc3dpdGNoKHBvc2l0aW9uKXtcbiAgICAgIGNhc2UgJ3RvcC1vdXQnOlxuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGNhbGNBYnNQb3NPZigndG9wJykgLSBlbGVtLm9mZnNldEhlaWdodCArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gY2FsY0Fic1Bvc09mKCdsZWZ0JykgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdsZWZ0LW91dCc6XG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGNhbGNBYnNQb3NPZignbGVmdCcpIC0gZWxlbS5vZmZzZXRXaWR0aCArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBjYWxjQWJzUG9zT2YoJ3RvcCcpICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYm90dG9tLW91dCc6XG4gICAgICAgIGVsZW0uc3R5bGUudG9wID0gY2FsY0Fic1Bvc09mKCdib3R0b20nKSArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gY2FsY0Fic1Bvc09mKCdsZWZ0JykgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdyaWdodC1vdXQnOlxuICAgICAgICBlbGVtLnN0eWxlLmxlZnQgPSBjYWxjQWJzUG9zT2YoJ3JpZ2h0JykgKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUudG9wID0gY2FsY0Fic1Bvc09mKCd0b3AnKSArICdweCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3RvcC1pbic6XG4gICAgICAgIGVsZW0uc3R5bGUudG9wID0gY2FsY0Fic1Bvc09mKCd0b3AnKSArIGdldFN0eWxlVmFsKCdib3JkZXJUb3BXaWR0aCcpIC0gZWxlbS5vZmZzZXRIZWlnaHQgKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGNhbGNBYnNQb3NPZignbGVmdCcpICsgZ2V0U3R5bGVWYWwoJ2JvcmRlckxlZnRXaWR0aCcpICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbGVmdC1pbic6XG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGNhbGNBYnNQb3NPZignbGVmdCcpICsgZ2V0U3R5bGVWYWwoJ2JvcmRlckxlZnRXaWR0aCcpIC0gZWxlbS5vZmZzZXRXaWR0aCArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBjYWxjQWJzUG9zT2YoJ3RvcCcpICsgZ2V0U3R5bGVWYWwoJ2JvcmRlclRvcFdpZHRoJykgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdib3R0b20taW4nOlxuICAgICAgICBlbGVtLnN0eWxlLnRvcCA9IGNhbGNBYnNQb3NPZignYm90dG9tJykgLSBnZXRTdHlsZVZhbCgnYm9yZGVyQm90dG9tV2lkdGgnKSArICdweCdcbiAgICAgICAgZWxlbS5zdHlsZS5sZWZ0ID0gY2FsY0Fic1Bvc09mKCdsZWZ0JykgKyBnZXRTdHlsZVZhbCgnYm9yZGVyTGVmdFdpZHRoJykgKyAncHgnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdyaWdodC1pbic6XG4gICAgICAgIGVsZW0uc3R5bGUubGVmdCA9IGNhbGNBYnNQb3NPZigncmlnaHQnKSAtIGdldFN0eWxlVmFsKCdib3JkZXJSaWdodFdpZHRoJykgKyAncHgnXG4gICAgICAgIGVsZW0uc3R5bGUudG9wID0gY2FsY0Fic1Bvc09mKCd0b3AnKSArIGdldFN0eWxlVmFsKCdib3JkZXJUb3BXaWR0aCcpICsgJ3B4J1xuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGxldCBzaG93Tm90ZSA9IChhbmNob3IsIHBvc2l0aW9uLCBodG1sKSA9PiB7XG4gICAgbGV0IG5vdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIG5vdGUuY2xhc3NOYW1lID0gJ25vdGUnXG4gICAgbm90ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub3RlKVxuICAgIHBvc2l0aW9uQXQoYW5jaG9yLCBwb3NpdGlvbiwgbm90ZSlcbiAgfVxuXG4gIFsndG9wLW91dCcsICd0b3AtaW4nLCAncmlnaHQtb3V0JywgJ3JpZ2h0LWluJywgJ2JvdHRvbS1vdXQnLCAnYm90dG9tLWluJywgJ2xlZnQtb3V0JywgJ2xlZnQtaW4nXVxuICAubWFwKGRpciA9PiB7XG4gICAgc2hvd05vdGUoc2Nyb2xsZWQsIGRpciwgYE5vdGUgJHtkaXJ9YClcbiAgfSlcblxufVxudGFzazIxKCkgXG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
