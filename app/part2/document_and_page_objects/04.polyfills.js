"use strict";

/*
Метод elem.matches(css) в некоторых старых браузерах поддерживается 
под старым именем matchesSelector или с префиксами,
то есть: webkitMatchesSelector (старый Chrome, Safari),
mozMatchesSelector (старый Firefox) 
или Element.prototype.msMatchesSelector (старый IE).

Создайте полифилл, который гарантирует стандартный синтаксис 
elem.matches(css) для всех браузеров.

*/

function task1() {

  if (!Element.prototype.matches) {

    Element.prototype.matches = function (cssQuery) {

      return this.matchesSelector || this.webkitMatchesSelector || this.mozMatchesSelector || this.msMatchesSelector;
    };
  }
}

/*
  Enlightment: write following method into prototype.matches
               make check `before` method implementation
*/

/*
Метод elem.closest(css) для поиска ближайшего родителя,
удовлетворяющего селектору css, не поддерживается некоторыми браузерами, например IE11-.

Создайте для него полифилл.

*/

function task2() {

  if (!Element.prototype.closest) {

    Element.prototype.closest = function (cssQuery) {
      var _this = this;

      [].prototype.forEach.call(this.querySelectorAll(cssQuery), function (el) {
        if (el === _this.parentElement) return true;
      });
      return false;
    };
  }
}

/*
Свойство textContent не поддерживается IE8. Однако, там есть свойство innerText.

Создаёте полифилл, который проверяет поддержку свойства textContent,
и если её нет — создаёт его, используя innerText.
Получится, что в IE8 «новое» свойство textContent будет «псевдонимом» для innerText.

Хотя свойство innerText и работает по-иному, нежели textContent,
но в некоторых ситуациях они могут быть взаимозаменимы. Именно на них направлен полифилл.

*/

function task3() {

  if (document.documentElement.textContent === undefined) {
    Object.defineProperty(HTMLElement.prototype, "textContent", {
      get: function get() {
        return this.innerText;
      },
      set: function set(val) {
        this.innerText = val;
      }
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjA0LnBvbHlmaWxscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQWFBLFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7O0FBRTlCLFdBQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVMsUUFBUSxFQUFFOztBQUU3QyxhQUFTLElBQUksQ0FBQyxlQUFlLElBQ3BCLElBQUksQ0FBQyxxQkFBcUIsSUFDMUIsSUFBSSxDQUFDLGtCQUFrQixJQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUE7S0FDaEMsQ0FBQTtHQUNGO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBbUJELFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7O0FBRTlCLFdBQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVMsUUFBUSxFQUFFOzs7QUFDN0MsUUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFDLEVBQUUsRUFBSztBQUNqRSxZQUFJLEVBQUUsS0FBSyxNQUFLLGFBQWEsRUFBRSxPQUFPLElBQUksQ0FBQztPQUM1QyxDQUFDLENBQUE7QUFDRixhQUFPLEtBQUssQ0FBQTtLQUNiLENBQUE7R0FFRjtDQUNGOzs7Ozs7Ozs7Ozs7OztBQUFBLEFBZUQsU0FBUyxLQUFLLEdBQUc7O0FBRWYsTUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7QUFDdEQsVUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRTtBQUMxRCxTQUFHLEVBQUUsZUFBVztBQUNkLGVBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtPQUN0QjtBQUNELFNBQUcsRUFBRSxhQUFTLEdBQUcsRUFBRTtBQUNqQixZQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQTtPQUNyQjtLQUNGLENBQUMsQ0FBQTtHQUNIO0NBQ0YiLCJmaWxlIjoicGFydDIvZG9jdW1lbnRfYW5kX3BhZ2Vfb2JqZWN0cy8wNC5wb2x5ZmlsbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu0JzQtdGC0L7QtCBlbGVtLm1hdGNoZXMoY3NzKSDQsiDQvdC10LrQvtGC0L7RgNGL0YUg0YHRgtCw0YDRi9GFINCx0YDQsNGD0LfQtdGA0LDRhSDQv9C+0LTQtNC10YDQttC40LLQsNC10YLRgdGPIFxu0L/QvtC0INGB0YLQsNGA0YvQvCDQuNC80LXQvdC10LwgbWF0Y2hlc1NlbGVjdG9yINC40LvQuCDRgSDQv9GA0LXRhNC40LrRgdCw0LzQuCxcbtGC0L4g0LXRgdGC0Yw6IHdlYmtpdE1hdGNoZXNTZWxlY3RvciAo0YHRgtCw0YDRi9C5IENocm9tZSwgU2FmYXJpKSxcbm1vek1hdGNoZXNTZWxlY3RvciAo0YHRgtCw0YDRi9C5IEZpcmVmb3gpIFxu0LjQu9C4IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yICjRgdGC0LDRgNGL0LkgSUUpLlxuXG7QodC+0LfQtNCw0LnRgtC1INC/0L7Qu9C40YTQuNC70LssINC60L7RgtC+0YDRi9C5INCz0LDRgNCw0L3RgtC40YDRg9C10YIg0YHRgtCw0L3QtNCw0YDRgtC90YvQuSDRgdC40L3RgtCw0LrRgdC40YEgXG5lbGVtLm1hdGNoZXMoY3NzKSDQtNC70Y8g0LLRgdC10YUg0LHRgNCw0YPQt9C10YDQvtCyLlxuXG4qL1xuXG5cbmZ1bmN0aW9uIHRhc2sxICgpIHtcblxuICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcblxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbihjc3NRdWVyeSkge1xuXG4gICAgICByZXR1cm4gICB0aGlzLm1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgdGhpcy53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICAgIHx8IHRoaXMubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgICB8fCB0aGlzLm1zTWF0Y2hlc1NlbGVjdG9yXG4gICAgfVxuICB9XG59XG5cbi8qXG4gIEVubGlnaHRtZW50OiB3cml0ZSBmb2xsb3dpbmcgbWV0aG9kIGludG8gcHJvdG90eXBlLm1hdGNoZXNcbiAgICAgICAgICAgICAgIG1ha2UgY2hlY2sgYGJlZm9yZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4qL1xuXG5cblxuXG4vKlxu0JzQtdGC0L7QtCBlbGVtLmNsb3Nlc3QoY3NzKSDQtNC70Y8g0L/QvtC40YHQutCwINCx0LvQuNC20LDQudGI0LXQs9C+INGA0L7QtNC40YLQtdC70Y8sXG7Rg9C00L7QstC70LXRgtCy0L7RgNGP0Y7RidC10LPQviDRgdC10LvQtdC60YLQvtGA0YMgY3NzLCDQvdC1INC/0L7QtNC00LXRgNC20LjQstCw0LXRgtGB0Y8g0L3QtdC60L7RgtC+0YDRi9C80Lgg0LHRgNCw0YPQt9C10YDQsNC80LgsINC90LDQv9GA0LjQvNC10YAgSUUxMS0uXG5cbtCh0L7Qt9C00LDQudGC0LUg0LTQu9GPINC90LXQs9C+INC/0L7Qu9C40YTQuNC70LsuXG5cbiovXG5cblxuZnVuY3Rpb24gdGFzazIgKCkge1xuICBcbiAgaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG5cbiAgICBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24oY3NzUXVlcnkpIHtcbiAgICAgIFtdLnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodGhpcy5xdWVyeVNlbGVjdG9yQWxsKGNzc1F1ZXJ5KSwgKGVsKSA9PiB7XG4gICAgICAgIGlmIChlbCA9PT0gdGhpcy5wYXJlbnRFbGVtZW50KSByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgfVxufVxuXG5cbi8qXG7QodCy0L7QudGB0YLQstC+IHRleHRDb250ZW50INC90LUg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGC0YHRjyBJRTguINCe0LTQvdCw0LrQviwg0YLQsNC8INC10YHRgtGMINGB0LLQvtC50YHRgtCy0L4gaW5uZXJUZXh0LlxuXG7QodC+0LfQtNCw0ZHRgtC1INC/0L7Qu9C40YTQuNC70LssINC60L7RgtC+0YDRi9C5INC/0YDQvtCy0LXRgNGP0LXRgiDQv9C+0LTQtNC10YDQttC60YMg0YHQstC+0LnRgdGC0LLQsCB0ZXh0Q29udGVudCxcbtC4INC10YHQu9C4INC10ZEg0L3QtdGCIOKAlCDRgdC+0LfQtNCw0ZHRgiDQtdCz0L4sINC40YHQv9C+0LvRjNC30YPRjyBpbm5lclRleHQuXG7Qn9C+0LvRg9GH0LjRgtGB0Y8sINGH0YLQviDQsiBJRTggwqvQvdC+0LLQvtC1wrsg0YHQstC+0LnRgdGC0LLQviB0ZXh0Q29udGVudCDQsdGD0LTQtdGCIMKr0L/RgdC10LLQtNC+0L3QuNC80L7QvMK7INC00LvRjyBpbm5lclRleHQuXG5cbtCl0L7RgtGPINGB0LLQvtC50YHRgtCy0L4gaW5uZXJUZXh0INC4INGA0LDQsdC+0YLQsNC10YIg0L/Qvi3QuNC90L7QvNGDLCDQvdC10LbQtdC70LggdGV4dENvbnRlbnQsXG7QvdC+INCyINC90LXQutC+0YLQvtGA0YvRhSDRgdC40YLRg9Cw0YbQuNGP0YUg0L7QvdC4INC80L7Qs9GD0YIg0LHRi9GC0Ywg0LLQt9Cw0LjQvNC+0LfQsNC80LXQvdC40LzRiy4g0JjQvNC10L3QvdC+INC90LAg0L3QuNGFINC90LDQv9GA0LDQstC70LXQvSDQv9C+0LvQuNGE0LjQu9C7LlxuXG4qL1xuXG5mdW5jdGlvbiB0YXNrMygpIHtcblxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLCBcInRleHRDb250ZW50XCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyVGV4dFxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHRoaXMuaW5uZXJUZXh0ID0gdmFsXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
