'use strict';

/*
Best practice and most used query methods:

  elem.querySelectorAll( cssSelector )
  elem.querySelector( cssSelector )

cssSelector - any valid css selector string
examples: 'ul > li', '.test:hover .test_link', '#nav:last-of-type'
supports pseudoelements and pseudostates


Other methods:
  .getElementById()
  .getElementsByTagName()
  .getElementsByName()
  .getElementsByClassName()

*/

/*Task 1:
Ниже находится документ с таблицей и формой.

Все элементы label внутри таблицы. Должно быть 3 элемента.
Первую ячейку таблицы (со словом "Возраст").
Вторую форму в документе.
Форму с именем search, без использования её позиции в документе.
Элемент input в форме с именем search. Если их несколько, то нужен первый.
Элемент с именем info[0], без точного знания его позиции в документе.
Элемент с именем info[0], внутри формы с именем search-person.
*/

function task1() {

  var labels = document.querySelectorAll('table label');
  var ageCell = document.querySelector('table td');

  var secondForm = document.querySelectorAll('form[name=search-person]');
  var secondForm1 = document.getElementsByName('search-person');

  var firstForm = document.querySelectorAll('form[name=search]');
  var firstForm1 = document.getElementsByName('search');
  var firstInputInFirstForm = firstForm[0].querySelector('input');

  var infoZeroInput = document.querySelectorAll('[name="info[0]"]');
  var secondFormZeroInput = secondForm[0].querySelectorAll('[name="info[0]"]');

  /*Enlightment:
    
    - querySelectorAll returns a Collection, not an Element itself.
      Add direct access with [0] for example, or use iteration
       Same for any getElements`Type` queries
     - wrap in string quotation "" to escape [ and ] characters inside query.
  */
}

/*
Есть дерево из тегов <ul>/<li>.

Напишите код, который для каждого элемента <li> выведет:

Текст непосредственно в нём (без подразделов).
Количество вложенных в него элементов <li> — всех, с учётом вложенных.
*/

function task2() {

  var getItemInfo = function getItemInfo(ul) {
    Array.prototype.forEach.call(ul.querySelectorAll('li'), function (li) {
      console.log(li.firstChild.data.trim(), li.querySelectorAll('li').length);
    });
  };
  getItemInfo(document.querySelector('.test'));

  /*
  Enlightment: use .data to get inner content of node
               use .trim() to remove \n characters
   */
}
task2();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmRvbV9zZWFyY2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBLFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDckQsTUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7QUFFaEQsTUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDLENBQUE7QUFDdEUsTUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFBOztBQUU3RCxNQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtBQUM5RCxNQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDckQsTUFBSSxxQkFBcUIsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBOztBQUUvRCxNQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNqRSxNQUFJLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7O0FBQUEsQ0FZN0U7Ozs7Ozs7Ozs7O0FBQUEsQUFjRCxTQUFTLEtBQUssR0FBSTs7QUFFaEIsTUFBSSxXQUFXLEdBQUcsU0FBZCxXQUFXLENBQUksRUFBRSxFQUFLO0FBQ3hCLFNBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDMUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUN6QixVQUFBLEVBQUUsRUFBSTtBQUNKLGFBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3pFLENBQ0YsQ0FBQTtHQUNGLENBQUE7QUFDRCxhQUFXLENBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBRTs7Ozs7O0FBQUEsQ0FPL0M7QUFDRCxLQUFLLEVBQUUsQ0FBQSIsImZpbGUiOiJwYXJ0Mi9kb2N1bWVudF9hbmRfcGFnZV9vYmplY3RzLzAyLmRvbV9zZWFyY2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQmVzdCBwcmFjdGljZSBhbmQgbW9zdCB1c2VkIHF1ZXJ5IG1ldGhvZHM6XG5cbiAgZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBjc3NTZWxlY3RvciApXG4gIGVsZW0ucXVlcnlTZWxlY3RvciggY3NzU2VsZWN0b3IgKVxuXG5jc3NTZWxlY3RvciAtIGFueSB2YWxpZCBjc3Mgc2VsZWN0b3Igc3RyaW5nXG5leGFtcGxlczogJ3VsID4gbGknLCAnLnRlc3Q6aG92ZXIgLnRlc3RfbGluaycsICcjbmF2Omxhc3Qtb2YtdHlwZSdcbnN1cHBvcnRzIHBzZXVkb2VsZW1lbnRzIGFuZCBwc2V1ZG9zdGF0ZXNcblxuXG5PdGhlciBtZXRob2RzOlxuICAuZ2V0RWxlbWVudEJ5SWQoKVxuICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKVxuICAuZ2V0RWxlbWVudHNCeU5hbWUoKVxuICAuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgpXG5cbiovXG5cblxuXG5cblxuLypUYXNrIDE6XG7QndC40LbQtSDQvdCw0YXQvtC00LjRgtGB0Y8g0LTQvtC60YPQvNC10L3RgiDRgSDRgtCw0LHQu9C40YbQtdC5INC4INGE0L7RgNC80L7QuS5cblxu0JLRgdC1INGN0LvQtdC80LXQvdGC0YsgbGFiZWwg0LLQvdGD0YLRgNC4INGC0LDQsdC70LjRhtGLLiDQlNC+0LvQttC90L4g0LHRi9GC0YwgMyDRjdC70LXQvNC10L3RgtCwLlxu0J/QtdGA0LLRg9GOINGP0YfQtdC50LrRgyDRgtCw0LHQu9C40YbRiyAo0YHQviDRgdC70L7QstC+0LwgXCLQktC+0LfRgNCw0YHRglwiKS5cbtCS0YLQvtGA0YPRjiDRhNC+0YDQvNGDINCyINC00L7QutGD0LzQtdC90YLQtS5cbtCk0L7RgNC80YMg0YEg0LjQvNC10L3QtdC8IHNlYXJjaCwg0LHQtdC3INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINC10ZEg0L/QvtC30LjRhtC40Lgg0LIg0LTQvtC60YPQvNC10L3RgtC1Llxu0K3Qu9C10LzQtdC90YIgaW5wdXQg0LIg0YTQvtGA0LzQtSDRgSDQuNC80LXQvdC10Lwgc2VhcmNoLiDQldGB0LvQuCDQuNGFINC90LXRgdC60L7Qu9GM0LrQviwg0YLQviDQvdGD0LbQtdC9INC/0LXRgNCy0YvQuS5cbtCt0LvQtdC80LXQvdGCINGBINC40LzQtdC90LXQvCBpbmZvWzBdLCDQsdC10Lcg0YLQvtGH0L3QvtCz0L4g0LfQvdCw0L3QuNGPINC10LPQviDQv9C+0LfQuNGG0LjQuCDQsiDQtNC+0LrRg9C80LXQvdGC0LUuXG7QrdC70LXQvNC10L3RgiDRgSDQuNC80LXQvdC10LwgaW5mb1swXSwg0LLQvdGD0YLRgNC4INGE0L7RgNC80Ysg0YEg0LjQvNC10L3QtdC8IHNlYXJjaC1wZXJzb24uXG4qL1xuXG5mdW5jdGlvbiB0YXNrMSAoKSB7XG4gIFxuICBsZXQgbGFiZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUgbGFiZWwnKVxuICBsZXQgYWdlQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlIHRkJylcbiAgXG4gIGxldCBzZWNvbmRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybVtuYW1lPXNlYXJjaC1wZXJzb25dJylcbiAgbGV0IHNlY29uZEZvcm0xID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3NlYXJjaC1wZXJzb24nKVxuXG4gIGxldCBmaXJzdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtW25hbWU9c2VhcmNoXScpXG4gIGxldCBmaXJzdEZvcm0xID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3NlYXJjaCcpXG4gIGxldCBmaXJzdElucHV0SW5GaXJzdEZvcm0gPSBmaXJzdEZvcm1bMF0ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuXG4gIGxldCBpbmZvWmVyb0lucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9XCJpbmZvWzBdXCJdJylcbiAgbGV0IHNlY29uZEZvcm1aZXJvSW5wdXQgPSBzZWNvbmRGb3JtWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tuYW1lPVwiaW5mb1swXVwiXScpXG5cblxuICAvKkVubGlnaHRtZW50OlxuICAgIFxuICAgIC0gcXVlcnlTZWxlY3RvckFsbCByZXR1cm5zIGEgQ29sbGVjdGlvbiwgbm90IGFuIEVsZW1lbnQgaXRzZWxmLlxuICAgICAgQWRkIGRpcmVjdCBhY2Nlc3Mgd2l0aCBbMF0gZm9yIGV4YW1wbGUsIG9yIHVzZSBpdGVyYXRpb25cblxuICAgICAgU2FtZSBmb3IgYW55IGdldEVsZW1lbnRzYFR5cGVgIHF1ZXJpZXNcblxuICAgIC0gd3JhcCBpbiBzdHJpbmcgcXVvdGF0aW9uIFwiXCIgdG8gZXNjYXBlIFsgYW5kIF0gY2hhcmFjdGVycyBpbnNpZGUgcXVlcnkuXG4gICovXG59XG5cblxuXG5cbi8qXG7QldGB0YLRjCDQtNC10YDQtdCy0L4g0LjQtyDRgtC10LPQvtCyIDx1bD4vPGxpPi5cblxu0J3QsNC/0LjRiNC40YLQtSDQutC+0LQsINC60L7RgtC+0YDRi9C5INC00LvRjyDQutCw0LbQtNC+0LPQviDRjdC70LXQvNC10L3RgtCwIDxsaT4g0LLRi9Cy0LXQtNC10YI6XG5cbtCi0LXQutGB0YIg0L3QtdC/0L7RgdGA0LXQtNGB0YLQstC10L3QvdC+INCyINC90ZHQvCAo0LHQtdC3INC/0L7QtNGA0LDQt9C00LXQu9C+0LIpLlxu0JrQvtC70LjRh9C10YHRgtCy0L4g0LLQu9C+0LbQtdC90L3Ri9GFINCyINC90LXQs9C+INGN0LvQtdC80LXQvdGC0L7QsiA8bGk+IOKAlCDQstGB0LXRhSwg0YEg0YPRh9GR0YLQvtC8INCy0LvQvtC20LXQvdC90YvRhS5cbiovXG5cbmZ1bmN0aW9uIHRhc2syICgpIHtcblxuICBsZXQgZ2V0SXRlbUluZm8gPSAodWwpID0+IHtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxuICAgICAgdWwucXVlcnlTZWxlY3RvckFsbCgnbGknKVxuICAgICAsbGkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhsaS5maXJzdENoaWxkLmRhdGEudHJpbSgpLCBsaS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmxlbmd0aClcbiAgICAgIH1cbiAgICApXG4gIH1cbiAgZ2V0SXRlbUluZm8oIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXN0JykgKVxuXG4gIC8qXG4gIEVubGlnaHRtZW50OiB1c2UgLmRhdGEgdG8gZ2V0IGlubmVyIGNvbnRlbnQgb2Ygbm9kZVxuICAgICAgICAgICAgICAgdXNlIC50cmltKCkgdG8gcmVtb3ZlIFxcbiBjaGFyYWN0ZXJzXG5cbiAgKi9cbn1cbnRhc2syKClcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
