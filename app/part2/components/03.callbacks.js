'use strict';

/*

  Component need to interact with other components

  METHOD 1: Use Callbacks

    - function that translated to somewhere
    - expect that it will be executed after some `event`

  Example:

  function Menu() {
    ...
    function select(link) {
      options.onselect(link.getAttribute('href').slice(1));
      ...
    }
  ...
  }

  var menu = new Menu({
    title: "Сладости",
    template: _.template(document.getElementById('menu-template').innerHTML),
    listTemplate: _.template(document.getElementById('menu-list-template').innerHTML),
    items: {
      "donut": "Пончик",
      "cake": "Пирожное",
      "chocolate": "Шоколадка"
    },
    onselect: showSelected //!!!translate callback
  });

  function showSelected(href) {
    alert(href);
  }



  
  METHOD 2: Use Custom Events

    - generate and dispatch
    - listen to event and handle it


  Example: 


  function Menu(options) {

    function select(link) {
      var widgetEvent = new CustomEvent("select", {
        bubbles: true,
        // detail - стандартное свойство CustomEvent для произвольных данных
        detail: link.getAttribute('href').slice(1)
      });
      elem.dispatchEvent(widgetEvent);
    }

  }


  var menu = new Menu(...);

  var elem = menu.getElem();

  elem.addEventListener('select', function(event) { //!!!listen to custom event
    alert( event.detail );  
  });

*/

/*Task 1  
  
  Добавьте событие в голосовалку, созданную в задаче Голосовалка, используя механизм генерации событий на объекте.
  Пусть каждое изменение голоса сопровождается событием change со свойством detail, содержащим обновлённое значение:

*/

function task1() {

  var Voter = stampit().props({
    elem: '',
    id: _.uniqueId('voter-')
  }).methods({
    _generateChangeEvent: function _generateChangeEvent(data) {
      var evt = new CustomEvent('change', {
        bubbles: true,
        detail: data
      });
      this.$vote.dispatchEvent(evt);
    },

    _replaceHTML: function _replaceHTML(elem) {
      elem.insertAdjacentHTML('beforeBegin', this.html);
      elem.parentElement.removeChild(this.elem);
      elem = document.getElementById(this.id);
      return elem;
    },
    _handleClick: function _handleClick(e) {
      var vote = parseInt(this.$vote.textContent);
      var isTarget = function isTarget(type) {
        return e.target.classList.contains(type);
      };
      if (isTarget('down')) this.setVote(--vote);else if (isTarget('up')) this.setVote(++vote);else return;
    },
    setVote: function setVote(vote) {
      this.$vote.textContent = vote;
      this._generateChangeEvent(vote);
    }
  }).init(function () {
    var _this = this;

    this.html = '<div id="' + this.id + '" class="voter">\n                     <span class="down">—</span>\n                     <span class="vote">0</span>\n                     <span class="up">+</span>\n                   </div>';
    var elem = this._replaceHTML(this.elem);
    this.$vote = elem.querySelector('.vote');

    elem.addEventListener('click', function (e) {
      _this._handleClick(e);
    });

    return this;
  });

  var voter = new Voter({
    elem: document.getElementById('voter'),
    id: 'voter'
  });

  document.getElementById('voter').addEventListener('change', function (e) {
    alert(e.detail); // новое значение голоса
  });

  voter.setVote(5);
}
// task1()

/*Task 3

Перепишите решение задачи Список с выделением в виде компонента.
У компонента должен быть единственный публичный метод getSelected(),
который возвращает выбранные значения в виде массива.

Добавьте в решение задачи Компонент: список с выделением событие select.
Оно должно срабатывать при каждом изменении выбора и в свойстве detail содержать список выбранных строк.
Во внешнем коде добавьте обработчик к списку, который при изменениях выводит список значений.

*/

function task2() {

  var SelectableList = stampit().refs({
    element: null,
    onSelect: null,
    selectedClass: 'selected'
  }).init(function (_ref) {
    var _this2 = this;

    var instance = _ref.instance;
    var stamp = _ref.stamp;
    var args = _ref.args;

    var lastSelectedIdx = 0,
        findItemIdx = function findItemIdx(item, items) {
      return _.indexOf(items, item);
    },
        getSelectedItems = function getSelectedItems() {
      return $('.' + _this2.selectedClass, _this2.element);
    };

    var hltBulk = function hltBulk(item, items) {
      var crtItemIdx = findItemIdx(item, items);
      _(items).filter(function (i, idx) {
        if (lastSelectedIdx > crtItemIdx) {
          return idx <= lastSelectedIdx && idx >= crtItemIdx;
        } else {
          return idx >= lastSelectedIdx && idx <= crtItemIdx;
        }
      }).forEach(function (itm) {
        itm.classList.add(_this2.selectedClass);
      }).value();
    };

    var hltCurrent = function hltCurrent(item, items) {
      _.forEach(items, function (item) {
        item.classList.remove(_this2.selectedClass);
      });
      item.classList.add(_this2.selectedClass);
      lastSelectedIdx = findItemIdx(item, items);
    };

    var toggleCurrent = function toggleCurrent(item, items) {
      item.classList.toggle(_this2.selectedClass);
      lastSelectedIdx = findItemIdx(item, items);
    };

    var handleClick = function handleClick(evt) {
      var crtItem = evt.target;
      var allItems = event.currentTarget.children;

      if (crtItem.tagName !== 'LI') return;

      if (evt.metaKey || evt.ctrlKey) toggleCurrent(crtItem, allItems);else if (evt.shiftKey) hltBulk(crtItem, allItems);else hltCurrent(crtItem, allItems);

      _this2.onSelect(getSelectedItems());
    };

    this.element.addEventListener('click', handleClick);
  });

  var list = SelectableList({
    element: document.getElementById('list'),
    onSelect: function onSelect(selectedItems) {
      console.log('----------');
      $$(selectedItems).forEach(function (i) {
        return console.log(i);
      });
    }
  });
}
task2();

/*Task 2

Напишите свой, самостоятельно оформленный, селект.

Требования:

Открытие и закрытие по клику на заголовок.
Закрытие селекта происходит при выборе или клике на любое другое место документа, в том числе на другой аналогичный селект.
Событие "select" при выборе опции возникает на элементе селекта и всплывает.
Значение опции хранится в атрибуте data-value (HTML-структура есть в исходном документе).

*/

function task3() {

  var Select = stampit().refs({
    element: null,
    options: []
  }).static({
    template: '<span class="select-current"><%= current %></span>\n          <ul class="select-items">\n            <% options.forEach(option => { %>\n              <li class="select-item"><%= option %></li>\n            <% }) %>\n          </li>'
  }).methods({
    render: function render() {
      var tpl = _.template(Select.template)({
        current: this.options[0],
        options: this.options
      });

      this.element.insertAdjacentHTML('afterBegin', tpl);
      this.element.classList.add('select');
    },
    open: function open() {
      this.element.classList.add('is-opened');
    },
    close: function close() {
      this.element.classList.remove('is-opened');
    },
    setItem: function setItem(txt) {
      var current = this.element.querySelector('.select-current');
      current.textContent = txt;

      var evt = new CustomEvent('select', {
        bubbles: true,
        detail: txt
      });

      current.dispatchEvent(evt);
    }
  }).init(function () {
    var _this3 = this;

    var isHasClass = function isHasClass(elem, cls) {
      return elem.classList.contains(cls);
    };

    this.render();

    document.body.addEventListener('click', function (e) {
      var isTargetClass = _.partial(isHasClass, e.target);
      _this3.close();

      if (isTargetClass('select-current')) {
        _this3.open();
      } else if (isTargetClass('select-item')) {
        _this3.setItem(e.target.textContent);
      }
    });
  });

  var s1 = Select({
    element: document.getElementById('select-1'),
    options: ['Птицы', 'Рыбы', 'Звери', 'Динозавры', 'Одноклеточные']
  });

  var s2 = Select({
    element: document.getElementById('select-2'),
    options: ['Плотоядные', 'Травоядные', 'Всеядные']
  });

  document.addEventListener('select', function (e) {
    document.getElementById('select-value').textContent = 'Last selected value is ' + e.detail;
  });
}
task3();
//# sourceMappingURL=data:application/json;base64,
