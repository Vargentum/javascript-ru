'use strict';

/*

Widget: 
  
  - object that controls excisting DOM, or create its own one
  - only ONE element inside Widget Constructor
  - no ID inside markup
  - Delegation for handlers
  
  - Handlers call following methods, avoid `hard` logic in handlers
    - better readability
    - possibility to add public methods
  
  - Lazy DOM generation:
    - render if really need
    - increase performance at `Init loading stage`

    example: don't render Dropdown inside Menu, do it when user try to open it!


  - separate Public & Private methods

*/

function example1() {

  function Menu(options) {

    var elem = null;

    function getElem() {
      if (!elem) render();
      return elem;
    }

    function render() {
      elem = document.createElement('div');
      elem.classList.add('menu');
      document.body.appendChild(elem);

      var title = document.createElement('span');
      title.classList.add('menu-title');
      title.textContent = options.title;
      elem.appendChild(title);

      elem.addEventListener('click', function (e) {
        if (!event.target.closest('.menu-title')) return;
        toggle();
      });
    }

    function renderItems() {
      var list = document.createElement('ul');
      list.classList.add('menu-list');
      options.items.forEach(function (item) {
        var li = document.createElement('li');
        li.textContent = item;
        list.appendChild(li);
      });
      elem.appendChild(list);
    }

    function open() {
      var list = elem.querySelector('ul');
      if (!list) renderItems();
      elem.classList.add('is-open');
    }

    function close() {
      elem.classList.remove('is-open');
    }

    function toggle() {
      if (elem.classList.contains('is-open')) close();else open();
    }

    this.open = open;
    this.close = close;
    this.toggle = toggle;
    this.getElem = getElem;
  }

  // создать объект меню с данным заголовком и опциями
  var menu = new Menu({
    title: "Сладости",
    items: ["Торт", "Пончик", "Пирожное", "Шоколадка", "Мороженое"]
  });

  // получить сгенерированный DOM-элемент меню
  var elem = menu.getElem();

  // вставить меню в нужное место страницы
  document.body.appendChild(elem);
}
// example1()

/* Task 1

Создайте компонент «Часы» (Clock).
Интерфейс:

var clock = new Clock({
  elem: элемент
});

clock.start(); // старт
clock.stop(); // стоп
Остальные методы, если нужны, должны быть приватными.

При нажатии на alert часы должны приостанавливаться, а затем продолжать идти с правильным временем.
*/

function task1() {

  function Clock(options) {
    var elem = options.elem;
    var timerId = null;
    var stringifyTime = function stringifyTime(time) {
      return time < 10 ? '0' + time : time;
    };

    function createSgmt(type) {
      var sgmt = document.createElement('span');
      sgmt.classList.add('clock-' + type);
      elem.appendChild(sgmt);
      return sgmt;
    }

    function update(date) {
      var dateTpl = [{
        name: 'hour',
        time: date.getHours()
      }, {
        name: 'minute',
        time: date.getMinutes()
      }, {
        name: 'second',
        time: date.getSeconds()
      }];

      dateTpl.forEach(function (tpl) {
        var name = tpl.name;
        var time = tpl.time;

        var sgmt = elem.querySelector('.clock-' + name);

        if (!sgmt) sgmt = createSgmt(name);
        sgmt.textContent = stringifyTime(time);
      });
    }

    function start() {
      timerId = setTimeout(function () {
        update(new Date());
        start();
      }, 100);
    }

    function stop() {
      if (timerId) clearTimeout(timerId);
    }

    this.start = start;
    this.stop = stop;
    start();
  }

  var clock = new Clock({
    elem: document.getElementById('clock')
  });

  var start = document.getElementById('clock-start');
  start.onclick = clock.start;

  var stop = document.getElementById('clock-stop');
  stop.onclick = clock.stop;
}
task1();

/* Task 2
Напишите функцию-конструктор new Voter(options) для голосовалки. Она должна получать элемент в options.elem, в следующей разметке:
  По клику на + и — число должно увеличиваться или уменьшаться.
  Публичный метод voter.setVote(vote) должен устанавливать текущее число – значение голоса.
  Все остальные методы и свойства пусть будут приватными.
*/

function task2() {

  function Voter(options) {
    var elem = options.elem;
    var elemId = elem.id;
    var $vote = null;
    var vote = 0;
    var html = '<div id="' + elemId + '" class="voter">\n                 <span class="down">—</span>\n                 <span class="vote">' + vote + '</span>\n                 <span class="up">+</span>\n               </div>';

    function init() {
      elem.insertAdjacentHTML('beforeBegin', html);
      elem.parentElement.removeChild(elem);
      elem = document.getElementById(elemId);

      $vote = elem.querySelector('.vote');
      elem.addEventListener('click', function (e) {
        handleClick(e);
      });
    }

    function handleClick(e) {
      var vote = parseInt($vote.textContent);
      var isTarget = function isTarget(type) {
        return e.target.classList.contains(type);
      };

      if (isTarget('down')) setVote(--vote);else if (isTarget('up')) setVote(++vote);else return;
    }

    function setVote(vote) {
      $vote.textContent = vote;
    }

    this.setVote = setVote;
    init();
  }

  new Voter({
    elem: document.getElementById('voter')
  }).setVote(15);
}
task2();
//# sourceMappingURL=data:application/json;base64,
