'use strict';

/*
  keydown / keyup: fired when key is down / up

    allow to get `event.keyCode` - unified code, represented for each key
      - layout agnostic
      - lettercase agnostic
      - 'Z'.keyCode === 'Z'.charPointAt(0)  (works for [a-zA-Z0-9])
  


  keypress: fired after keydown, if key generate a `symbol` (all keys except special, like F1, Ctrl ...)

    allow to get `event.charCode` - code for each pressed char
    crossbrowser function to get charcode, presented in `example1`


  
  You can prevent keyboard event to cancel user input



  all keyboard events support `modifier keys`: altKey / ctrlKey / shiftKey / metaKey
*/

function example1() {

  /*Crossbroser function to get correct key symbol*/

  // event.type должен быть keypress
  function getChar(event) {
    if (event.which == null) {
      // IE
      if (event.keyCode < 32) return null; // спец. символ
      return String.fromCharCode(event.keyCode);
    }

    if (event.which != 0 && event.charCode != 0) {
      // все кроме IE
      if (event.which < 32) return null; // спец. символ
      return String.fromCharCode(event.which); // остальные
    }

    return null; // спец. символ
  }
}
// example1()

/*Task 1:
При помощи событий клавиатуры сделайте так, чтобы в поле можно было вводить только цифры. 
*/

function task1() {

  var filterNonDigits = function filterNonDigits(e) {
    var key = e.keyCode;

    var isInside = function isInside(x, y) {
      return key >= x && key <= y;
    };

    var isLetter = function isLetter() {
      return isInside(65, 90);
    };
    var isAriphmetics = function isAriphmetics() {
      return isInside(186, 192);
    };
    var isPunctuation1 = function isPunctuation1() {
      return isInside(186, 192);
    };
    var isPunctuation2 = function isPunctuation2() {
      return isInside(219, 222);
    };
    var isSpecialMode = function isSpecialMode() {
      return e.metaKey || e.shiftKey || e.altKey || e.ctrlKey;
    };

    if (!isSpecialMode() && isLetter() || isAriphmetics() || isPunctuation1() || isPunctuation2()) {
      e.preventDefault();
    }
  };

  numbersOnly.addEventListener('keydown', filterNonDigits);
}
// task1()

/*More correct desicion with keypress*/

function task1correct() {
  function getChar(event) {
    if (event.which == null) {
      // IE
      if (event.keyCode < 32) return null; // спец. символ
      return String.fromCharCode(event.keyCode);
    }

    if (event.which != 0 && event.charCode != 0) {
      // все кроме IE
      if (event.which < 32) return null; // спец. символ
      return String.fromCharCode(event.which); // остальные
    }

    return null; // спец. символ
  }

  var isSpecialMode = function isSpecialMode(e) {
    return e.metaKey || e.shiftKey || e.altKey || e.ctrlKey;
  };
  var isOutside = function isOutside(char, x, y) {
    return char < x || char > y;
  };

  var filterNonDigits = function filterNonDigits(e) {
    var char = getChar(e);
    if (isSpecialMode(e) || isOutside(char, '0', '9')) {
      e.preventDefault();
    };
  };

  numbersOnly.addEventListener('keypress', filterNonDigits);
}
task1correct();

/*Task 2
Создайте функцию runOnKeys(func, code1, code2, ... code_n), 
которая запускает func при одновременном нажатии клавиш со скан-кодами code1, code2, …, code_n.

Например, код ниже выведет alert при одновременном нажатии клавиш "Q" и "W" (в любом регистре, в любой раскладке)

  algo: 
    args -> ['c']

*/

function task2() {

  var runOnKeys = function runOnKeys(func) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var pressedKeys = args.reduce(function (a, i) {
      a[i] = false;
      return a;
    }, {});

    var isPressedAll = function isPressedAll(keys) {
      for (var key in keys) {
        if (keys[key] === false) return false;
      }
      return true;
    };

    var setCurrentKeyStatus = function setCurrentKeyStatus(keys, status, e) {
      if (keys[e.keyCode] !== undefined) {
        keys[e.keyCode] = status;
      }
    };

    var handleDown = function handleDown(e) {
      setCurrentKeyStatus(pressedKeys, true, e);

      if (isPressedAll(pressedKeys)) {
        func.apply(null);
      };
    };

    document.addEventListener('keydown', handleDown);
    document.addEventListener('keyup', setCurrentKeyStatus.bind(null, pressedKeys, false));
  };

  runOnKeys(function () {
    return console.log('BT!');
  }, "B".charCodeAt(0), "T".charCodeAt(0));
  runOnKeys(function () {
    return console.log('YN!');
  }, "Y".charCodeAt(0), "N".charCodeAt(0));
}
task2();
//# sourceMappingURL=data:application/json;base64,
