'use strict';

/*
Best practice and most used query methods:

  elem.querySelectorAll( cssSelector )
  elem.querySelector( cssSelector )

cssSelector - any valid css selector string
examples: 'ul > li', '.test:hover .test_link', '#nav:last-of-type'
supports pseudoelements and pseudostates


Other methods:
  .getElementById()
  .getElementsByTagName()
  .getElementsByName()
  .getElementsByClassName()

*/

/*Task 1:
Ниже находится документ с таблицей и формой.

Все элементы label внутри таблицы. Должно быть 3 элемента.
Первую ячейку таблицы (со словом "Возраст").
Вторую форму в документе.
Форму с именем search, без использования её позиции в документе.
Элемент input в форме с именем search. Если их несколько, то нужен первый.
Элемент с именем info[0], без точного знания его позиции в документе.
Элемент с именем info[0], внутри формы с именем search-person.
*/

function task1() {

  var labels = document.querySelectorAll('table label');
  var ageCell = document.querySelector('table td');

  var secondForm = document.querySelectorAll('form[name=search-person]');
  var secondForm1 = document.getElementsByName('search-person');

  var firstForm = document.querySelectorAll('form[name=search]');
  var firstForm1 = document.getElementsByName('search');
  var firstInputInFirstForm = firstForm[0].querySelector('input');

  var infoZeroInput = document.querySelectorAll('[name="info[0]"]');
  var secondFormZeroInput = secondForm[0].querySelectorAll('[name="info[0]"]');

  /*Enlightment:
    
    - querySelectorAll returns a Collection, not an Element itself.
      Add direct access with [0] for example, or use iteration
       Same for any getElements`Type` queries
     - wrap in string quotation "" to escape [ and ] characters inside query.
  */
}

/*
Есть дерево из тегов <ul>/<li>.

Напишите код, который для каждого элемента <li> выведет:

Текст непосредственно в нём (без подразделов).
Количество вложенных в него элементов <li> — всех, с учётом вложенных.
*/

function task2() {

  var getItemInfo = function getItemInfo(ul) {
    Array.prototype.forEach.call(ul.querySelectorAll('li'), function (li) {
      console.log(li.firstChild.data.trim(), li.querySelectorAll('li').length);
    });
  };
  getItemInfo(document.querySelector('.test'));

  /*
  Enlightment: use .data to get inner content of node
               use .trim() to remove \n characters
   */
}
task2();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmRvbV9zZWFyY2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBLFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDckQsTUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7QUFFaEQsTUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDLENBQUE7QUFDdEUsTUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFBOztBQUU3RCxNQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtBQUM5RCxNQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDckQsTUFBSSxxQkFBcUIsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBOztBQUUvRCxNQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNqRSxNQUFJLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7O0FBQUEsQ0FZN0U7Ozs7Ozs7Ozs7O0FBQUEsQUFjRCxTQUFTLEtBQUssR0FBSTs7QUFFaEIsTUFBSSxXQUFXLEdBQUcsU0FBZCxXQUFXLENBQUksRUFBRSxFQUFLO0FBQ3hCLFNBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDMUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUN6QixVQUFBLEVBQUUsRUFBSTtBQUNKLGFBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3pFLENBQ0YsQ0FBQTtHQUNGLENBQUE7QUFDRCxhQUFXLENBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBRTs7Ozs7O0FBQUEsQ0FPL0M7QUFDRCxLQUFLLEVBQUUsQ0FBQSIsImZpbGUiOiJwYXJ0Mi9kb20vMDIuZG9tX3NlYXJjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5CZXN0IHByYWN0aWNlIGFuZCBtb3N0IHVzZWQgcXVlcnkgbWV0aG9kczpcblxuICBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIGNzc1NlbGVjdG9yIClcbiAgZWxlbS5xdWVyeVNlbGVjdG9yKCBjc3NTZWxlY3RvciApXG5cbmNzc1NlbGVjdG9yIC0gYW55IHZhbGlkIGNzcyBzZWxlY3RvciBzdHJpbmdcbmV4YW1wbGVzOiAndWwgPiBsaScsICcudGVzdDpob3ZlciAudGVzdF9saW5rJywgJyNuYXY6bGFzdC1vZi10eXBlJ1xuc3VwcG9ydHMgcHNldWRvZWxlbWVudHMgYW5kIHBzZXVkb3N0YXRlc1xuXG5cbk90aGVyIG1ldGhvZHM6XG4gIC5nZXRFbGVtZW50QnlJZCgpXG4gIC5nZXRFbGVtZW50c0J5VGFnTmFtZSgpXG4gIC5nZXRFbGVtZW50c0J5TmFtZSgpXG4gIC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKClcblxuKi9cblxuXG5cblxuXG4vKlRhc2sgMTpcbtCd0LjQttC1INC90LDRhdC+0LTQuNGC0YHRjyDQtNC+0LrRg9C80LXQvdGCINGBINGC0LDQsdC70LjRhtC10Lkg0Lgg0YTQvtGA0LzQvtC5LlxuXG7QktGB0LUg0Y3Qu9C10LzQtdC90YLRiyBsYWJlbCDQstC90YPRgtGA0Lgg0YLQsNCx0LvQuNGG0YsuINCU0L7Qu9C20L3QviDQsdGL0YLRjCAzINGN0LvQtdC80LXQvdGC0LAuXG7Qn9C10YDQstGD0Y4g0Y/Rh9C10LnQutGDINGC0LDQsdC70LjRhtGLICjRgdC+INGB0LvQvtCy0L7QvCBcItCS0L7Qt9GA0LDRgdGCXCIpLlxu0JLRgtC+0YDRg9GOINGE0L7RgNC80YMg0LIg0LTQvtC60YPQvNC10L3RgtC1Llxu0KTQvtGA0LzRgyDRgSDQuNC80LXQvdC10Lwgc2VhcmNoLCDQsdC10Lcg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LXRkSDQv9C+0LfQuNGG0LjQuCDQsiDQtNC+0LrRg9C80LXQvdGC0LUuXG7QrdC70LXQvNC10L3RgiBpbnB1dCDQsiDRhNC+0YDQvNC1INGBINC40LzQtdC90LXQvCBzZWFyY2guINCV0YHQu9C4INC40YUg0L3QtdGB0LrQvtC70YzQutC+LCDRgtC+INC90YPQttC10L0g0L/QtdGA0LLRi9C5Llxu0K3Qu9C10LzQtdC90YIg0YEg0LjQvNC10L3QtdC8IGluZm9bMF0sINCx0LXQtyDRgtC+0YfQvdC+0LPQviDQt9C90LDQvdC40Y8g0LXQs9C+INC/0L7Qt9C40YbQuNC4INCyINC00L7QutGD0LzQtdC90YLQtS5cbtCt0LvQtdC80LXQvdGCINGBINC40LzQtdC90LXQvCBpbmZvWzBdLCDQstC90YPRgtGA0Lgg0YTQvtGA0LzRiyDRgSDQuNC80LXQvdC10Lwgc2VhcmNoLXBlcnNvbi5cbiovXG5cbmZ1bmN0aW9uIHRhc2sxICgpIHtcbiAgXG4gIGxldCBsYWJlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZSBsYWJlbCcpXG4gIGxldCBhZ2VDZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGFibGUgdGQnKVxuICBcbiAgbGV0IHNlY29uZEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtW25hbWU9c2VhcmNoLXBlcnNvbl0nKVxuICBsZXQgc2Vjb25kRm9ybTEgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnc2VhcmNoLXBlcnNvbicpXG5cbiAgbGV0IGZpcnN0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm1bbmFtZT1zZWFyY2hdJylcbiAgbGV0IGZpcnN0Rm9ybTEgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnc2VhcmNoJylcbiAgbGV0IGZpcnN0SW5wdXRJbkZpcnN0Rm9ybSA9IGZpcnN0Rm9ybVswXS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXG5cbiAgbGV0IGluZm9aZXJvSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbmFtZT1cImluZm9bMF1cIl0nKVxuICBsZXQgc2Vjb25kRm9ybVplcm9JbnB1dCA9IHNlY29uZEZvcm1bMF0ucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9XCJpbmZvWzBdXCJdJylcblxuXG4gIC8qRW5saWdodG1lbnQ6XG4gICAgXG4gICAgLSBxdWVyeVNlbGVjdG9yQWxsIHJldHVybnMgYSBDb2xsZWN0aW9uLCBub3QgYW4gRWxlbWVudCBpdHNlbGYuXG4gICAgICBBZGQgZGlyZWN0IGFjY2VzcyB3aXRoIFswXSBmb3IgZXhhbXBsZSwgb3IgdXNlIGl0ZXJhdGlvblxuXG4gICAgICBTYW1lIGZvciBhbnkgZ2V0RWxlbWVudHNgVHlwZWAgcXVlcmllc1xuXG4gICAgLSB3cmFwIGluIHN0cmluZyBxdW90YXRpb24gXCJcIiB0byBlc2NhcGUgWyBhbmQgXSBjaGFyYWN0ZXJzIGluc2lkZSBxdWVyeS5cbiAgKi9cbn1cblxuXG5cblxuLypcbtCV0YHRgtGMINC00LXRgNC10LLQviDQuNC3INGC0LXQs9C+0LIgPHVsPi88bGk+LlxuXG7QndCw0L/QuNGI0LjRgtC1INC60L7QtCwg0LrQvtGC0L7RgNGL0Lkg0LTQu9GPINC60LDQttC00L7Qs9C+INGN0LvQtdC80LXQvdGC0LAgPGxpPiDQstGL0LLQtdC00LXRgjpcblxu0KLQtdC60YHRgiDQvdC10L/QvtGB0YDQtdC00YHRgtCy0LXQvdC90L4g0LIg0L3RkdC8ICjQsdC10Lcg0L/QvtC00YDQsNC30LTQtdC70L7QsikuXG7QmtC+0LvQuNGH0LXRgdGC0LLQviDQstC70L7QttC10L3QvdGL0YUg0LIg0L3QtdCz0L4g0Y3Qu9C10LzQtdC90YLQvtCyIDxsaT4g4oCUINCy0YHQtdGFLCDRgSDRg9GH0ZHRgtC+0Lwg0LLQu9C+0LbQtdC90L3Ri9GFLlxuKi9cblxuZnVuY3Rpb24gdGFzazIgKCkge1xuXG4gIGxldCBnZXRJdGVtSW5mbyA9ICh1bCkgPT4ge1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXG4gICAgICB1bC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXG4gICAgICxsaSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGxpLmZpcnN0Q2hpbGQuZGF0YS50cmltKCksIGxpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykubGVuZ3RoKVxuICAgICAgfVxuICAgIClcbiAgfVxuICBnZXRJdGVtSW5mbyggZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlc3QnKSApXG5cbiAgLypcbiAgRW5saWdodG1lbnQ6IHVzZSAuZGF0YSB0byBnZXQgaW5uZXIgY29udGVudCBvZiBub2RlXG4gICAgICAgICAgICAgICB1c2UgLnRyaW0oKSB0byByZW1vdmUgXFxuIGNoYXJhY3RlcnNcblxuICAqL1xufVxudGFzazIoKVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
