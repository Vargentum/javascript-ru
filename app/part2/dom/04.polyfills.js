"use strict";

/*
Метод elem.matches(css) в некоторых старых браузерах поддерживается 
под старым именем matchesSelector или с префиксами,
то есть: webkitMatchesSelector (старый Chrome, Safari),
mozMatchesSelector (старый Firefox) 
или Element.prototype.msMatchesSelector (старый IE).

Создайте полифилл, который гарантирует стандартный синтаксис 
elem.matches(css) для всех браузеров.

*/

function task1() {

  if (!Element.prototype.matches) {

    Element.prototype.matches = function (cssQuery) {

      return this.matchesSelector || this.webkitMatchesSelector || this.mozMatchesSelector || this.msMatchesSelector;
    };
  }
}

/*
  Enlightment: write following method into prototype.matches
               make check `before` method implementation
*/

/*
Метод elem.closest(css) для поиска ближайшего родителя,
удовлетворяющего селектору css, не поддерживается некоторыми браузерами, например IE11-.

Создайте для него полифилл.

*/

function task2() {

  if (!Element.prototype.closest) {

    Element.prototype.closest = function (cssQuery) {
      var _this = this;

      [].prototype.forEach.call(this.querySelectorAll(cssQuery), function (el) {
        if (el === _this.parentElement) return true;
      });
      return false;
    };
  }
}

/*
Свойство textContent не поддерживается IE8. Однако, там есть свойство innerText.

Создаёте полифилл, который проверяет поддержку свойства textContent,
и если её нет — создаёт его, используя innerText.
Получится, что в IE8 «новое» свойство textContent будет «псевдонимом» для innerText.

Хотя свойство innerText и работает по-иному, нежели textContent,
но в некоторых ситуациях они могут быть взаимозаменимы. Именно на них направлен полифилл.

*/

function task3() {

  if (document.documentElement.textContent === undefined) {
    Object.defineProperty(HTMLElement.prototype, "textContent", {
      get: function get() {
        return this.innerText;
      },
      set: function set(val) {
        this.innerText = val;
      }
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjA0LnBvbHlmaWxscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQWFBLFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7O0FBRTlCLFdBQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVMsUUFBUSxFQUFFOztBQUU3QyxhQUFTLElBQUksQ0FBQyxlQUFlLElBQ3BCLElBQUksQ0FBQyxxQkFBcUIsSUFDMUIsSUFBSSxDQUFDLGtCQUFrQixJQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUE7S0FDaEMsQ0FBQTtHQUNGO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBbUJELFNBQVMsS0FBSyxHQUFJOztBQUVoQixNQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7O0FBRTlCLFdBQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVMsUUFBUSxFQUFFOzs7QUFDN0MsUUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFDLEVBQUUsRUFBSztBQUNqRSxZQUFJLEVBQUUsS0FBSyxNQUFLLGFBQWEsRUFBRSxPQUFPLElBQUksQ0FBQztPQUM1QyxDQUFDLENBQUE7QUFDRixhQUFPLEtBQUssQ0FBQTtLQUNiLENBQUE7R0FFRjtDQUNGOzs7Ozs7Ozs7Ozs7OztBQUFBLEFBZUQsU0FBUyxLQUFLLEdBQUc7O0FBRWYsTUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7QUFDdEQsVUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRTtBQUMxRCxTQUFHLEVBQUUsZUFBVztBQUNkLGVBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtPQUN0QjtBQUNELFNBQUcsRUFBRSxhQUFTLEdBQUcsRUFBRTtBQUNqQixZQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQTtPQUNyQjtLQUNGLENBQUMsQ0FBQTtHQUNIO0NBQ0YiLCJmaWxlIjoicGFydDIvZG9tLzA0LnBvbHlmaWxscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG7QnNC10YLQvtC0IGVsZW0ubWF0Y2hlcyhjc3MpINCyINC90LXQutC+0YLQvtGA0YvRhSDRgdGC0LDRgNGL0YUg0LHRgNCw0YPQt9C10YDQsNGFINC/0L7QtNC00LXRgNC20LjQstCw0LXRgtGB0Y8gXG7Qv9C+0LQg0YHRgtCw0YDRi9C8INC40LzQtdC90LXQvCBtYXRjaGVzU2VsZWN0b3Ig0LjQu9C4INGBINC/0YDQtdGE0LjQutGB0LDQvNC4LFxu0YLQviDQtdGB0YLRjDogd2Via2l0TWF0Y2hlc1NlbGVjdG9yICjRgdGC0LDRgNGL0LkgQ2hyb21lLCBTYWZhcmkpLFxubW96TWF0Y2hlc1NlbGVjdG9yICjRgdGC0LDRgNGL0LkgRmlyZWZveCkgXG7QuNC70LggRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgKNGB0YLQsNGA0YvQuSBJRSkuXG5cbtCh0L7Qt9C00LDQudGC0LUg0L/QvtC70LjRhNC40LvQuywg0LrQvtGC0L7RgNGL0Lkg0LPQsNGA0LDQvdGC0LjRgNGD0LXRgiDRgdGC0LDQvdC00LDRgNGC0L3Ri9C5INGB0LjQvdGC0LDQutGB0LjRgSBcbmVsZW0ubWF0Y2hlcyhjc3MpINC00LvRjyDQstGB0LXRhSDQsdGA0LDRg9C30LXRgNC+0LIuXG5cbiovXG5cblxuZnVuY3Rpb24gdGFzazEgKCkge1xuXG4gIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuXG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uKGNzc1F1ZXJ5KSB7XG5cbiAgICAgIHJldHVybiAgIHRoaXMubWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgICB8fCB0aGlzLndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgdGhpcy5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICAgIHx8IHRoaXMubXNNYXRjaGVzU2VsZWN0b3JcbiAgICB9XG4gIH1cbn1cblxuLypcbiAgRW5saWdodG1lbnQ6IHdyaXRlIGZvbGxvd2luZyBtZXRob2QgaW50byBwcm90b3R5cGUubWF0Y2hlc1xuICAgICAgICAgICAgICAgbWFrZSBjaGVjayBgYmVmb3JlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbiovXG5cblxuXG5cbi8qXG7QnNC10YLQvtC0IGVsZW0uY2xvc2VzdChjc3MpINC00LvRjyDQv9C+0LjRgdC60LAg0LHQu9C40LbQsNC50YjQtdCz0L4g0YDQvtC00LjRgtC10LvRjyxcbtGD0LTQvtCy0LvQtdGC0LLQvtGA0Y/RjtGJ0LXQs9C+INGB0LXQu9C10LrRgtC+0YDRgyBjc3MsINC90LUg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGC0YHRjyDQvdC10LrQvtGC0L7RgNGL0LzQuCDQsdGA0LDRg9C30LXRgNCw0LzQuCwg0L3QsNC/0YDQuNC80LXRgCBJRTExLS5cblxu0KHQvtC30LTQsNC50YLQtSDQtNC70Y8g0L3QtdCz0L4g0L/QvtC70LjRhNC40LvQuy5cblxuKi9cblxuXG5mdW5jdGlvbiB0YXNrMiAoKSB7XG4gIFxuICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcblxuICAgIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbihjc3NRdWVyeSkge1xuICAgICAgW10ucHJvdG90eXBlLmZvckVhY2guY2FsbCh0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoY3NzUXVlcnkpLCAoZWwpID0+IHtcbiAgICAgICAgaWYgKGVsID09PSB0aGlzLnBhcmVudEVsZW1lbnQpIHJldHVybiB0cnVlO1xuICAgICAgfSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICB9XG59XG5cblxuLypcbtCh0LLQvtC50YHRgtCy0L4gdGV4dENvbnRlbnQg0L3QtSDQv9C+0LTQtNC10YDQttC40LLQsNC10YLRgdGPIElFOC4g0J7QtNC90LDQutC+LCDRgtCw0Lwg0LXRgdGC0Ywg0YHQstC+0LnRgdGC0LLQviBpbm5lclRleHQuXG5cbtCh0L7Qt9C00LDRkdGC0LUg0L/QvtC70LjRhNC40LvQuywg0LrQvtGC0L7RgNGL0Lkg0L/RgNC+0LLQtdGA0Y/QtdGCINC/0L7QtNC00LXRgNC20LrRgyDRgdCy0L7QudGB0YLQstCwIHRleHRDb250ZW50LFxu0Lgg0LXRgdC70Lgg0LXRkSDQvdC10YIg4oCUINGB0L7Qt9C00LDRkdGCINC10LPQviwg0LjRgdC/0L7Qu9GM0LfRg9GPIGlubmVyVGV4dC5cbtCf0L7Qu9GD0YfQuNGC0YHRjywg0YfRgtC+INCyIElFOCDCq9C90L7QstC+0LXCuyDRgdCy0L7QudGB0YLQstC+IHRleHRDb250ZW50INCx0YPQtNC10YIgwqvQv9GB0LXQstC00L7QvdC40LzQvtC8wrsg0LTQu9GPIGlubmVyVGV4dC5cblxu0KXQvtGC0Y8g0YHQstC+0LnRgdGC0LLQviBpbm5lclRleHQg0Lgg0YDQsNCx0L7RgtCw0LXRgiDQv9C+LdC40L3QvtC80YMsINC90LXQttC10LvQuCB0ZXh0Q29udGVudCxcbtC90L4g0LIg0L3QtdC60L7RgtC+0YDRi9GFINGB0LjRgtGD0LDRhtC40Y/RhSDQvtC90Lgg0LzQvtCz0YPRgiDQsdGL0YLRjCDQstC30LDQuNC80L7Qt9Cw0LzQtdC90LjQvNGLLiDQmNC80LXQvdC90L4g0L3QsCDQvdC40YUg0L3QsNC/0YDQsNCy0LvQtdC9INC/0L7Qu9C40YTQuNC70LsuXG5cbiovXG5cbmZ1bmN0aW9uIHRhc2szKCkge1xuXG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUsIFwidGV4dENvbnRlbnRcIiwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJUZXh0XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy5pbm5lclRleHQgPSB2YWxcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
