'use strict';

/*
  Form element change events:


    - change: when change value of element. for input / textarea fires, when focus lost


    - input: instantly fires when change value of element. 
             Use instead of keydown / keypress if you need to get value


    - cut / copy / paste: can't get NEW data, 
                          so useful only if you need to prevent following action
*/

/*Task 1

  Создайте интерфейс для автоматического вычисления процентов по вкладу.
  Ставка фиксирована: 12% годовых. 
  При включённом поле «капитализация» – проценты приплюсовываются к сумме вклада каждый месяц (сложный процент).

  http://plnkr.co/edit/U6GC8uhFta4Kfejr4iXr?p=preview
*/

function task1() {
  var rate = 0.12;
  var elementsTemplate = [{
    name: 'money',
    value: 'value',
    event: 'input'
  }, {
    name: 'months',
    value: 'value',
    event: 'input'
  }, {
    name: 'capitalization',
    value: 'checked',
    event: 'change'
  }];
  var formElements = document.forms.calculator.elements;
  var data = {};

  var calcSimple = function calcSimple(sum, years) {
    return sum += sum * rate * years;
  };
  var calcComplex = function calcComplex(sum, years) {
    return sum * Math.pow(1 + rate, years);
  };

  var calcPersent = function calcPersent(data) {
    var money = data.money;
    var months = data.months;
    var capitalization = data.capitalization;

    var result = 0;
    var sum = parseInt(money) || 0;
    var years = months / 12;

    if (capitalization) {
      result = calcComplex(sum, years);
    } else {
      result = calcSimple(sum, years);
    }
    return Math.floor(result);
  };

  var setPersent = function setPersent(e) {
    var sum = data.money || 0;

    var toHeight = function toHeight(val) {
      if (sum === 0) return '0';
      return val / (sum / 100) + 'px';
    };

    //fill data
    elementsTemplate.reduce(function (data, elem) {
      var name = elem.name;
      var value = elem.value;

      data[name] = formElements[name][value];
      return data;
    }, data);

    document.querySelector('#money-before').textContent = sum;
    document.querySelector('#money-after').textContent = calcPersent(data);
    document.querySelector('#money-before-bar').style.height = toHeight(sum);
    document.querySelector('#money-after-bar').style.height = toHeight(calcPersent(data));
  };

  formElements.money.addEventListener('input', function (e) {
    if (isNaN(this.value)) {
      this.value = data.money || 0;
      return;
    };
    data.money = this.value || 0;
  });

  elementsTemplate.forEach(function (elem) {
    var name = elem.name;
    var event = elem.event;

    formElements[name].addEventListener(event, setPersent);
  });

  setPersent();
}
task1();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAzLmZvcm1fY2hhbmdlX2V2ZW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSxTQUFTLEtBQUssR0FBSTtBQUNoQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUE7QUFDakIsTUFBTSxnQkFBZ0IsR0FDdEIsQ0FBQztBQUNDLFFBQUksRUFBRSxPQUFPO0FBQ2IsU0FBSyxFQUFFLE9BQU87QUFDZCxTQUFLLEVBQUUsT0FBTztHQUNmLEVBQUU7QUFDRCxRQUFJLEVBQUUsUUFBUTtBQUNkLFNBQUssRUFBRSxPQUFPO0FBQ2QsU0FBSyxFQUFFLE9BQU87R0FDZixFQUFFO0FBQ0QsUUFBSSxFQUFFLGdCQUFnQjtBQUN0QixTQUFLLEVBQUUsU0FBUztBQUNoQixTQUFLLEVBQUUsUUFBUTtHQUNoQixDQUFDLENBQUE7QUFDRixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUE7QUFDdkQsTUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFBOztBQUViLE1BQU0sVUFBVSxHQUFJLFNBQWQsVUFBVSxDQUFLLEdBQUcsRUFBRSxLQUFLO1dBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsS0FBSztHQUFBLENBQUE7QUFDN0QsTUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFXLENBQUksR0FBRyxFQUFFLEtBQUs7V0FBSyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLEdBQUcsSUFBSSxFQUFHLEtBQUssQ0FBQztHQUFBLENBQUE7O0FBRXJFLE1BQU0sV0FBVyxHQUFHLFNBQWQsV0FBVyxDQUFHLElBQUksRUFBSTtRQUNyQixLQUFLLEdBQTRCLElBQUksQ0FBckMsS0FBSztRQUFFLE1BQU0sR0FBb0IsSUFBSSxDQUE5QixNQUFNO1FBQUUsY0FBYyxHQUFJLElBQUksQ0FBdEIsY0FBYzs7QUFDbEMsUUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQ2QsUUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QixRQUFJLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFBOztBQUV2QixRQUFJLGNBQWMsRUFBRTtBQUNsQixZQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtLQUNqQyxNQUFNO0FBQ0wsWUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7S0FDaEM7QUFDRCxXQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDMUIsQ0FBQTs7QUFFRCxNQUFJLFVBQVUsR0FBRyxTQUFiLFVBQVUsQ0FBRyxDQUFDLEVBQUk7QUFDcEIsUUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUE7O0FBRXpCLFFBQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFHLEdBQUcsRUFBSTtBQUNwQixVQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUE7QUFDekIsYUFBTyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsSUFBSSxDQUFBO0tBQ2hDOzs7QUFBQSxBQUdELG9CQUFnQixDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxJQUFJLEVBQUs7VUFDakMsSUFBSSxHQUFXLElBQUksQ0FBbkIsSUFBSTtVQUFFLEtBQUssR0FBSSxJQUFJLENBQWIsS0FBSzs7QUFDaEIsVUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN0QyxhQUFPLElBQUksQ0FBQTtLQUNaLEVBQUUsSUFBSSxDQUFDLENBQUE7O0FBRVIsWUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLEdBQVEsR0FBRyxDQUFBO0FBQzlELFlBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxHQUFTLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM1RSxZQUFRLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDeEUsWUFBUSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0dBQ3ZGLENBQUE7O0FBRUQsY0FBWSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBUyxDQUFDLEVBQUU7QUFDdkQsUUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3JCLFVBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUE7QUFDNUIsYUFBTTtLQUNQLENBQUM7QUFDRixRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFBO0dBQzdCLENBQUMsQ0FBQTs7QUFFRixrQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUk7UUFDMUIsSUFBSSxHQUFXLElBQUksQ0FBbkIsSUFBSTtRQUFFLEtBQUssR0FBSSxJQUFJLENBQWIsS0FBSzs7QUFDaEIsZ0JBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUE7R0FDdkQsQ0FBQyxDQUFBOztBQUVGLFlBQVUsRUFBRSxDQUFBO0NBQ2I7QUFDRCxLQUFLLEVBQUUsQ0FBQSIsImZpbGUiOiJwYXJ0Mi9mb3Jtcy8wMy5mb3JtX2NoYW5nZV9ldmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBGb3JtIGVsZW1lbnQgY2hhbmdlIGV2ZW50czpcblxuXG4gICAgLSBjaGFuZ2U6IHdoZW4gY2hhbmdlIHZhbHVlIG9mIGVsZW1lbnQuIGZvciBpbnB1dCAvIHRleHRhcmVhIGZpcmVzLCB3aGVuIGZvY3VzIGxvc3RcblxuXG4gICAgLSBpbnB1dDogaW5zdGFudGx5IGZpcmVzIHdoZW4gY2hhbmdlIHZhbHVlIG9mIGVsZW1lbnQuIFxuICAgICAgICAgICAgIFVzZSBpbnN0ZWFkIG9mIGtleWRvd24gLyBrZXlwcmVzcyBpZiB5b3UgbmVlZCB0byBnZXQgdmFsdWVcblxuXG4gICAgLSBjdXQgLyBjb3B5IC8gcGFzdGU6IGNhbid0IGdldCBORVcgZGF0YSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvIHVzZWZ1bCBvbmx5IGlmIHlvdSBuZWVkIHRvIHByZXZlbnQgZm9sbG93aW5nIGFjdGlvblxuKi9cblxuXG5cbi8qVGFzayAxXG5cbiAg0KHQvtC30LTQsNC50YLQtSDQuNC90YLQtdGA0YTQtdC50YEg0LTQu9GPINCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC+0LPQviDQstGL0YfQuNGB0LvQtdC90LjRjyDQv9GA0L7RhtC10L3RgtC+0LIg0L/QviDQstC60LvQsNC00YMuXG4gINCh0YLQsNCy0LrQsCDRhNC40LrRgdC40YDQvtCy0LDQvdCwOiAxMiUg0LPQvtC00L7QstGL0YUuIFxuICDQn9GA0Lgg0LLQutC70Y7Rh9GR0L3QvdC+0Lwg0L/QvtC70LUgwqvQutCw0L/QuNGC0LDQu9C40LfQsNGG0LjRj8K7IOKAkyDQv9GA0L7RhtC10L3RgtGLINC/0YDQuNC/0LvRjtGB0L7QstGL0LLQsNGO0YLRgdGPINC6INGB0YPQvNC80LUg0LLQutC70LDQtNCwINC60LDQttC00YvQuSDQvNC10YHRj9GGICjRgdC70L7QttC90YvQuSDQv9GA0L7RhtC10L3RgikuXG5cbiAgaHR0cDovL3BsbmtyLmNvL2VkaXQvVTZHQzh1aEZ0YTRLZmVqcjRpWHI/cD1wcmV2aWV3XG4qL1xuXG5mdW5jdGlvbiB0YXNrMSAoKSB7XG4gIGNvbnN0IHJhdGUgPSAwLjEyXG4gIGNvbnN0IGVsZW1lbnRzVGVtcGxhdGUgPSBcbiAgW3tcbiAgICBuYW1lOiAnbW9uZXknLFxuICAgIHZhbHVlOiAndmFsdWUnLFxuICAgIGV2ZW50OiAnaW5wdXQnXG4gIH0sIHtcbiAgICBuYW1lOiAnbW9udGhzJyxcbiAgICB2YWx1ZTogJ3ZhbHVlJyxcbiAgICBldmVudDogJ2lucHV0J1xuICB9LCB7XG4gICAgbmFtZTogJ2NhcGl0YWxpemF0aW9uJyxcbiAgICB2YWx1ZTogJ2NoZWNrZWQnLFxuICAgIGV2ZW50OiAnY2hhbmdlJ1xuICB9XVxuICBjb25zdCBmb3JtRWxlbWVudHMgPSBkb2N1bWVudC5mb3Jtcy5jYWxjdWxhdG9yLmVsZW1lbnRzXG4gIGxldCBkYXRhID0ge31cblxuICBjb25zdCBjYWxjU2ltcGxlICA9IChzdW0sIHllYXJzKSA9PiBzdW0gKz0gc3VtICogcmF0ZSAqIHllYXJzXG4gIGNvbnN0IGNhbGNDb21wbGV4ID0gKHN1bSwgeWVhcnMpID0+IHN1bSAqIE1hdGgucG93KCgxICsgcmF0ZSksIHllYXJzKVxuXG4gIGNvbnN0IGNhbGNQZXJzZW50ID0gZGF0YSA9PiB7XG4gICAgbGV0IHttb25leSwgbW9udGhzLCBjYXBpdGFsaXphdGlvbn0gPSBkYXRhXG4gICAgbGV0IHJlc3VsdCA9IDBcbiAgICBsZXQgc3VtID0gcGFyc2VJbnQobW9uZXkpIHx8IDBcbiAgICBsZXQgeWVhcnMgPSBtb250aHMgLyAxMlxuICAgIFxuICAgIGlmIChjYXBpdGFsaXphdGlvbikge1xuICAgICAgcmVzdWx0ID0gY2FsY0NvbXBsZXgoc3VtLCB5ZWFycylcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gY2FsY1NpbXBsZShzdW0sIHllYXJzKVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5mbG9vcihyZXN1bHQpXG4gIH1cblxuICBsZXQgc2V0UGVyc2VudCA9IGUgPT4ge1xuICAgIGxldCBzdW0gPSBkYXRhLm1vbmV5IHx8IDBcbiAgICBcbiAgICBsZXQgdG9IZWlnaHQgPSB2YWwgPT4ge1xuICAgICAgaWYgKHN1bSA9PT0gMCkgcmV0dXJuICcwJ1xuICAgICAgcmV0dXJuIHZhbCAvIChzdW0gLyAxMDApICsgJ3B4J1xuICAgIH1cbiAgICBcbiAgICAvL2ZpbGwgZGF0YVxuICAgIGVsZW1lbnRzVGVtcGxhdGUucmVkdWNlKChkYXRhLCBlbGVtKSA9PiB7XG4gICAgICBsZXQge25hbWUsIHZhbHVlfSA9IGVsZW1cbiAgICAgIGRhdGFbbmFtZV0gPSBmb3JtRWxlbWVudHNbbmFtZV1bdmFsdWVdXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0sIGRhdGEpXG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9uZXktYmVmb3JlJykudGV4dENvbnRlbnQgICAgICA9IHN1bVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb25leS1hZnRlcicpLnRleHRDb250ZW50ICAgICAgID0gY2FsY1BlcnNlbnQoZGF0YSlcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9uZXktYmVmb3JlLWJhcicpLnN0eWxlLmhlaWdodCA9IHRvSGVpZ2h0KHN1bSlcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9uZXktYWZ0ZXItYmFyJykuc3R5bGUuaGVpZ2h0ICA9IHRvSGVpZ2h0KGNhbGNQZXJzZW50KGRhdGEpKVxuICB9XG5cbiAgZm9ybUVsZW1lbnRzLm1vbmV5LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZSkge1xuICAgIGlmIChpc05hTih0aGlzLnZhbHVlKSkge1xuICAgICAgdGhpcy52YWx1ZSA9IGRhdGEubW9uZXkgfHwgMFxuICAgICAgcmV0dXJuXG4gICAgfTtcbiAgICBkYXRhLm1vbmV5ID0gdGhpcy52YWx1ZSB8fCAwXG4gIH0pXG5cbiAgZWxlbWVudHNUZW1wbGF0ZS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgIGxldCB7bmFtZSwgZXZlbnR9ID0gZWxlbVxuICAgIGZvcm1FbGVtZW50c1tuYW1lXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzZXRQZXJzZW50KVxuICB9KVxuXG4gIHNldFBlcnNlbnQoKVxufVxudGFzazEoKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
