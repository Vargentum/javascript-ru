'use strict';

/*
  Events

    focus - when user focuses on input / textarea /selectbox
    blur - when focus lost

    no bubbling, but can be triggered on Capturing phase
   
    focusin / focusout - same, but bubbles
      no FF support :(


  tabIndex

    control focus with `tab` order: number value
    ! any elem with tabIndex has blur / focus events !
    
    some values:
      0 - make element focused last
      -1 - ignore tab on element


*/

function example1() {

  age.onblur = function (e) {

    if (isNaN(age.value)) {
      age.classList.add('error');
      age.focus();
    } else {
      age.classList.remove('error');
    }
  };
}
example1();

/*Task 1

Реализуйте более удобный плейсхолдер-подсказку на JavaScript через атрибут data-placeholder.

Правила работы плейсхолдера:
  Элемент изначально содержит плейсхолдер. Специальный класс placeholder придает ему синий цвет.
  При фокусировке плейсхолдер показывается уже над полем, становясь «подсказкой».
  При снятии фокуса, подсказка убирается, если поле пустое – плейсхолдер возвращается в него.
*/

function task1() {
  var form = document.getElementById('placeholderWrap');
  var tip = null;
  var isContainsPlaceholder = function isContainsPlaceholder(input) {
    return input.dataset.placeholder;
  };
  var createTip = function createTip(value) {
    var tip = document.createElement('span');
    tip.classList.add('placeholder-tooltip');
    tip.innerHTML = value;
    document.body.appendChild(tip);
    return tip;
  };

  var setPlaceholderFor = function setPlaceholderFor(input) {
    input.value = input.dataset.placeholder;
  };

  document.addEventListener('DOMContentLoaded', function (e) {
    $('input[data-placeholder]').forEach(function (input) {
      setPlaceholderFor(input);
    });
  });

  form.addEventListener('focus', function (e) {
    var input = e.target;

    if (!isContainsPlaceholder(input)) return false;
    input.value = '';
    tip = createTip(input.dataset.placeholder);
    tip.style.top = input.offsetTop - tip.offsetHeight + 'px';
    tip.style.left = input.offsetLeft + 'px';
  }, true);

  form.addEventListener('blur', function (e) {
    var input = e.target;
    if (!isContainsPlaceholder(input)) return false;
    setPlaceholderFor(input);
    tip.parentElement.removeChild(tip);
  }, true);
}
task1();

/*Enlightment:
  instead of clojure `tip` you can use element.tip (custom dom property)
  useful, if you need to show 2 or more `tips`
*/

/*Task 2
 Кликните по мышонку. Затем нажимайте клавиши со стрелками, и он будет двигаться.
В этой задаче запрещается ставить обработчики куда-либо, кроме элемента #mouse.
Можно изменять атрибуты и классы в HTML.

http://plnkr.co/edit/kLh0yqbi6ircDNH4MSdW?p=preview
*/

function task2() {
  var mouse = document.getElementById('mouse');
  var directions = ['left', 'top', 'right', 'bottom'];
  var isArrow = function isArrow(type, code) {
    switch (type) {
      case 'left':
        return code === 37;
      case 'top':
        return code === 38;
      case 'right':
        return code === 39;
      case 'bottom':
        return code === 40;
      default:
        return false;
    }
  };
  var shift = function shift(elem, dir) {
    var step = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];

    switch (dir) {
      case 'left':
        elem.style.left = (parseInt(elem.style.left) || 0) - step + 'px';break;
      case 'right':
        elem.style.left = (parseInt(elem.style.left) || 0) + step + 'px';break;
      case 'top':
        elem.style.top = (parseInt(elem.style.top) || 0) - step + 'px';break;
      case 'bottom':
        elem.style.top = (parseInt(elem.style.top) || 0) + step + 'px';break;
      default:
        return false;
    }
  };

  mouse.addEventListener('keydown', function (e) {
    var _this = this;

    directions.forEach(function (dir) {
      if (!isArrow(dir, e.keyCode)) return;
      shift(_this, dir);
    });
  });
}
task2();

/*Task 3

Создайте <div>, который при нажатии Ctrl+E превращается в <textarea>.
Изменения, внесенные в поле, можно сохранить обратно в <div> сочетанием клавиш Ctrl+S, при этом 
<div> получит в виде HTML содержимое <textarea>.

Если же нажать Esc, то <textarea> снова превращается в <div>, изменения не сохраняются.
*/

function task3() {
  var types = {
    static: 'div',
    editable: 'textarea'
  };
  var checkHotkey = function checkHotkey(e, key) {
    return e.keyCode === key.toUpperCase().charCodeAt(0) && e.ctrlKey;
  };
  var checkEscapeKey = function checkEscapeKey(e) {
    return e.keyCode === 27;
  };
  var cloneAs = function cloneAs(src, type) {
    var clone = document.createElement(type);
    $$(src.attributes).forEach(function (attr) {
      clone.setAttribute(attr.name, attr);
    });
    return clone;
  };

  var Editable = function Editable(content, keydownHandler, src) {
    var elem = cloneAs(src, 'textarea');
    elem.addEventListener('keydown', keydownHandler);
    elem.value = content;
    return elem;
  };

  var Static = function Static(content, keydownHandler, src) {
    var elem = cloneAs(src, 'div');
    elem.addEventListener('keydown', keydownHandler);
    elem.textContent = content;
    return elem;
  };

  $('[data-editable]').forEach(function (elem) {
    var lastSavedTxt = '';

    var handler = function handler(e) {
      var replacer = null;
      // editing static
      if (checkHotkey(e, "E") && this.tagName.toLowerCase() === types.static) {
        replacer = new Editable(this.textContent, handler, this);
      }
      // saving
      else if (checkHotkey(e, "S")) {
          lastSavedTxt = this.value;
          replacer = new Static(this.value, handler, this);
        }
        // unsaved
        else if (checkEscapeKey(e)) {
            replacer = new Static(lastSavedTxt, handler, this);
          }
          // ignore other keys
          else {
              return;
            }

      this.parentElement.replaceChild(replacer, this);
      replacer.focus();
    };

    elem.addEventListener('keydown', handler);
  });
}
task3();

/*Task 4
Сделать ячейки таблицы td редактируемыми по клику.

При клике – ячейка <td> превращается в редактируемую, можно менять HTML.

Размеры ячеек при этом не должны меняться.
В один момент может редактироваться одна ячейка.

При редактировании под ячейкой появляются кнопки для приема и отмена редактирования,
только клик на них заканчивает редактирование.

*/

function task4() {
  var Editable = function Editable(origin) {
    this.parent = origin;
    this.area = document.createElement('textarea');
    this.area.classList.add('cell-editable');
    this.area.value = origin.innerHTML;
  };
  Editable.prototype.destroy = function () {
    this.parent.removeChild(this.area);
    this.parent.removeChild(this.controls);
    return this;
  };
  Editable.prototype.init = function () {
    this.parent.appendChild(this.area);
    this.parent.appendChild(this.controls);
    this.area.focus();
    return this;
  };
  Editable.prototype.createControls = function (controlsTemplate) {
    var _this2 = this;

    this.controls = document.createElement('div');
    this.controls.classList.add('editable-control-wrap');

    controlsTemplate.forEach(function (control) {
      var btn = document.createElement('button');
      btn.classList.add('editable-control');
      btn.textContent = control.name;
      btn.onclick = control.handler;
      _this2.controls.appendChild(btn);
    });
    return this;
  };

  var isEditing = false;
  var table = document.getElementById('bagua-table');

  table.addEventListener('click', function (e) {
    var cell = e.target;

    if (isEditing || cell.tagName !== 'TD') return;

    isEditing = true;
    var lastSavedContent = cell.innerHTML;
    var editable = new Editable(cell);

    editable.createControls([{
      name: 'Save',
      handler: function handler(e) {
        editable.destroy();
        isEditing = false;
        cell.innerHTML = editable.area.value;
      }
    }, {
      name: 'Cancel',
      handler: function handler(e) {
        editable.destroy();
        isEditing = false;
        cell.innerHTML = lastSavedContent;
      }
    }]).init();
  });
}
task4();

/*Task 5
  Создайте для <input type="password"> красивый, стилизованный плейсхолдер, например (кликните на тексте):
  
  Пропустил: task1 аналогичный, только сложнее
*/

/*Task 6
  Создайте поле, которое будет предупреждать пользователя, если включен CapsLock. Выключение CapsLock уберёт предупреждение.

*/

function task6() {
  var Alert = function Alert(text) {
    var alert = document.createElement('span');
    alert.classList.add('error-alert');
    alert.textContent = text;
    return alert;
  };
  var capsLockCode = 20;

  $('[data-capslock-detect]').forEach(function (input) {
    var alert = null;

    input.onkeydown = function (e) {
      if (e.keyCode !== capsLockCode) return;
      alert = new Alert('Capslock enabled!');
      this.parentElement.appendChild(alert);
    };

    input.onkeyup = function (e) {
      if (e.keyCode !== capsLockCode || !alert) return;
      this.parentElement.removeChild(alert);
    };

    input.onblur = function (e) {
      if (!alert) return;
      this.parentElement.removeChild(alert);
    };

    input.onfocus = function (e) {
      var kv = new KeyboardEvent('keydown', {
        keyCode: capsLockCode
      });
      var ku = new KeyboardEvent('keyup');

      this.dispatchEvent(kv);
      this.dispatchEvent(ku);
    };
  });
}
task6();
//# sourceMappingURL=data:application/json;base64,
