'use strict';

/*
  Events

    focus - when user focuses on input / textarea /selectbox
    blur - when focus lost

    no bubbling, but can be triggered on Capturing phase
   
    focusin / focusout - same, but bubbles
      no FF support :(


  tabIndex

    control focus with `tab` order: number value
    ! any elem with tabIndex has blur / focus events !
    
    some values:
      0 - make element focused last
      -1 - ignore tab on element


*/

function example1() {

  age.onblur = function (e) {

    if (isNaN(age.value)) {
      age.classList.add('error');
      age.focus();
    } else {
      age.classList.remove('error');
    }
  };
}
example1();

/*Task 1

Реализуйте более удобный плейсхолдер-подсказку на JavaScript через атрибут data-placeholder.

Правила работы плейсхолдера:
  Элемент изначально содержит плейсхолдер. Специальный класс placeholder придает ему синий цвет.
  При фокусировке плейсхолдер показывается уже над полем, становясь «подсказкой».
  При снятии фокуса, подсказка убирается, если поле пустое – плейсхолдер возвращается в него.
*/

function task1() {
  var form = document.getElementById('placeholderWrap');
  var tip = null;
  var isContainsPlaceholder = function isContainsPlaceholder(input) {
    return input.dataset.placeholder;
  };
  var createTip = function createTip(value) {
    var tip = document.createElement('span');
    tip.classList.add('placeholder-tooltip');
    tip.innerHTML = value;
    document.body.appendChild(tip);
    return tip;
  };

  var setPlaceholderFor = function setPlaceholderFor(input) {
    input.value = input.dataset.placeholder;
  };

  document.addEventListener('DOMContentLoaded', function (e) {
    $('input[data-placeholder]').forEach(function (input) {
      setPlaceholderFor(input);
    });
  });

  form.addEventListener('focus', function (e) {
    var input = e.target;

    if (!isContainsPlaceholder(input)) return false;
    input.value = '';
    tip = createTip(input.dataset.placeholder);
    tip.style.top = input.offsetTop - tip.offsetHeight + 'px';
    tip.style.left = input.offsetLeft + 'px';
  }, true);

  form.addEventListener('blur', function (e) {
    var input = e.target;
    if (!isContainsPlaceholder(input)) return false;
    setPlaceholderFor(input);
    tip.parentElement.removeChild(tip);
  }, true);
}
task1();

/*Enlightment:
  instead of clojure `tip` you can use element.tip (custom dom property)
  useful, if you need to show 2 or more `tips`
*/

/*Task 2
 Кликните по мышонку. Затем нажимайте клавиши со стрелками, и он будет двигаться.
В этой задаче запрещается ставить обработчики куда-либо, кроме элемента #mouse.
Можно изменять атрибуты и классы в HTML.

http://plnkr.co/edit/kLh0yqbi6ircDNH4MSdW?p=preview
*/

function task2() {
  var mouse = document.getElementById('mouse');
  var directions = ['left', 'top', 'right', 'bottom'];
  var isArrow = function isArrow(type, code) {
    switch (type) {
      case 'left':
        return code === 37;
      case 'top':
        return code === 38;
      case 'right':
        return code === 39;
      case 'bottom':
        return code === 40;
      default:
        return false;
    }
  };
  var shift = function shift(elem, dir) {
    var step = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];

    switch (dir) {
      case 'left':
        elem.style.left = (parseInt(elem.style.left) || 0) - step + 'px';break;
      case 'right':
        elem.style.left = (parseInt(elem.style.left) || 0) + step + 'px';break;
      case 'top':
        elem.style.top = (parseInt(elem.style.top) || 0) - step + 'px';break;
      case 'bottom':
        elem.style.top = (parseInt(elem.style.top) || 0) + step + 'px';break;
      default:
        return false;
    }
  };

  mouse.addEventListener('keydown', function (e) {
    var _this = this;

    directions.forEach(function (dir) {
      if (!isArrow(dir, e.keyCode)) return;
      shift(_this, dir);
    });
  });
}
task2();

/*Task 3

Создайте <div>, который при нажатии Ctrl+E превращается в <textarea>.
Изменения, внесенные в поле, можно сохранить обратно в <div> сочетанием клавиш Ctrl+S, при этом 
<div> получит в виде HTML содержимое <textarea>.

Если же нажать Esc, то <textarea> снова превращается в <div>, изменения не сохраняются.
*/

function task3() {
  var types = {
    static: 'div',
    editable: 'textarea'
  };

  var checkHotkey = function checkHotkey(e, key) {
    return e.keyCode === key.toUpperCase().charCodeAt(0) && e.ctrlKey;
  };
  var checkEscapeKey = function checkEscapeKey(e) {
    return e.keyCode === 27;
  };

  var Editable = function Editable(content, keydownHandler) {
    var elem = document.createElement(types.editable);

    elem.setAttribute('data-editable', '');
    elem.setAttribute('tabIndex', -1);
    elem.addEventListener('keydown', keydownHandler);
    elem.value = content;
    return elem;
  };

  var Static = function Static(content, keydownHandler) {
    var elem = document.createElement(types.static);

    elem.setAttribute('data-editable', '');
    elem.setAttribute('tabIndex', -1);
    elem.addEventListener('keydown', keydownHandler);
    elem.textContent = content;
    return elem;
  };

  $('[data-editable]').forEach(function (elem) {
    var lastSavedTxt = '';

    var handler = function handler(e) {
      var replacer = null;
      // editing static
      if (checkHotkey(e, "E") && this.tagName.toLowerCase() === types.static) {
        replacer = new Editable(this.textContent, handler);
      }
      // saving
      else if (checkHotkey(e, "S")) {
          lastSavedTxt = this.value;
          replacer = new Static(this.value, handler);
        }
        // unsaved
        else if (checkEscapeKey(e)) {
            replacer = new Static(lastSavedTxt, handler);
          }
          // ignore other keys
          else {
              return;
            }

      this.parentElement.replaceChild(replacer, this);
      replacer.focus();
    };

    elem.addEventListener('keydown', handler);
  });
}
task3();

/*Task 4
Сделать ячейки таблицы td редактируемыми по клику.

При клике – ячейка <td> превращается в редактируемую, можно менять HTML.

Размеры ячеек при этом не должны меняться.
В один момент может редактироваться одна ячейка.

При редактировании под ячейкой появляются кнопки для приема и отмена редактирования,
только клик на них заканчивает редактирование.

*/

function task4() {
  var Editable = function Editable(origin) {
    this.parent = origin;
    this.area = document.createElement('textarea');
    this.area.classList.add('cell-editable');
    this.area.value = origin.innerHTML;
  };
  Editable.prototype.destroy = function () {
    this.parent.removeChild(this.area);
    this.parent.removeChild(this.controls);
    return this;
  };
  Editable.prototype.init = function () {
    this.parent.appendChild(this.area);
    this.parent.appendChild(this.controls);
    return this;
  };
  Editable.prototype.createControls = function (controlsTemplate) {
    var _this2 = this;

    this.controls = document.createElement('div');
    this.controls.classList.add('editable-control-wrap');

    controlsTemplate.forEach(function (control) {
      var btn = document.createElement('button');
      btn.classList.add('editable-control');
      btn.textContent = control.name;
      btn.onclick = control.handler;
      _this2.controls.appendChild(btn);
    });
    return this;
  };

  var activeCell = null;
  var table = document.getElementById('bagua-table');

  table.addEventListener('click', function (e) {
    var cell = e.target;
    var isValidCell = function isValidCell(cell) {
      return activeCell === cell || activeCell === null;
    };

    if (!isValidCell(cell) || cell.tagName !== 'TD') return;

    activeCell = cell;
    var lastSavedContent = cell.innerHTML;
    var editable = new Editable(cell);
    var area = editable.area;

    editable.createControls([{
      name: 'Save',
      handler: function handler(e) {
        editable.destroy();
        activeCell = null;
        cell.innerHTML = area.value;
      }
    }, {
      name: 'Cancel',
      handler: function handler(e) {
        editable.destroy();
        activeCell = null;
        cell.innerHTML = lastSavedContent;
      }
    }]).init();
  });
}
task4();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmZvY3VzX2JsdXJfZXZlbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLFNBQVMsUUFBUSxHQUFJOztBQUVuQixLQUFHLENBQUMsTUFBTSxHQUFHLFVBQUMsQ0FBQyxFQUFLOztBQUVsQixRQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDcEIsU0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDMUIsU0FBRyxDQUFDLEtBQUssRUFBRSxDQUFBO0tBQ1osTUFDSTtBQUNKLFNBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQzdCO0dBQ0YsQ0FBQTtDQUdGO0FBQ0QsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7QUFBQSxBQWNWLFNBQVMsS0FBSyxHQUFJO0FBQ2hCLE1BQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNyRCxNQUFJLEdBQUcsR0FBRyxJQUFJLENBQUE7QUFDZCxNQUFJLHFCQUFxQixHQUFHLFNBQXhCLHFCQUFxQixDQUFHLEtBQUs7V0FBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVc7R0FBQSxDQUFBO0FBQzlELE1BQUksU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFJLEtBQUssRUFBSztBQUN6QixRQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3hDLE9BQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDeEMsT0FBRyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUE7QUFDckIsWUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUIsV0FBTyxHQUFHLENBQUE7R0FDWCxDQUFBOztBQUVELE1BQUksaUJBQWlCLEdBQUcsU0FBcEIs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QUMsT0FBTyxFQUFFLENBQUE7QUFDbEIsa0JBQVUsR0FBRyxJQUFJLENBQUE7QUFDakIsWUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQTtPQUNsQztLQUNGLENBQ0YsQ0FBQyxDQUNELElBQUksRUFBRSxDQUFBO0dBQ1YsQ0FBQyxDQUFBO0NBRUg7QUFDRCxLQUFLLEVBQUUsQ0FBQSIsImZpbGUiOiJwYXJ0Mi9mb3Jtcy8wMi5mb2N1c19ibHVyX2V2ZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIEV2ZW50c1xuXG4gICAgZm9jdXMgLSB3aGVuIHVzZXIgZm9jdXNlcyBvbiBpbnB1dCAvIHRleHRhcmVhIC9zZWxlY3Rib3hcbiAgICBibHVyIC0gd2hlbiBmb2N1cyBsb3N0XG5cbiAgICBubyBidWJibGluZywgYnV0IGNhbiBiZSB0cmlnZ2VyZWQgb24gQ2FwdHVyaW5nIHBoYXNlXG4gICBcbiAgICBmb2N1c2luIC8gZm9jdXNvdXQgLSBzYW1lLCBidXQgYnViYmxlc1xuICAgICAgbm8gRkYgc3VwcG9ydCA6KFxuXG5cbiAgdGFiSW5kZXhcblxuICAgIGNvbnRyb2wgZm9jdXMgd2l0aCBgdGFiYCBvcmRlcjogbnVtYmVyIHZhbHVlXG4gICAgISBhbnkgZWxlbSB3aXRoIHRhYkluZGV4IGhhcyBibHVyIC8gZm9jdXMgZXZlbnRzICFcbiAgICBcbiAgICBzb21lIHZhbHVlczpcbiAgICAgIDAgLSBtYWtlIGVsZW1lbnQgZm9jdXNlZCBsYXN0XG4gICAgICAtMSAtIGlnbm9yZSB0YWIgb24gZWxlbWVudFxuXG5cbiovXG5cbmZ1bmN0aW9uIGV4YW1wbGUxICgpIHtcbiAgXG4gIGFnZS5vbmJsdXIgPSAoZSkgPT4ge1xuXG4gICAgaWYgKGlzTmFOKGFnZS52YWx1ZSkpIHtcbiAgICAgIGFnZS5jbGFzc0xpc3QuYWRkKCdlcnJvcicpXG4gICAgICBhZ2UuZm9jdXMoKVxuICAgIH0gXG4gICAgZWxzZSB7XG4gICAgIGFnZS5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpXG4gICAgfVxuICB9XG5cblxufVxuZXhhbXBsZTEoKVxuXG5cblxuLypUYXNrIDFcblxu0KDQtdCw0LvQuNC30YPQudGC0LUg0LHQvtC70LXQtSDRg9C00L7QsdC90YvQuSDQv9C70LXQudGB0YXQvtC70LTQtdGALdC/0L7QtNGB0LrQsNC30LrRgyDQvdCwIEphdmFTY3JpcHQg0YfQtdGA0LXQtyDQsNGC0YDQuNCx0YPRgiBkYXRhLXBsYWNlaG9sZGVyLlxuXG7Qn9GA0LDQstC40LvQsCDRgNCw0LHQvtGC0Ysg0L/Qu9C10LnRgdGF0L7Qu9C00LXRgNCwOlxuICDQrdC70LXQvNC10L3RgiDQuNC30L3QsNGH0LDQu9GM0L3QviDRgdC+0LTQtdGA0LbQuNGCINC/0LvQtdC50YHRhdC+0LvQtNC10YAuINCh0L/QtdGG0LjQsNC70YzQvdGL0Lkg0LrQu9Cw0YHRgSBwbGFjZWhvbGRlciDQv9GA0LjQtNCw0LXRgiDQtdC80YMg0YHQuNC90LjQuSDRhtCy0LXRgi5cbiAg0J/RgNC4INGE0L7QutGD0YHQuNGA0L7QstC60LUg0L/Qu9C10LnRgdGF0L7Qu9C00LXRgCDQv9C+0LrQsNC30YvQstCw0LXRgtGB0Y8g0YPQttC1INC90LDQtCDQv9C+0LvQtdC8LCDRgdGC0LDQvdC+0LLRj9GB0YwgwqvQv9C+0LTRgdC60LDQt9C60L7QucK7LlxuICDQn9GA0Lgg0YHQvdGP0YLQuNC4INGE0L7QutGD0YHQsCwg0L/QvtC00YHQutCw0LfQutCwINGD0LHQuNGA0LDQtdGC0YHRjywg0LXRgdC70Lgg0L/QvtC70LUg0L/Rg9GB0YLQvtC1IOKAkyDQv9C70LXQudGB0YXQvtC70LTQtdGAINCy0L7Qt9Cy0YDQsNGJ0LDQtdGC0YHRjyDQsiDQvdC10LPQvi5cbiovXG5cbmZ1bmN0aW9uIHRhc2sxICgpIHtcbiAgbGV0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxhY2Vob2xkZXJXcmFwJylcbiAgbGV0IHRpcCA9IG51bGxcbiAgbGV0IGlzQ29udGFpbnNQbGFjZWhvbGRlciA9IGlucHV0ID0+IGlucHV0LmRhdGFzZXQucGxhY2Vob2xkZXJcbiAgbGV0IGNyZWF0ZVRpcCA9ICh2YWx1ZSkgPT4ge1xuICAgIGxldCB0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICB0aXAuY2xhc3NMaXN0LmFkZCgncGxhY2Vob2xkZXItdG9vbHRpcCcpXG4gICAgdGlwLmlubmVySFRNTCA9IHZhbHVlXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aXApXG4gICAgcmV0dXJuIHRpcFxuICB9XG5cbiAgbGV0IHNldFBsYWNlaG9sZGVyRm9yID0gaW5wdXQgPT4ge1xuICAgIGlucHV0LnZhbHVlID0gaW5wdXQuZGF0YXNldC5wbGFjZWhvbGRlclxuICB9XG4gIFxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGUpID0+IHtcbiAgICAkKCdpbnB1dFtkYXRhLXBsYWNlaG9sZGVyXScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgc2V0UGxhY2Vob2xkZXJGb3IoaW5wdXQpXG4gICAgfSlcbiAgfSlcblxuICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZSA9PiB7XG4gICAgbGV0IGlucHV0ID0gZS50YXJnZXRcblxuICAgIGlmICghaXNDb250YWluc1BsYWNlaG9sZGVyKGlucHV0KSkgcmV0dXJuIGZhbHNlXG4gICAgaW5wdXQudmFsdWUgPSAnJ1xuICAgIHRpcCA9IGNyZWF0ZVRpcChpbnB1dC5kYXRhc2V0LnBsYWNlaG9sZGVyKVxuICAgIHRpcC5zdHlsZS50b3AgPSBpbnB1dC5vZmZzZXRUb3AgLSB0aXAub2Zmc2V0SGVpZ2h0ICsgJ3B4J1xuICAgIHRpcC5zdHlsZS5sZWZ0ID0gaW5wdXQub2Zmc2V0TGVmdCArICdweCdcbiAgfSwgdHJ1ZSlcblxuICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHtcbiAgICBsZXQgaW5wdXQgPSBlLnRhcmdldFxuICAgIGlmICghaXNDb250YWluc1BsYWNlaG9sZGVyKGlucHV0KSkgcmV0dXJuIGZhbHNlXG4gICAgc2V0UGxhY2Vob2xkZXJGb3IoaW5wdXQpXG4gICAgdGlwLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGlwKVxuICB9LCB0cnVlKVxufVxudGFzazEoKVxuXG4vKkVubGlnaHRtZW50OlxuICBpbnN0ZWFkIG9mIGNsb2p1cmUgYHRpcGAgeW91IGNhbiB1c2UgZWxlbWVudC50aXAgKGN1c3RvbSBkb20gcHJvcGVydHkpXG4gIHVzZWZ1bCwgaWYgeW91IG5lZWQgdG8gc2hvdyAyIG9yIG1vcmUgYHRpcHNgXG4qL1xuXG5cblxuXG4vKlRhc2sgMlxuINCa0LvQuNC60L3QuNGC0LUg0L/QviDQvNGL0YjQvtC90LrRgy4g0JfQsNGC0LXQvCDQvdCw0LbQuNC80LDQudGC0LUg0LrQu9Cw0LLQuNGI0Lgg0YHQviDRgdGC0YDQtdC70LrQsNC80LgsINC4INC+0L0g0LHRg9C00LXRgiDQtNCy0LjQs9Cw0YLRjNGB0Y8uXG7QkiDRjdGC0L7QuSDQt9Cw0LTQsNGH0LUg0LfQsNC/0YDQtdGJ0LDQtdGC0YHRjyDRgdGC0LDQstC40YLRjCDQvtCx0YDQsNCx0L7RgtGH0LjQutC4INC60YPQtNCwLdC70LjQsdC+LCDQutGA0L7QvNC1INGN0LvQtdC80LXQvdGC0LAgI21vdXNlLlxu0JzQvtC20L3QviDQuNC30LzQtdC90Y/RgtGMINCw0YLRgNC40LHRg9GC0Ysg0Lgg0LrQu9Cw0YHRgdGLINCyIEhUTUwuXG5cbmh0dHA6Ly9wbG5rci5jby9lZGl0L2tMaDB5cWJpNmlyY0ROSDRNU2RXP3A9cHJldmlld1xuKi9cblxuZnVuY3Rpb24gdGFzazIgKCkge1xuICBjb25zdCBtb3VzZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3VzZScpXG4gIGNvbnN0IGRpcmVjdGlvbnMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddXG4gIGNvbnN0IGlzQXJyb3cgPSAodHlwZSwgY29kZSkgPT4ge1xuICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgIGNhc2UgJ2xlZnQnICAgOiByZXR1cm4gY29kZSA9PT0gMzdcbiAgICAgIGNhc2UgJ3RvcCcgICAgOiByZXR1cm4gY29kZSA9PT0gMzhcbiAgICAgIGNhc2UgJ3JpZ2h0JyAgOiByZXR1cm4gY29kZSA9PT0gMzlcbiAgICAgIGNhc2UgJ2JvdHRvbScgOiByZXR1cm4gY29kZSA9PT0gNDBcbiAgICAgIGRlZmF1bHQgICAgICAgOiByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2hpZnQgPSAoZWxlbSwgZGlyLCBzdGVwPTI1KSA9PiB7XG4gICAgc3dpdGNoKGRpcil7XG4gICAgICBjYXNlICdsZWZ0JyAgIDogZWxlbS5zdHlsZS5sZWZ0ID0gKHBhcnNlSW50KGVsZW0uc3R5bGUubGVmdCkgfHwgMCkgLSBzdGVwICsgJ3B4JzsgYnJlYWtcbiAgICAgIGNhc2UgJ3JpZ2h0JyAgOiBlbGVtLnN0eWxlLmxlZnQgPSAocGFyc2VJbnQoZWxlbS5zdHlsZS5sZWZ0KSB8fCAwKSArIHN0ZXAgKyAncHgnOyBicmVha1xuICAgICAgY2FzZSAndG9wJyAgICA6IGVsZW0uc3R5bGUudG9wID0gKHBhcnNlSW50KGVsZW0uc3R5bGUudG9wKSB8fCAwKSAtIHN0ZXAgKyAncHgnOyBicmVha1xuICAgICAgY2FzZSAnYm90dG9tJyA6IGVsZW0uc3R5bGUudG9wID0gKHBhcnNlSW50KGVsZW0uc3R5bGUudG9wKSB8fCAwKSArIHN0ZXAgKyAncHgnOyBicmVha1xuICAgICAgZGVmYXVsdCAgICAgICA6IHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIG1vdXNlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIGRpcmVjdGlvbnMuZm9yRWFjaChkaXIgPT4ge1xuICAgICAgaWYgKCFpc0Fycm93KGRpciwgZS5rZXlDb2RlKSkgcmV0dXJuXG4gICAgICBzaGlmdCh0aGlzLCBkaXIpXG4gICAgfSlcbiAgfSlcbn1cbnRhc2syKClcblxuXG5cblxuLypUYXNrIDNcblxu0KHQvtC30LTQsNC50YLQtSA8ZGl2Piwg0LrQvtGC0L7RgNGL0Lkg0L/RgNC4INC90LDQttCw0YLQuNC4IEN0cmwrRSDQv9GA0LXQstGA0LDRidCw0LXRgtGB0Y8g0LIgPHRleHRhcmVhPi5cbtCY0LfQvNC10L3QtdC90LjRjywg0LLQvdC10YHQtdC90L3Ri9C1INCyINC/0L7Qu9C1LCDQvNC+0LbQvdC+INGB0L7RhdGA0LDQvdC40YLRjCDQvtCx0YDQsNGC0L3QviDQsiA8ZGl2PiDRgdC+0YfQtdGC0LDQvdC40LXQvCDQutC70LDQstC40YggQ3RybCtTLCDQv9GA0Lgg0Y3RgtC+0LwgXG48ZGl2PiDQv9C+0LvRg9GH0LjRgiDQsiDQstC40LTQtSBIVE1MINGB0L7QtNC10YDQttC40LzQvtC1IDx0ZXh0YXJlYT4uXG5cbtCV0YHQu9C4INC20LUg0L3QsNC20LDRgtGMIEVzYywg0YLQviA8dGV4dGFyZWE+INGB0L3QvtCy0LAg0L/RgNC10LLRgNCw0YnQsNC10YLRgdGPINCyIDxkaXY+LCDQuNC30LzQtdC90LXQvdC40Y8g0L3QtSDRgdC+0YXRgNCw0L3Rj9GO0YLRgdGPLlxuKi9cblxuZnVuY3Rpb24gdGFzazMgKCkge1xuICBjb25zdCB0eXBlcyA9IHtcbiAgICBzdGF0aWM6ICdkaXYnLFxuICAgIGVkaXRhYmxlOiAndGV4dGFyZWEnXG4gIH1cblxuICBjb25zdCBjaGVja0hvdGtleSA9IChlLCBrZXkpID0+IGUua2V5Q29kZSA9PT0ga2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSAmJiBlLmN0cmxLZXlcbiAgY29uc3QgY2hlY2tFc2NhcGVLZXkgPSAoZSkgPT4gZS5rZXlDb2RlID09PSAyN1xuXG4gIGNvbnN0IEVkaXRhYmxlID0gZnVuY3Rpb24oY29udGVudCwga2V5ZG93bkhhbmRsZXIpIHtcbiAgICBsZXQgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZXMuZWRpdGFibGUpXG5cbiAgICBlbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1lZGl0YWJsZScsICcnKVxuICAgIGVsZW0uc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKVxuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25IYW5kbGVyKVxuICAgIGVsZW0udmFsdWUgPSBjb250ZW50XG4gICAgcmV0dXJuIGVsZW1cbiAgfVxuXG4gIGNvbnN0IFN0YXRpYyA9IGZ1bmN0aW9uIChjb250ZW50LCBrZXlkb3duSGFuZGxlcikge1xuICAgIGxldCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlcy5zdGF0aWMpXG5cbiAgICBlbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1lZGl0YWJsZScsICcnKVxuICAgIGVsZW0uc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKVxuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25IYW5kbGVyKVxuICAgIGVsZW0udGV4dENvbnRlbnQgPSBjb250ZW50XG4gICAgcmV0dXJuIGVsZW1cbiAgfVxuXG5cbiAgJCgnW2RhdGEtZWRpdGFibGVdJykuZm9yRWFjaChlbGVtID0+IHtcbiAgICBsZXQgbGFzdFNhdmVkVHh0ID0gJydcblxuICAgIGxldCBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGxldCByZXBsYWNlciA9IG51bGxcbiAgICAgIC8vIGVkaXRpbmcgc3RhdGljXG4gICAgICBpZiAoY2hlY2tIb3RrZXkoZSwgXCJFXCIpICYmIHRoaXMudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0eXBlcy5zdGF0aWMpIHtcbiAgICAgICAgcmVwbGFjZXIgPSBuZXcgRWRpdGFibGUodGhpcy50ZXh0Q29udGVudCwgaGFuZGxlcilcbiAgICAgIH1cbiAgICAgIC8vIHNhdmluZ1xuICAgICAgZWxzZSBpZiAoY2hlY2tIb3RrZXkoZSwgXCJTXCIpKSB7XG4gICAgICAgIGxhc3RTYXZlZFR4dCA9IHRoaXMudmFsdWVcbiAgICAgICAgcmVwbGFjZXIgPSBuZXcgU3RhdGljKHRoaXMudmFsdWUsIGhhbmRsZXIpXG4gICAgICB9XG4gICAgICAvLyB1bnNhdmVkXG4gICAgICBlbHNlIGlmIChjaGVja0VzY2FwZUtleShlKSkge1xuICAgICAgICByZXBsYWNlciA9IG5ldyBTdGF0aWMobGFzdFNhdmVkVHh0LCBoYW5kbGVyKVxuICAgICAgfVxuICAgICAgLy8gaWdub3JlIG90aGVyIGtleXNcbiAgICAgIGVsc2Uge3JldHVybn1cblxuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChyZXBsYWNlciwgdGhpcylcbiAgICAgIHJlcGxhY2VyLmZvY3VzKClcbiAgICB9XG5cbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVyKVxuICB9KVxuXG59XG50YXNrMygpXG5cblxuXG5cbi8qVGFzayA0XG7QodC00LXQu9Cw0YLRjCDRj9GH0LXQudC60Lgg0YLQsNCx0LvQuNGG0YsgdGQg0YDQtdC00LDQutGC0LjRgNGD0LXQvNGL0LzQuCDQv9C+INC60LvQuNC60YMuXG5cbtCf0YDQuCDQutC70LjQutC1IOKAkyDRj9GH0LXQudC60LAgPHRkPiDQv9GA0LXQstGA0LDRidCw0LXRgtGB0Y8g0LIg0YDQtdC00LDQutGC0LjRgNGD0LXQvNGD0Y4sINC80L7QttC90L4g0LzQtdC90Y/RgtGMIEhUTUwuXG5cbtCg0LDQt9C80LXRgNGLINGP0YfQtdC10Log0L/RgNC4INGN0YLQvtC8INC90LUg0LTQvtC70LbQvdGLINC80LXQvdGP0YLRjNGB0Y8uXG7QkiDQvtC00LjQvSDQvNC+0LzQtdC90YIg0LzQvtC20LXRgiDRgNC10LTQsNC60YLQuNGA0L7QstCw0YLRjNGB0Y8g0L7QtNC90LAg0Y/Rh9C10LnQutCwLlxuXG7Qn9GA0Lgg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQuCDQv9C+0LQg0Y/Rh9C10LnQutC+0Lkg0L/QvtGP0LLQu9GP0Y7RgtGB0Y8g0LrQvdC+0L/QutC4INC00LvRjyDQv9GA0LjQtdC80LAg0Lgg0L7RgtC80LXQvdCwINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8sXG7RgtC+0LvRjNC60L4g0LrQu9C40Log0L3QsCDQvdC40YUg0LfQsNC60LDQvdGH0LjQstCw0LXRgiDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1LlxuXG4qL1xuXG5mdW5jdGlvbiB0YXNrNCAoKSB7XG4gIGNvbnN0IEVkaXRhYmxlID0gZnVuY3Rpb24ob3JpZ2luKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBvcmlnaW5cbiAgICB0aGlzLmFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpXG4gICAgdGhpcy5hcmVhLmNsYXNzTGlzdC5hZGQoJ2NlbGwtZWRpdGFibGUnKVxuICAgIHRoaXMuYXJlYS52YWx1ZSA9IG9yaWdpbi5pbm5lckhUTUxcbiAgfVxuICBFZGl0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmFyZWEpXG4gICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5jb250cm9scylcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIEVkaXRhYmxlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucGFyZW50LmFwcGVuZENoaWxkKHRoaXMuYXJlYSlcbiAgICB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRyb2xzKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgRWRpdGFibGUucHJvdG90eXBlLmNyZWF0ZUNvbnRyb2xzID0gZnVuY3Rpb24oY29udHJvbHNUZW1wbGF0ZSkge1xuICAgIHRoaXMuY29udHJvbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuY29udHJvbHMuY2xhc3NMaXN0LmFkZCgnZWRpdGFibGUtY29udHJvbC13cmFwJylcbiAgICBcbiAgICBjb250cm9sc1RlbXBsYXRlLmZvckVhY2goY29udHJvbCA9PiB7XG4gICAgICBsZXQgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdlZGl0YWJsZS1jb250cm9sJylcbiAgICAgIGJ0bi50ZXh0Q29udGVudCA9IGNvbnRyb2wubmFtZVxuICAgICAgYnRuLm9uY2xpY2sgPSBjb250cm9sLmhhbmRsZXJcbiAgICAgIHRoaXMuY29udHJvbHMuYXBwZW5kQ2hpbGQoYnRuKVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGxldCBhY3RpdmVDZWxsID0gbnVsbFxuICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWd1YS10YWJsZScpXG5cbiAgdGFibGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICBsZXQgY2VsbCA9IGUudGFyZ2V0XG4gICAgbGV0IGlzVmFsaWRDZWxsID0gKGNlbGwpID0+IGFjdGl2ZUNlbGwgPT09IGNlbGwgfHwgYWN0aXZlQ2VsbCA9PT0gbnVsbFxuXG4gICAgaWYgKCFpc1ZhbGlkQ2VsbChjZWxsKSB8fCBjZWxsLnRhZ05hbWUgIT09ICdURCcpIHJldHVybjtcblxuICAgIGFjdGl2ZUNlbGwgPSBjZWxsXG4gICAgbGV0IGxhc3RTYXZlZENvbnRlbnQgPSBjZWxsLmlubmVySFRNTFxuICAgIGxldCBlZGl0YWJsZSA9IG5ldyBFZGl0YWJsZShjZWxsKVxuICAgIGxldCBhcmVhID0gZWRpdGFibGUuYXJlYVxuXG4gICAgZWRpdGFibGVcbiAgICAgIC5jcmVhdGVDb250cm9scyhbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnU2F2ZScsXG4gICAgICAgICAgaGFuZGxlcjogZSA9PiB7XG4gICAgICAgICAgICBlZGl0YWJsZS5kZXN0cm95KClcbiAgICAgICAgICAgIGFjdGl2ZUNlbGwgPSBudWxsXG4gICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IGFyZWEudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnQ2FuY2VsJyxcbiAgICAgICAgICBoYW5kbGVyOiBlID0+IHtcbiAgICAgICAgICAgIGVkaXRhYmxlLmRlc3Ryb3koKVxuICAgICAgICAgICAgYWN0aXZlQ2VsbCA9IG51bGxcbiAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gbGFzdFNhdmVkQ29udGVudFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSlcbiAgICAgIC5pbml0KClcbiAgfSlcbiAgICBcbn1cbnRhc2s0KClcblxuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
