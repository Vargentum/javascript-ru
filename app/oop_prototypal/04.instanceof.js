"use strict";

/*Task 1: why instanceof retuns true?

Answer: because Constructor not take part in equality checking
only prototype takes. 
And prototype of A and prototype of B constructors, has 
reference to single empty object. So
a instaceof A -> true
a instaceof B -> true

*/

function task1() {
  function A() {}
  function B() {}

  A.prototype = B.prototype = {};

  var a = new A();

  console.log(a instanceof A); // true
  console.log(a instanceof B); // true
}
// task1()

/*Task 2: what and why console logs?
Answer: 
  1. false, because Rabbit.prototype.constructor is Animal
  To prevent this, set constructor explicitly
  Rabbit.prototype.constructor = Rabbit
  (incorrect: result is true, because constructor not used equality checking
  only prototype: remember for future)

  2. true, see answer 1
  3. true, because all functions are objects
*/

function task2() {
  function Animal() {}

  function Rabbit() {}
  Rabbit.prototype = Object.create(Animal.prototype);

  var rabbit = new Rabbit();

  console.log(rabbit instanceof Rabbit); //true
  console.log(rabbit instanceof Animal); //true
  console.log(rabbit instanceof Object); //true
}
// task2()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjA0Lmluc3RhbmNlb2YuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVdBLFNBQVMsS0FBSyxHQUFJO0FBQ2hCLFdBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDZixXQUFTLENBQUMsR0FBRyxFQUFFOztBQUVmLEdBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7O0FBRS9CLE1BQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7O0FBRWhCLFNBQU8sQ0FBQyxHQUFHLENBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBRTtBQUFDLEFBQzlCLFNBQU8sQ0FBQyxHQUFHLENBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBRTtBQUFDLENBQy9COzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQWtCRCxTQUFTLEtBQUssR0FBSTtBQUNoQixXQUFTLE1BQU0sR0FBRyxFQUFFOztBQUVwQixXQUFTLE1BQU0sR0FBRyxFQUFFO0FBQ3BCLFFBQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRW5ELE1BQUksTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7O0FBRTFCLFNBQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxZQUFZLE1BQU0sQ0FBRTtBQUFDLEFBQ3hDLFNBQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxZQUFZLE1BQU0sQ0FBRTtBQUFDLEFBQ3hDLFNBQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxZQUFZLE1BQU0sQ0FBRTtBQUFDLENBQ3pDOztBQUFBIiwiZmlsZSI6Im9vcF9wcm90b3R5cGFsLzA0Lmluc3RhbmNlb2YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlRhc2sgMTogd2h5IGluc3RhbmNlb2YgcmV0dW5zIHRydWU/XG5cbkFuc3dlcjogYmVjYXVzZSBDb25zdHJ1Y3RvciBub3QgdGFrZSBwYXJ0IGluIGVxdWFsaXR5IGNoZWNraW5nXG5vbmx5IHByb3RvdHlwZSB0YWtlcy4gXG5BbmQgcHJvdG90eXBlIG9mIEEgYW5kIHByb3RvdHlwZSBvZiBCIGNvbnN0cnVjdG9ycywgaGFzIFxucmVmZXJlbmNlIHRvIHNpbmdsZSBlbXB0eSBvYmplY3QuIFNvXG5hIGluc3RhY2VvZiBBIC0+IHRydWVcbmEgaW5zdGFjZW9mIEIgLT4gdHJ1ZVxuXG4qL1xuXG5mdW5jdGlvbiB0YXNrMSAoKSB7XG4gIGZ1bmN0aW9uIEEoKSB7fVxuICBmdW5jdGlvbiBCKCkge31cblxuICBBLnByb3RvdHlwZSA9IEIucHJvdG90eXBlID0ge307XG5cbiAgdmFyIGEgPSBuZXcgQSgpO1xuXG4gIGNvbnNvbGUubG9nKCBhIGluc3RhbmNlb2YgQSApOyAvLyB0cnVlXG4gIGNvbnNvbGUubG9nKCBhIGluc3RhbmNlb2YgQiApOyAvLyB0cnVlXG59XG4vLyB0YXNrMSgpXG5cblxuXG5cbi8qVGFzayAyOiB3aGF0IGFuZCB3aHkgY29uc29sZSBsb2dzP1xuQW5zd2VyOiBcbiAgMS4gZmFsc2UsIGJlY2F1c2UgUmFiYml0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciBpcyBBbmltYWxcbiAgVG8gcHJldmVudCB0aGlzLCBzZXQgY29uc3RydWN0b3IgZXhwbGljaXRseVxuICBSYWJiaXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmFiYml0XG4gIChpbmNvcnJlY3Q6IHJlc3VsdCBpcyB0cnVlLCBiZWNhdXNlIGNvbnN0cnVjdG9yIG5vdCB1c2VkIGVxdWFsaXR5IGNoZWNraW5nXG4gIG9ubHkgcHJvdG90eXBlOiByZW1lbWJlciBmb3IgZnV0dXJlKVxuXG4gIDIuIHRydWUsIHNlZSBhbnN3ZXIgMVxuICAzLiB0cnVlLCBiZWNhdXNlIGFsbCBmdW5jdGlvbnMgYXJlIG9iamVjdHNcbiovXG5cbmZ1bmN0aW9uIHRhc2syICgpIHtcbiAgZnVuY3Rpb24gQW5pbWFsKCkge31cblxuICBmdW5jdGlvbiBSYWJiaXQoKSB7fVxuICBSYWJiaXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBbmltYWwucHJvdG90eXBlKTtcblxuICB2YXIgcmFiYml0ID0gbmV3IFJhYmJpdCgpO1xuXG4gIGNvbnNvbGUubG9nKCByYWJiaXQgaW5zdGFuY2VvZiBSYWJiaXQgKTsgLy90cnVlXG4gIGNvbnNvbGUubG9nKCByYWJiaXQgaW5zdGFuY2VvZiBBbmltYWwgKTsgLy90cnVlXG4gIGNvbnNvbGUubG9nKCByYWJiaXQgaW5zdGFuY2VvZiBPYmplY3QgKTsgLy90cnVlXG59XG4vLyB0YXNrMigpXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
