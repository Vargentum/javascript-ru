'use strict';

/*
Exercise 1: создание Класса через Прототип

props in Constructor
methods in Prototype

*/

function example1() {

  //constructor
  function Animal(name) {
    this.speed = 0;
    this.name = name;
  }

  //extend contstructor prototype with new methods

  Animal.prototype.run = function (speed) {
    this.speed += speed;
  };

  Animal.prototype.stop = function () {
    this.speed = 0;
  };

  var a = new Animal('rabbit');

  a.run(3);
  console.log(a.speed);
  a.run(3);
  console.log(a.speed);
  a.stop();
  console.log(a.speed);
}
// example1()

/*
Rewrite Functional inheritance to Prototypal
*/

function task1() {

  //functional
  function CoffeeMachineFunctional(power) {
    var waterAmount = 0;

    var WATER_HEAT_CAPACITY = 4200;

    function getTimeToBoil() {
      return waterAmount * WATER_HEAT_CAPACITY * 80 / power;
    }

    this.run = function () {
      setTimeout(function () {
        console.log('Кофе готов!');
      }, getTimeToBoil());
    };

    this.setWaterAmount = function (amount) {
      waterAmount = amount;
    };
  }

  var cm = new CoffeeMachineFunctional(10000);
  cm.setWaterAmount(50);
  cm.run();

  //prototypal

  function CoffeeMachinePrototypal(power) {
    this._waterAmount = 0;
    this._power = power;
  }

  //static property
  CoffeeMachinePrototypal.prototype.WATER_HEAD_CAPACITY = 4200;

  CoffeeMachinePrototypal.prototype._getTimeToBoil = function () {
    return this._waterAmount * this._WATER_HEAT_CAPACITY * 80 / this._power;
  };

  CoffeeMachinePrototypal.prototype.run = function () {
    setTimeout(function () {
      console.log('Coffee is Ready!');
    }, this._getTimeToBoil());
  };

  CoffeeMachinePrototypal.prototype.setWaterAmount = function (amount) {
    this._waterAmount = amount;
  };

  var cm = new CoffeeMachinePrototypal(10001);
  cm.setWaterAmount(50);
  cm.run();
}
// task1()

/*Task 2: Fix function
*/
function task2() {
  function Hamster() {
    this.food = []; // make different prop for each instance
  }

  // Hamster.prototype.food = []  incorrect - one food for all instances

  Hamster.prototype.found = function (something) {
    this.food.push(something);
  };

  // Создаём двух хомяков и кормим первого
  var speedy = new Hamster();
  var lazy = new Hamster();

  speedy.found("яблоко");
  speedy.found("орех");

  console.log(speedy.food.length); // 2
  console.log(lazy.food.length); // 0
}
task2();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAyLmN1c3RvbV9wcm90b3R5cGVfY2xhc3Nlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBUUEsU0FBUyxRQUFRLEdBQUk7OztBQUduQixXQUFTLE1BQU0sQ0FBRSxJQUFJLEVBQUU7QUFDckIsUUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7QUFDZCxRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtHQUNqQjs7OztBQUFBLEFBSUQsUUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDdEMsUUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUM7R0FDckIsQ0FBQTs7QUFFRCxRQUFNLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFXO0FBQ2pDLFFBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ2hCLENBQUM7O0FBRUYsTUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7O0FBRTVCLEdBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDUixTQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQixHQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckIsR0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ1IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEI7Ozs7Ozs7QUFBQSxBQVNELFNBQVMsS0FBSyxHQUFFOzs7QUFHZCxXQUFTLHVCQUF1QixDQUFDLEtBQUssRUFBRTtBQUN0QyxRQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7O0FBRXBCLFFBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDOztBQUUvQixhQUFTLGFBQWEsR0FBRztBQUN2QixhQUFPLFdBQVcsR0FBRyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0tBQ3ZEOztBQUVELFFBQUksQ0FBQyxHQUFHLEdBQUcsWUFBVztBQUNwQixnQkFBVSxDQUFDLFlBQVc7QUFDcEIsZUFBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLENBQUUsQ0FBQztPQUM5QixFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7S0FDckIsQ0FBQzs7QUFFRixRQUFJLENBQUMsY0FBYyxHQUFHLFVBQVMsTUFBTSxFQUFFO0FBQ3JDLGlCQUFXLEdBQUcsTUFBTSxDQUFDO0tBQ3RCLENBQUM7R0FFSDs7QUFFRCxNQUFJLEVBQUUsR0FBRyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsSUFBRSxDQUFDLEdBQUcsRUFBRTs7OztBQUFDLEFBS1QsV0FBUyx1QkFBdUIsQ0FBRSxLQUFLLEVBQUU7QUFDdkMsUUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7QUFDckIsUUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7R0FDcEI7OztBQUFBLEFBR0QseUJBQXVCLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQTs7QUFFNUQseUJBQXVCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0FBQzdELFdBQU8sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDekUsQ0FBQTs7QUFFRCx5QkFBdUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFlBQVk7QUFDbEQsY0FBVSxDQUFDLFlBQVc7QUFDcEIsYUFBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ2pDLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7R0FDMUIsQ0FBQTs7QUFFRCx5QkFBdUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQ25FLFFBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0dBQzVCLENBQUE7O0FBRUQsTUFBSSxFQUFFLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMzQyxJQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLElBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtDQUNUOzs7OztBQUFBLEFBT0QsU0FBUyxLQUFLLEdBQUk7QUFDaEIsV0FBUyxPQUFPLEdBQUc7QUFDakIsUUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQUEsR0FDZjs7OztBQUFBLEFBSUQsU0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBUyxTQUFTLEVBQUU7QUFDNUMsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDM0I7OztBQUFDLEFBR0YsTUFBSSxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMzQixNQUFJLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOztBQUV6QixRQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLFFBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXJCLFNBQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUU7QUFBQyxBQUNsQyxTQUFPLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFO0FBQUMsQ0FDakM7QUFDRCxLQUFLLEVBQUUsQ0FBQSIsImZpbGUiOiJvb3BfcHJvdG90eXBhbC8wMi5jdXN0b21fcHJvdG90eXBlX2NsYXNzZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuRXhlcmNpc2UgMTog0YHQvtC30LTQsNC90LjQtSDQmtC70LDRgdGB0LAg0YfQtdGA0LXQtyDQn9GA0L7RgtC+0YLQuNC/XG5cbnByb3BzIGluIENvbnN0cnVjdG9yXG5tZXRob2RzIGluIFByb3RvdHlwZVxuXG4qL1xuXG5mdW5jdGlvbiBleGFtcGxlMSAoKSB7XG5cbiAgLy9jb25zdHJ1Y3RvclxuICBmdW5jdGlvbiBBbmltYWwgKG5hbWUpIHtcbiAgICB0aGlzLnNwZWVkID0gMFxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgfVxuXG4gIC8vZXh0ZW5kIGNvbnRzdHJ1Y3RvciBwcm90b3R5cGUgd2l0aCBuZXcgbWV0aG9kc1xuXG4gIEFuaW1hbC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKHNwZWVkKSB7XG4gICAgdGhpcy5zcGVlZCArPSBzcGVlZDtcbiAgfVxuXG4gIEFuaW1hbC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3BlZWQgPSAwO1xuICB9O1xuXG4gIHZhciBhID0gbmV3IEFuaW1hbCgncmFiYml0JylcblxuICBhLnJ1bigzKVxuICBjb25zb2xlLmxvZyhhLnNwZWVkKTtcbiAgYS5ydW4oMylcbiAgY29uc29sZS5sb2coYS5zcGVlZCk7XG4gIGEuc3RvcCgpXG4gIGNvbnNvbGUubG9nKGEuc3BlZWQpO1xufVxuLy8gZXhhbXBsZTEoKVxuXG5cblxuLypcblJld3JpdGUgRnVuY3Rpb25hbCBpbmhlcml0YW5jZSB0byBQcm90b3R5cGFsXG4qL1xuXG5mdW5jdGlvbiB0YXNrMSgpe1xuXG4gIC8vZnVuY3Rpb25hbFxuICBmdW5jdGlvbiBDb2ZmZWVNYWNoaW5lRnVuY3Rpb25hbChwb3dlcikge1xuICAgIHZhciB3YXRlckFtb3VudCA9IDA7XG5cbiAgICB2YXIgV0FURVJfSEVBVF9DQVBBQ0lUWSA9IDQyMDA7XG5cbiAgICBmdW5jdGlvbiBnZXRUaW1lVG9Cb2lsKCkge1xuICAgICAgcmV0dXJuIHdhdGVyQW1vdW50ICogV0FURVJfSEVBVF9DQVBBQ0lUWSAqIDgwIC8gcG93ZXI7XG4gICAgfVxuXG4gICAgdGhpcy5ydW4gPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAn0JrQvtGE0LUg0LPQvtGC0L7QsiEnICk7XG4gICAgICB9LCBnZXRUaW1lVG9Cb2lsKCkpO1xuICAgIH07XG5cbiAgICB0aGlzLnNldFdhdGVyQW1vdW50ID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICB3YXRlckFtb3VudCA9IGFtb3VudDtcbiAgICB9O1xuXG4gIH1cblxuICB2YXIgY20gPSBuZXcgQ29mZmVlTWFjaGluZUZ1bmN0aW9uYWwoMTAwMDApO1xuICBjbS5zZXRXYXRlckFtb3VudCg1MCk7XG4gIGNtLnJ1bigpO1xuXG5cbiAgLy9wcm90b3R5cGFsXG5cbiAgZnVuY3Rpb24gQ29mZmVlTWFjaGluZVByb3RvdHlwYWwgKHBvd2VyKSB7XG4gICAgdGhpcy5fd2F0ZXJBbW91bnQgPSAwXG4gICAgdGhpcy5fcG93ZXIgPSBwb3dlclxuICB9XG5cbiAgLy9zdGF0aWMgcHJvcGVydHlcbiAgQ29mZmVlTWFjaGluZVByb3RvdHlwYWwucHJvdG90eXBlLldBVEVSX0hFQURfQ0FQQUNJVFkgPSA0MjAwXG5cbiAgQ29mZmVlTWFjaGluZVByb3RvdHlwYWwucHJvdG90eXBlLl9nZXRUaW1lVG9Cb2lsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93YXRlckFtb3VudCAqIHRoaXMuX1dBVEVSX0hFQVRfQ0FQQUNJVFkgKiA4MCAvIHRoaXMuX3Bvd2VyO1xuICB9XG5cbiAgQ29mZmVlTWFjaGluZVByb3RvdHlwYWwucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coJ0NvZmZlZSBpcyBSZWFkeSEnKTtcbiAgICB9LCB0aGlzLl9nZXRUaW1lVG9Cb2lsKCkpXG4gIH1cblxuICBDb2ZmZWVNYWNoaW5lUHJvdG90eXBhbC5wcm90b3R5cGUuc2V0V2F0ZXJBbW91bnQgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgdGhpcy5fd2F0ZXJBbW91bnQgPSBhbW91bnQ7XG4gIH1cblxuICB2YXIgY20gPSBuZXcgQ29mZmVlTWFjaGluZVByb3RvdHlwYWwoMTAwMDEpXG4gIGNtLnNldFdhdGVyQW1vdW50KDUwKVxuICBjbS5ydW4oKVxufVxuLy8gdGFzazEoKVxuXG5cblxuLypUYXNrIDI6IEZpeCBmdW5jdGlvblxuKi9cbmZ1bmN0aW9uIHRhc2syICgpIHtcbiAgZnVuY3Rpb24gSGFtc3RlcigpIHtcbiAgICB0aGlzLmZvb2QgPSBbXSAvLyBtYWtlIGRpZmZlcmVudCBwcm9wIGZvciBlYWNoIGluc3RhbmNlXG4gIH1cblxuICAvLyBIYW1zdGVyLnByb3RvdHlwZS5mb29kID0gW10gIGluY29ycmVjdCAtIG9uZSBmb29kIGZvciBhbGwgaW5zdGFuY2VzXG5cbiAgSGFtc3Rlci5wcm90b3R5cGUuZm91bmQgPSBmdW5jdGlvbihzb21ldGhpbmcpIHtcbiAgICB0aGlzLmZvb2QucHVzaChzb21ldGhpbmcpO1xuICB9O1xuXG4gIC8vINCh0L7Qt9C00LDRkdC8INC00LLRg9GFINGF0L7QvNGP0LrQvtCyINC4INC60L7RgNC80LjQvCDQv9C10YDQstC+0LPQvlxuICB2YXIgc3BlZWR5ID0gbmV3IEhhbXN0ZXIoKTtcbiAgdmFyIGxhenkgPSBuZXcgSGFtc3RlcigpO1xuXG4gIHNwZWVkeS5mb3VuZChcItGP0LHQu9C+0LrQvlwiKTtcbiAgc3BlZWR5LmZvdW5kKFwi0L7RgNC10YVcIik7XG5cbiAgY29uc29sZS5sb2coIHNwZWVkeS5mb29kLmxlbmd0aCApOyAvLyAyXG4gIGNvbnNvbGUubG9nKCBsYXp5LmZvb2QubGVuZ3RoICk7IC8vIDBcbn1cbnRhc2syKClcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
